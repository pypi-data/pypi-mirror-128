{"version":3,"file":"f03923de.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+EA;;;ACoCA;AAKA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;;;AAGA;AAKA;AACA;AACA;AAKA;AACA;;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;;AAMA;AAGA;;;AAGA;AACA;AACA;;;;;;;AAOA;AAKA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;;;;;AAKA;AAKA;AACA;AACA;AACA;AACA;AAGA;;;AAGA;AAKA;AACA;AACA;AACA;AACA;AAGA;;;;AAtMA","sources":["webpack://home-assistant-frontend/./node_modules/@polymer/paper-styles/shadow.js","webpack://home-assistant-frontend/./src/panels/lovelace/editor/config-elements/hui-button-card-editor.ts"],"sourcesContent":["/**\n@license\nCopyright (c) 2015 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\n\nimport '@polymer/polymer/polymer-legacy.js';\n\nimport {html} from '@polymer/polymer/lib/utils/html-tag.js';\nconst template = html`\n<custom-style>\n  <style is=\"custom-style\">\n    html {\n\n      --shadow-transition: {\n        transition: box-shadow 0.28s cubic-bezier(0.4, 0, 0.2, 1);\n      };\n\n      --shadow-none: {\n        box-shadow: none;\n      };\n\n      /* from http://codepen.io/shyndman/pen/c5394ddf2e8b2a5c9185904b57421cdb */\n\n      --shadow-elevation-2dp: {\n        box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 5px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 1px -2px rgba(0, 0, 0, 0.2);\n      };\n\n      --shadow-elevation-3dp: {\n        box-shadow: 0 3px 4px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 8px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 3px -2px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-4dp: {\n        box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 10px 0 rgba(0, 0, 0, 0.12),\n                    0 2px 4px -1px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-6dp: {\n        box-shadow: 0 6px 10px 0 rgba(0, 0, 0, 0.14),\n                    0 1px 18px 0 rgba(0, 0, 0, 0.12),\n                    0 3px 5px -1px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-8dp: {\n        box-shadow: 0 8px 10px 1px rgba(0, 0, 0, 0.14),\n                    0 3px 14px 2px rgba(0, 0, 0, 0.12),\n                    0 5px 5px -3px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-12dp: {\n        box-shadow: 0 12px 16px 1px rgba(0, 0, 0, 0.14),\n                    0 4px 22px 3px rgba(0, 0, 0, 0.12),\n                    0 6px 7px -4px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-16dp: {\n        box-shadow: 0 16px 24px 2px rgba(0, 0, 0, 0.14),\n                    0  6px 30px 5px rgba(0, 0, 0, 0.12),\n                    0  8px 10px -5px rgba(0, 0, 0, 0.4);\n      };\n\n      --shadow-elevation-24dp: {\n        box-shadow: 0 24px 38px 3px rgba(0, 0, 0, 0.14),\n                    0 9px 46px 8px rgba(0, 0, 0, 0.12),\n                    0 11px 15px -7px rgba(0, 0, 0, 0.4);\n      };\n    }\n  </style>\n</custom-style>`;\ntemplate.setAttribute('style', 'display: none;');\ndocument.head.appendChild(template.content);\n","import \"@polymer/paper-input/paper-input\";\nimport { CSSResultGroup, html, LitElement, TemplateResult } from \"lit\";\nimport { customElement, property, state } from \"lit/decorators\";\nimport { assert, boolean, object, optional, string, assign } from \"superstruct\";\nimport { fireEvent } from \"../../../../common/dom/fire_event\";\nimport { computeRTLDirection } from \"../../../../common/util/compute_rtl\";\nimport \"../../../../components/ha-formfield\";\nimport \"../../../../components/ha-icon-picker\";\nimport \"../../../../components/ha-switch\";\nimport { ActionConfig } from \"../../../../data/lovelace\";\nimport { HomeAssistant } from \"../../../../types\";\nimport { ButtonCardConfig } from \"../../cards/types\";\nimport \"../../components/hui-action-editor\";\nimport \"../../components/hui-entity-editor\";\nimport \"../../components/hui-theme-select-editor\";\nimport { LovelaceCardEditor } from \"../../types\";\nimport { actionConfigStruct } from \"../structs/action-struct\";\nimport { EditorTarget } from \"../types\";\nimport { configElementStyle } from \"./config-elements-style\";\nimport { baseLovelaceCardConfig } from \"../structs/base-card-struct\";\nimport { computeDomain } from \"../../../../common/entity/compute_domain\";\nimport { domainIcon } from \"../../../../common/entity/domain_icon\";\n\nconst cardConfigStruct = assign(\n  baseLovelaceCardConfig,\n  object({\n    entity: optional(string()),\n    name: optional(string()),\n    show_name: optional(boolean()),\n    icon: optional(string()),\n    show_icon: optional(boolean()),\n    icon_height: optional(string()),\n    tap_action: optional(actionConfigStruct),\n    hold_action: optional(actionConfigStruct),\n    theme: optional(string()),\n    show_state: optional(boolean()),\n  })\n);\n\nconst actions = [\n  \"more-info\",\n  \"toggle\",\n  \"navigate\",\n  \"url\",\n  \"call-service\",\n  \"none\",\n];\n\n@customElement(\"hui-button-card-editor\")\nexport class HuiButtonCardEditor\n  extends LitElement\n  implements LovelaceCardEditor\n{\n  @property({ attribute: false }) public hass?: HomeAssistant;\n\n  @state() private _config?: ButtonCardConfig;\n\n  public setConfig(config: ButtonCardConfig): void {\n    assert(config, cardConfigStruct);\n    this._config = config;\n  }\n\n  get _entity(): string {\n    return this._config!.entity || \"\";\n  }\n\n  get _name(): string {\n    return this._config!.name || \"\";\n  }\n\n  get _show_name(): boolean {\n    return this._config!.show_name ?? true;\n  }\n\n  get _show_state(): boolean {\n    return this._config!.show_state ?? false;\n  }\n\n  get _icon(): string {\n    return this._config!.icon || \"\";\n  }\n\n  get _show_icon(): boolean {\n    return this._config!.show_icon ?? true;\n  }\n\n  get _icon_height(): string {\n    return this._config!.icon_height && this._config!.icon_height.includes(\"px\")\n      ? String(parseFloat(this._config!.icon_height))\n      : \"\";\n  }\n\n  get _tap_action(): ActionConfig | undefined {\n    return this._config!.tap_action;\n  }\n\n  get _hold_action(): ActionConfig {\n    return this._config!.hold_action || { action: \"more-info\" };\n  }\n\n  get _theme(): string {\n    return this._config!.theme || \"\";\n  }\n\n  protected render(): TemplateResult {\n    if (!this.hass || !this._config) {\n      return html``;\n    }\n\n    const dir = computeRTLDirection(this.hass!);\n    const entityState = this.hass.states[this._entity];\n\n    return html`\n      <div class=\"card-config\">\n        <ha-entity-picker\n          .label=\"${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.generic.entity\"\n          )} (${this.hass.localize(\n            \"ui.panel.lovelace.editor.card.config.optional\"\n          )})\"\n          .hass=${this.hass}\n          .value=${this._entity}\n          .configValue=${\"entity\"}\n          @value-changed=${this._valueChanged}\n          allow-custom-entity\n        ></ha-entity-picker>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.name\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._name}\n            .configValue=${\"name\"}\n            @value-changed=${this._valueChanged}\n          ></paper-input>\n          <ha-icon-picker\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon}\n            .placeholder=${this._icon || entityState?.attributes.icon}\n            .fallbackPath=${!this._icon &&\n            !entityState?.attributes.icon &&\n            entityState\n              ? domainIcon(computeDomain(entityState.entity_id), entityState)\n              : undefined}\n            .configValue=${\"icon\"}\n            @value-changed=${this._valueChanged}\n          ></ha-icon-picker>\n        </div>\n        <div class=\"side-by-side\">\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_name\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._show_name !== false}\n                .configValue=${\"show_name\"}\n                @change=${this._change}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_state\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._show_state !== false}\n                .configValue=${\"show_state\"}\n                @change=${this._change}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n          <div>\n            <ha-formfield\n              .label=${this.hass.localize(\n                \"ui.panel.lovelace.editor.card.generic.show_icon\"\n              )}\n              .dir=${dir}\n            >\n              <ha-switch\n                .checked=${this._show_icon !== false}\n                .configValue=${\"show_icon\"}\n                @change=${this._change}\n              ></ha-switch>\n            </ha-formfield>\n          </div>\n        </div>\n        <div class=\"side-by-side\">\n          <paper-input\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.icon_height\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .value=${this._icon_height}\n            .configValue=${\"icon_height\"}\n            @value-changed=${this._valueChanged}\n            type=\"number\"\n            ><div class=\"suffix\" slot=\"suffix\">px</div>\n          </paper-input>\n          <hui-theme-select-editor\n            .hass=${this.hass}\n            .value=${this._theme}\n            .configValue=${\"theme\"}\n            @value-changed=${this._valueChanged}\n          ></hui-theme-select-editor>\n        </div>\n        <div class=\"side-by-side\">\n          <hui-action-editor\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.tap_action\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .hass=${this.hass}\n            .config=${this._tap_action}\n            .actions=${actions}\n            .configValue=${\"tap_action\"}\n            .tooltipText=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.button.default_action_help\"\n            )}\n            @value-changed=${this._valueChanged}\n          ></hui-action-editor>\n          <hui-action-editor\n            .label=\"${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.generic.hold_action\"\n            )} (${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.config.optional\"\n            )})\"\n            .hass=${this.hass}\n            .config=${this._hold_action}\n            .actions=${actions}\n            .configValue=${\"hold_action\"}\n            .tooltipText=${this.hass.localize(\n              \"ui.panel.lovelace.editor.card.button.default_action_help\"\n            )}\n            @value-changed=${this._valueChanged}\n          ></hui-action-editor>\n        </div>\n      </div>\n    `;\n  }\n\n  private _change(ev: Event) {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = target.checked;\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n\n    fireEvent(this, \"config-changed\", {\n      config: {\n        ...this._config,\n        [target.configValue!]: value,\n      },\n    });\n  }\n\n  private _valueChanged(ev: CustomEvent): void {\n    if (!this._config || !this.hass) {\n      return;\n    }\n    const target = ev.target! as EditorTarget;\n    const value = ev.detail.value;\n\n    if (this[`_${target.configValue}`] === value) {\n      return;\n    }\n    let newConfig;\n    if (target.configValue) {\n      if (value !== false && !value) {\n        newConfig = { ...this._config };\n        delete newConfig[target.configValue!];\n      } else {\n        newConfig = {\n          ...this._config,\n          [target.configValue!]:\n            target.configValue === \"icon_height\" && !isNaN(Number(target.value))\n              ? `${String(value)}px`\n              : value,\n        };\n      }\n    }\n    fireEvent(this, \"config-changed\", { config: newConfig });\n  }\n\n  static get styles(): CSSResultGroup {\n    return configElementStyle;\n  }\n}\n\ndeclare global {\n  interface HTMLElementTagNameMap {\n    \"hui-button-card-editor\": HuiButtonCardEditor;\n  }\n}\n"],"names":[],"sourceRoot":""}