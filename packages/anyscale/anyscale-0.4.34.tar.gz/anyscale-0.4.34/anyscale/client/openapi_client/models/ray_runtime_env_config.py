# coding: utf-8

"""
    Managed Ray API

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 0.1.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class RayRuntimeEnvConfig(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'working_dir': 'str',
        'py_modules': 'list[str]',
        'pip_packages': 'str',
        'conda_env_name': 'str',
        'conda_values': 'object',
        'env_variables': 'dict(str, str)'
    }

    attribute_map = {
        'working_dir': 'working_dir',
        'py_modules': 'py_modules',
        'pip_packages': 'pip_packages',
        'conda_env_name': 'conda_env_name',
        'conda_values': 'conda_values',
        'env_variables': 'env_variables'
    }

    def __init__(self, working_dir=None, py_modules=None, pip_packages=None, conda_env_name=None, conda_values=None, env_variables=None, local_vars_configuration=None):  # noqa: E501
        """RayRuntimeEnvConfig - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._working_dir = None
        self._py_modules = None
        self._pip_packages = None
        self._conda_env_name = None
        self._conda_values = None
        self._env_variables = None
        self.discriminator = None

        if working_dir is not None:
            self.working_dir = working_dir
        if py_modules is not None:
            self.py_modules = py_modules
        if pip_packages is not None:
            self.pip_packages = pip_packages
        if conda_env_name is not None:
            self.conda_env_name = conda_env_name
        if conda_values is not None:
            self.conda_values = conda_values
        if env_variables is not None:
            self.env_variables = env_variables

    @property
    def working_dir(self):
        """Gets the working_dir of this RayRuntimeEnvConfig.  # noqa: E501

        The working directory that your code will run in. Can be an s3 or git path, or a path on the local machine.  # noqa: E501

        :return: The working_dir of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: str
        """
        return self._working_dir

    @working_dir.setter
    def working_dir(self, working_dir):
        """Sets the working_dir of this RayRuntimeEnvConfig.

        The working directory that your code will run in. Can be an s3 or git path, or a path on the local machine.  # noqa: E501

        :param working_dir: The working_dir of this RayRuntimeEnvConfig.  # noqa: E501
        :type: str
        """

        self._working_dir = working_dir

    @property
    def py_modules(self):
        """Gets the py_modules of this RayRuntimeEnvConfig.  # noqa: E501

        Python modules that will be installed along with your runtime env  # noqa: E501

        :return: The py_modules of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: list[str]
        """
        return self._py_modules

    @py_modules.setter
    def py_modules(self, py_modules):
        """Sets the py_modules of this RayRuntimeEnvConfig.

        Python modules that will be installed along with your runtime env  # noqa: E501

        :param py_modules: The py_modules of this RayRuntimeEnvConfig.  # noqa: E501
        :type: list[str]
        """

        self._py_modules = py_modules

    @property
    def pip_packages(self):
        """Gets the pip_packages of this RayRuntimeEnvConfig.  # noqa: E501

        Pip dependencies to be installed  # noqa: E501

        :return: The pip_packages of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: str
        """
        return self._pip_packages

    @pip_packages.setter
    def pip_packages(self, pip_packages):
        """Sets the pip_packages of this RayRuntimeEnvConfig.

        Pip dependencies to be installed  # noqa: E501

        :param pip_packages: The pip_packages of this RayRuntimeEnvConfig.  # noqa: E501
        :type: str
        """

        self._pip_packages = pip_packages

    @property
    def conda_env_name(self):
        """Gets the conda_env_name of this RayRuntimeEnvConfig.  # noqa: E501

        Name of the Conda environment this Runtime Environment is using.  # noqa: E501

        :return: The conda_env_name of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: str
        """
        return self._conda_env_name

    @conda_env_name.setter
    def conda_env_name(self, conda_env_name):
        """Sets the conda_env_name of this RayRuntimeEnvConfig.

        Name of the Conda environment this Runtime Environment is using.  # noqa: E501

        :param conda_env_name: The conda_env_name of this RayRuntimeEnvConfig.  # noqa: E501
        :type: str
        """

        self._conda_env_name = conda_env_name

    @property
    def conda_values(self):
        """Gets the conda_values of this RayRuntimeEnvConfig.  # noqa: E501

        The conda config that will be used to populate the dependencies of this runtime env  # noqa: E501

        :return: The conda_values of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: object
        """
        return self._conda_values

    @conda_values.setter
    def conda_values(self, conda_values):
        """Sets the conda_values of this RayRuntimeEnvConfig.

        The conda config that will be used to populate the dependencies of this runtime env  # noqa: E501

        :param conda_values: The conda_values of this RayRuntimeEnvConfig.  # noqa: E501
        :type: object
        """

        self._conda_values = conda_values

    @property
    def env_variables(self):
        """Gets the env_variables of this RayRuntimeEnvConfig.  # noqa: E501

        Environment variables to set in this Runtime Environment.  # noqa: E501

        :return: The env_variables of this RayRuntimeEnvConfig.  # noqa: E501
        :rtype: dict(str, str)
        """
        return self._env_variables

    @env_variables.setter
    def env_variables(self, env_variables):
        """Sets the env_variables of this RayRuntimeEnvConfig.

        Environment variables to set in this Runtime Environment.  # noqa: E501

        :param env_variables: The env_variables of this RayRuntimeEnvConfig.  # noqa: E501
        :type: dict(str, str)
        """

        self._env_variables = env_variables

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RayRuntimeEnvConfig):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, RayRuntimeEnvConfig):
            return True

        return self.to_dict() != other.to_dict()
