# -*- coding: utf-8 -*-
"""
Contains the definition of the Message class.
"""
import logging

from enhterm.base import EtBase
from enhterm.errors import DecodeError
from enhterm.mixins.serializable import Serializable

logger = logging.getLogger('et.m')


class Paragraph(Serializable, EtBase):
    """ A paragraph in a message. """
    def __init__(self, message=None, *args, **kwargs):
        """
        Constructor.

        Arguments:
            message (Message):
                The message where this paragraph belongs to.
        """
        self.message = message
        super().__init__(*args, **kwargs)


class TextParagraph(Paragraph):
    """ A text paragraph in a message. """
    def __init__(self, text='', *args, **kwargs):
        """
        Constructor.

        Arguments:
            text (str):
                The contents of the paragraph.
        """
        super().__init__(*args, **kwargs)
        self.text = text

    def __str__(self):
        """ Represent this object as a human-readable string. """
        return self.text

    def __repr__(self):
        """ Represent this object as a python constructor. """
        return f'TextParagraph({self.text})'

    def encode(self):
        """
        Called when a command needs to be serialized.

        .. note:
           The `result` and `uuid` members should not be serialized
           in case of :class:`~Command`.
        """
        return self.text

    def decode(self, raw_data):
        """
        Apply raw data to this instance.

        It is asserted that correct class has already been constructed
        and that it has `result` and `uuid` members set in case of
        :class:`~Command`..

        Arguments:
            raw_data (bytes):
                The data to apply.
        """
        assert isinstance(raw_data, str)
        self.text = raw_data

    @classmethod
    def class_id(cls):
        """
        A unique identifier of the class of the command.

        This value is used as a key when a constructor needs to
        be associated with a string
        (see :class:`enhterm.ser_deser.dsds.DictSerDeSer`).
        """
        return 'text'


class Message(EtBase):
    """
    This class represents a message generated by the terminal.

    Attributes:
        term (EnhTerm):
            The terminal that generated this message.
        severity (int):
            The severity of this message. One of the logging constants
            can be used here.
        paragraphs (list of Paragraph):
            The list of paragraphs that compose this message.
    """

    def __init__(self, term=None, severity=logging.INFO, paragraphs=None,
                 *args, **kwargs):
        """
        Constructor.

        Arguments:
            term (EnhTerm):
                The terminal that generated this message.
            severity (int):
                The severity of this message. One of the logging constants
                can be used here.
            paragraphs (list of Paragraph):
                The list of paragraphs that compose this message.
        """
        super().__init__(*args, **kwargs)
        self.term = term
        self.severity = severity
        self.paragraphs = [] if paragraphs is None else paragraphs

    def __str__(self):
        """ Represent this object as a human-readable string. """
        return 'Message()'

    def __repr__(self):
        """ Represent this object as a python constructor. """
        return 'Message()'

    def encode(self, encoder):
        """
        Called when a message needs to be serialized.

        Arguments:
            encoder (SerDeSer):
                The instance that is encoding this message.
        """
        return self.severity, [
            encoder.encode_paragraph(par) for par in self.paragraphs]

    def decode(self, raw_data, decoder):
        """
        Apply raw data to this instance.

        It is asserted that correct class ahs already been constructed
        and that it has `result` and `uuid` members set.

        Raises:
            DecodeError:
                Any problem in parsing this data is reported using
                this exception.

        Arguments:
            raw_data (list):
                The data to apply.
            decoder (SerDeSer):
                The instance that is decoding this message.
        """
        if len(raw_data) != 2:
            raise DecodeError(f"Expected 2 elements, received {len(raw_data)}")

        self.severity = int(raw_data[0])
        if self.severity <= 0:
            raise DecodeError(f"Severity should be positive, "
                              f"not {self.severity}")

        for raw_par in raw_data[1]:
            self.paragraphs.append(decoder.decode_paragraph(raw_par))
