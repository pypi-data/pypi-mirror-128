Metadata-Version: 2.1
Name: hydra-zen
Version: 0.4.0rc1
Summary: Utilities for making hydra scale to ML workflows
Home-page: https://github.com/mit-ll-responsible-ai/hydra_zen
Author: Justin Goodwin, Ryan Soklaski
Author-email: ryan.soklaski@ll.mit.edu
License: MIT
Download-URL: https://github.com/mit-ll-responsible-ai/hydra-zen/tarball/v0.4.0rc1
Keywords: machine learning research configuration scalable reproducible
Platform: UNKNOWN
Classifier: Development Status :: 4 - Beta
Classifier: License :: OSI Approved :: MIT License
Classifier: Operating System :: OS Independent
Classifier: Intended Audience :: Science/Research
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Topic :: Scientific/Engineering
Requires-Python: >=3.6
License-File: LICENSE.txt
Requires-Dist: hydra-core (>=1.1.0)
Requires-Dist: typing-extensions (>=3.10.0.1)
Provides-Extra: beartype
Requires-Dist: beartype (>=0.8.0) ; extra == 'beartype'
Provides-Extra: pydantic
Requires-Dist: pydantic (>=1.8.2) ; extra == 'pydantic'


hydra-zen helps you configure your project using the power of Hydra, while enjoying the Zen of Python!

hydra-zen eliminates the boilerplate code that you write to configure, orchestrate, and organize the results of large-scale projects, such as machine learning experiments. It does so by providing Hydra-compatible tools that dynamically generate "structured configurations" of your code, and enables Python-centric workflows for running configured instances of your code.

hydra-zen offers:

    - Functions for automatically and dynamically generating structured configs that can be used to fully or partially instantiate objects in your application.
    - The ability to launch Hydra jobs, complete with parameter sweeps and multi-run configurations, from within a notebook or any other Python environment.
    - Incisive type annotations that provide enriched context about your project's configurations to IDEs, type checkers, and other tooling.
    - Runtime validation of configurations to catch mistakes before your application launches.
    - Equal support for both object-oriented libraries (e.g., torch.nn) and functional ones (e.g., jax and numpy).

These functions and capabilities can be used to great effect alongside PyTorch Lightning to design boilerplate-free machine learning projects!


