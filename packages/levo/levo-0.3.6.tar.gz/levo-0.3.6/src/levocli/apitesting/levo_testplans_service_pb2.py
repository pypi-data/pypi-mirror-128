# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: ai/levo/testplans/v1/levo_testplans_service.proto
# pylint: skip-file
# Ignore the mypy errors for this file.
# type: ignore
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database

# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


DESCRIPTOR = _descriptor.FileDescriptor(
    name="ai/levo/testplans/v1/levo_testplans_service.proto",
    package="ai.levo.testplans.v1",
    syntax="proto3",
    serialized_options=b"B\033LevoTestPlansServiceWrapperP\001",
    create_key=_descriptor._internal_create_key,
    serialized_pb=b'\n1ai/levo/testplans/v1/levo_testplans_service.proto\x12\x14\x61i.levo.testplans.v1"3\n\x1a\x45xportTestPlanByLrnRequest\x12\x15\n\rtest_plan_lrn\x18\x01 \x01(\t"\x19\n\x08\x43ontents\x12\r\n\x05\x62ytes\x18\x01 \x01(\x0c"t\n\x0fTestPlanArchive\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\n\n\x02id\x18\x02 \x01(\t\x12\x15\n\rtest_plan_lrn\x18\x03 \x01(\t\x12\x30\n\x08\x63ontents\x18\x04 \x01(\x0b\x32\x1e.ai.levo.testplans.v1.Contents2\x83\x01\n\x14LevoTestPlansService\x12k\n\x0e\x45xportTestPlan\x12\x30.ai.levo.testplans.v1.ExportTestPlanByLrnRequest\x1a%.ai.levo.testplans.v1.TestPlanArchive"\x00\x42\x1f\x42\x1bLevoTestPlansServiceWrapperP\x01\x62\x06proto3',
)


_EXPORTTESTPLANBYLRNREQUEST = _descriptor.Descriptor(
    name="ExportTestPlanByLrnRequest",
    full_name="ai.levo.testplans.v1.ExportTestPlanByLrnRequest",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name="test_plan_lrn",
            full_name="ai.levo.testplans.v1.ExportTestPlanByLrnRequest.test_plan_lrn",
            index=0,
            number=1,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"".decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=75,
    serialized_end=126,
)


_CONTENTS = _descriptor.Descriptor(
    name="Contents",
    full_name="ai.levo.testplans.v1.Contents",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name="bytes",
            full_name="ai.levo.testplans.v1.Contents.bytes",
            index=0,
            number=1,
            type=12,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"",
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=128,
    serialized_end=153,
)


_TESTPLANARCHIVE = _descriptor.Descriptor(
    name="TestPlanArchive",
    full_name="ai.levo.testplans.v1.TestPlanArchive",
    filename=None,
    file=DESCRIPTOR,
    containing_type=None,
    create_key=_descriptor._internal_create_key,
    fields=[
        _descriptor.FieldDescriptor(
            name="name",
            full_name="ai.levo.testplans.v1.TestPlanArchive.name",
            index=0,
            number=1,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"".decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.FieldDescriptor(
            name="id",
            full_name="ai.levo.testplans.v1.TestPlanArchive.id",
            index=1,
            number=2,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"".decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.FieldDescriptor(
            name="test_plan_lrn",
            full_name="ai.levo.testplans.v1.TestPlanArchive.test_plan_lrn",
            index=2,
            number=3,
            type=9,
            cpp_type=9,
            label=1,
            has_default_value=False,
            default_value=b"".decode("utf-8"),
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
        _descriptor.FieldDescriptor(
            name="contents",
            full_name="ai.levo.testplans.v1.TestPlanArchive.contents",
            index=3,
            number=4,
            type=11,
            cpp_type=10,
            label=1,
            has_default_value=False,
            default_value=None,
            message_type=None,
            enum_type=None,
            containing_type=None,
            is_extension=False,
            extension_scope=None,
            serialized_options=None,
            file=DESCRIPTOR,
            create_key=_descriptor._internal_create_key,
        ),
    ],
    extensions=[],
    nested_types=[],
    enum_types=[],
    serialized_options=None,
    is_extendable=False,
    syntax="proto3",
    extension_ranges=[],
    oneofs=[],
    serialized_start=155,
    serialized_end=271,
)

_TESTPLANARCHIVE.fields_by_name["contents"].message_type = _CONTENTS
DESCRIPTOR.message_types_by_name[
    "ExportTestPlanByLrnRequest"
] = _EXPORTTESTPLANBYLRNREQUEST
DESCRIPTOR.message_types_by_name["Contents"] = _CONTENTS
DESCRIPTOR.message_types_by_name["TestPlanArchive"] = _TESTPLANARCHIVE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

ExportTestPlanByLrnRequest = _reflection.GeneratedProtocolMessageType(
    "ExportTestPlanByLrnRequest",
    (_message.Message,),
    {
        "DESCRIPTOR": _EXPORTTESTPLANBYLRNREQUEST,
        "__module__": "ai.levo.testplans.v1.levo_testplans_service_pb2"
        # @@protoc_insertion_point(class_scope:ai.levo.testplans.v1.ExportTestPlanByLrnRequest)
    },
)
_sym_db.RegisterMessage(ExportTestPlanByLrnRequest)

Contents = _reflection.GeneratedProtocolMessageType(
    "Contents",
    (_message.Message,),
    {
        "DESCRIPTOR": _CONTENTS,
        "__module__": "ai.levo.testplans.v1.levo_testplans_service_pb2"
        # @@protoc_insertion_point(class_scope:ai.levo.testplans.v1.Contents)
    },
)
_sym_db.RegisterMessage(Contents)

TestPlanArchive = _reflection.GeneratedProtocolMessageType(
    "TestPlanArchive",
    (_message.Message,),
    {
        "DESCRIPTOR": _TESTPLANARCHIVE,
        "__module__": "ai.levo.testplans.v1.levo_testplans_service_pb2"
        # @@protoc_insertion_point(class_scope:ai.levo.testplans.v1.TestPlanArchive)
    },
)
_sym_db.RegisterMessage(TestPlanArchive)


DESCRIPTOR._options = None

_LEVOTESTPLANSSERVICE = _descriptor.ServiceDescriptor(
    name="LevoTestPlansService",
    full_name="ai.levo.testplans.v1.LevoTestPlansService",
    file=DESCRIPTOR,
    index=0,
    serialized_options=None,
    create_key=_descriptor._internal_create_key,
    serialized_start=274,
    serialized_end=405,
    methods=[
        _descriptor.MethodDescriptor(
            name="ExportTestPlan",
            full_name="ai.levo.testplans.v1.LevoTestPlansService.ExportTestPlan",
            index=0,
            containing_service=None,
            input_type=_EXPORTTESTPLANBYLRNREQUEST,
            output_type=_TESTPLANARCHIVE,
            serialized_options=None,
            create_key=_descriptor._internal_create_key,
        ),
    ],
)
_sym_db.RegisterServiceDescriptor(_LEVOTESTPLANSSERVICE)

DESCRIPTOR.services_by_name["LevoTestPlansService"] = _LEVOTESTPLANSSERVICE

# @@protoc_insertion_point(module_scope)
