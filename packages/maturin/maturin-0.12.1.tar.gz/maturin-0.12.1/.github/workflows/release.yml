name: Release

on:
  push:
    tags: [ 'v*' ]

jobs:
  release-crates-io:
    name: Release crates.io
    runs-on: ubuntu-latest
    environment:
      name: crates.io
      url: https://crates.io/crates/maturin
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
      - uses: actions-rs/cargo@v1
        with:
          command: login
          args: ${{ secrets.CRATES_IO_TOKEN }}
      - uses: actions-rs/cargo@v1
        with:
          command: publish

  release-github-pypi:
    name: Release Github and PyPI
    strategy:
      fail-fast: false
      matrix:
        target:
          - x86_64-unknown-linux-musl
          - x86_64-apple-darwin
          - x86_64-pc-windows-msvc
          - i686-pc-windows-msvc
          - aarch64-pc-windows-msvc
        include:
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: maturin-x86_64-unknown-linux-musl.tar.gz
          - target: x86_64-apple-darwin
            os: macos-latest
            name: maturin-x86_64-apple-darwin.tar.gz
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: maturin-x86_64-pc-windows-msvc.zip
          - target: i686-pc-windows-msvc
            os: windows-latest
            name: maturin-i686-pc-windows-msvc.zip
          - target: aarch64-pc-windows-msvc
            os: windows-latest
            name: maturin-aarch64-pc-windows-msvc.zip
    runs-on: ${{ matrix.os }}
    environment:
      name: PyPI
      url: https://pypi.org/project/maturin/
    steps:
      # Largely inspired by https://github.com/starship/starship/blob/35a0a20f5c4fea6a08e1b91ff631b089eef8fc50/.github/workflows/deploy.yml
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.target }}

      - name: Install musl tools
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install -y musl-tools

      # Install gnu-tar because BSD tar is buggy
      # https://github.com/actions/cache/issues/403
      - name: Install GNU tar (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install gnu-tar
          echo "/usr/local/opt/gnu-tar/libexec/gnubin" >> $GITHUB_PATH

      # Those two will also create target/${{ matrix.target }}/maturin
      - name: Publish to pypi (with sdist)
        if: matrix.target == 'x86_64-unknown-linux-musl'
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: |
          # manylinux
          cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }}
          # musllinux
          cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }} --no-sdist --compatibility musllinux_1_1

      # ring doesn't support aarch64 windows yet
      - name: Publish to pypi (windows aarch64)
        if: matrix.target == 'aarch64-pc-windows-msvc'
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }} --no-sdist --cargo-extra-args="--no-default-features" --cargo-extra-args="--features log,upload,human-panic"

      - name: Publish to pypi (without sdist)
        if: ${{ matrix.target != 'x86_64-unknown-linux-musl' && matrix.target != 'aarch64-pc-windows-msvc' }}
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: cargo run -- publish -u __token__ -b bin --target ${{ matrix.target }} --no-sdist

      - name: Archive binary (windows)
        if: matrix.os == 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          7z a ../../../${{ matrix.name }} ${{ github.event.repository.name }}.exe
          cd -

      - name: Archive binary (linux and mac)
        if: matrix.os != 'windows-latest'
        run: |
          cd target/${{ matrix.target }}/release
          tar czvf ../../../${{ matrix.name }} ${{ github.event.repository.name }}
          cd -

      - name: Publish to pypi (macOS universal2)
        if: matrix.target == 'x86_64-apple-darwin'
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
          DEVELOPER_DIR: /Applications/Xcode.app/Contents/Developer
          MACOSX_DEPLOYMENT_TARGET: '10.9'
        run: |
          # set SDKROOT for C dependencies like ring and bzip2
          export SDKROOT=$(xcrun --sdk macosx --show-sdk-path)
          rustup target add aarch64-apple-darwin
          cargo run -- publish -u __token__ -b bin --no-sdist --universal2

      - name: Build debian package
        if: matrix.os == 'ubuntu-latest'
        env:
          BINARY_NAME: ${{ github.event.repository.name }}
          TARGET: ${{ matrix.target }}
          VERSION: ${{ github.ref }}
        run: ci/build_deb.sh

      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: '*.{tar.gz,zip,deb}'
          file_glob: true
          tag: ${{ github.ref }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

  release-musl-pypi:
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: https://pypi.org/project/maturin/
    strategy:
      fail-fast: false
      matrix:
        platform: [
          { target: "aarch64-unknown-linux-musl", image_tag: "aarch64-musl", manylinux: "2014" },
          { target: "armv7-unknown-linux-musleabihf", image_tag: "armv7-musleabihf", manylinux: "2014"},
          { target: "i686-unknown-linux-musl", image_tag: "i686-musl", manylinux: "2010"},
        ]
    container:
      image: docker://messense/rust-musl-cross:${{ matrix.platform.image_tag }}
      env:
        RUSTUP_HOME: /root/.rustup
        CARGO_HOME: /root/.cargo
    steps:
      - uses: actions/checkout@v2
      - name: Build and publish wheel
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: |
          sudo python3 -m pip install maturin
          # manylinux
          maturin publish -u __token__ -b bin --no-sdist \
            --target ${{ matrix.platform.target }} \
            --manylinux ${{ matrix.platform.manylinux }}
          # musllinux
          maturin publish -u __token__ -b bin --no-sdist \
            --target ${{ matrix.platform.target }} \
            --compatibility musllinux_1_1
      - name: Archive binary
        run: tar czvf target/release/maturin.tar.gz -C target/${{ matrix.platform.target }}/release maturin
      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: maturin-${{ matrix.platform.target }}.tar.gz
          file: target/release/maturin.tar.gz
          tag: ${{ github.ref }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}

  release-no-rustls-pypi:
    runs-on: ubuntu-latest
    environment:
      name: PyPI
      url: https://pypi.org/project/maturin/
    strategy:
      fail-fast: false
      matrix:
        platform:
          - target: "powerpc64le-unknown-linux-musl"
            image: "messense/rust-musl-cross:powerpc64le-musl"
            manylinux: "2014"
            musllinux: "musllinux_1_1"
          - target: "s390x-unknown-linux-gnu"
            image: "messense/manylinux2014-cross:s390x"
            manylinux: "2014"
            musllinux: ""
    container:
      image: docker://${{ matrix.platform.image }}
    steps:
      - uses: actions/checkout@v2
      # powerpc64le-unknown-linux-musl doesn't have official std library release
      - uses: actions-rs/toolchain@v1
        if: matrix.platform.target == 's390x-unknown-linux-gnu'
        with:
          profile: minimal
          toolchain: stable
          override: true
          target: ${{ matrix.platform.target }}
      - name: Build and publish manylinux wheel
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: |
          sudo python3 -m pip install maturin
          maturin publish -u __token__ -b bin --no-sdist \
            --target ${{ matrix.platform.target }} \
            --manylinux ${{ matrix.platform.manylinux }} \
            --cargo-extra-args="--no-default-features" \
            --cargo-extra-args="--features log,upload,human-panic"
      - name: Build and publish musllinux wheel
        if: matrix.platform.musllinux != ''
        env:
          MATURIN_PASSWORD: ${{ secrets.MATURIN_PASSWORD }}
        run: |
          maturin publish -u __token__ -b bin --no-sdist \
            --target ${{ matrix.platform.target }} \
            --compatibility ${{ matrix.platform.musllinux }} \
            --cargo-extra-args="--no-default-features" \
            --cargo-extra-args="--features log,upload,human-panic"
      - name: Archive binary
        run: tar czvf target/release/maturin.tar.gz -C target/${{ matrix.platform.target }}/release maturin
      - name: Upload to github release
        uses: svenstaro/upload-release-action@v2
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          asset_name: maturin-${{ matrix.platform.target }}.tar.gz
          file: target/release/maturin.tar.gz
          tag: ${{ github.ref }}
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') }}
