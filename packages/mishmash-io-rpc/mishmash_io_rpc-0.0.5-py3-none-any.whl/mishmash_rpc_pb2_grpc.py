# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mishmash_rpc_pb2 as mishmash__rpc__pb2


class MishmashServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.stream = channel.stream_stream(
                '/io.mishmash.common.rpc.MishmashService/stream',
                request_serializer=mishmash__rpc__pb2.StreamClientMessage.SerializeToString,
                response_deserializer=mishmash__rpc__pb2.StreamServerMessage.FromString,
                )
        self.mutate = channel.stream_stream(
                '/io.mishmash.common.rpc.MishmashService/mutate',
                request_serializer=mishmash__rpc__pb2.MutationClientMessage.SerializeToString,
                response_deserializer=mishmash__rpc__pb2.MutationServerMessage.FromString,
                )


class MishmashServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def stream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def mutate(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MishmashServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'stream': grpc.stream_stream_rpc_method_handler(
                    servicer.stream,
                    request_deserializer=mishmash__rpc__pb2.StreamClientMessage.FromString,
                    response_serializer=mishmash__rpc__pb2.StreamServerMessage.SerializeToString,
            ),
            'mutate': grpc.stream_stream_rpc_method_handler(
                    servicer.mutate,
                    request_deserializer=mishmash__rpc__pb2.MutationClientMessage.FromString,
                    response_serializer=mishmash__rpc__pb2.MutationServerMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'io.mishmash.common.rpc.MishmashService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MishmashService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def stream(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/io.mishmash.common.rpc.MishmashService/stream',
            mishmash__rpc__pb2.StreamClientMessage.SerializeToString,
            mishmash__rpc__pb2.StreamServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def mutate(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(request_iterator, target, '/io.mishmash.common.rpc.MishmashService/mutate',
            mishmash__rpc__pb2.MutationClientMessage.SerializeToString,
            mishmash__rpc__pb2.MutationServerMessage.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
