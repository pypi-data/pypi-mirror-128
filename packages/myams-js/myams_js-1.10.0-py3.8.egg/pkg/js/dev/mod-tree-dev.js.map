{"version":3,"sources":["mod-tree.js"],"names":["$","MyAMS","tree","switchTreeNode","evt","removeChildNodes","node_id","each","idx","elt","row","data","dtTable","remove","draw","node","currentTarget","switcher","tr","parents","first","table","DataTable","tooltip","hasClass","core","switchIcon","removeClass","location","treeNodesTarget","sourceName","require","then","ajax","post","can_sort","is","result","length","newRow","oldRow","add","initContent","addClass","switchTree","th","tableID","filter","target","deleteElement","form","options","console","debug","nodeId","sortTree","details","amsReorderUrl","amsReorderSource","rowID","rowParentID","parent","prev","parentID","action","exists","localTarget","getFunctionByName","call","dnd_table","post_data","startsWith","window","protocol","amsLocation","postData","child","order","JSON","stringify","listattr","removeRow","removeChildRows","childs","childRow","childID","attr","status","handleJSON","resultRow","setTimeout","removeData","env","bundle","config","modules","push"],"mappings":"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","sourcesContent":["/* global MyAMS */\n/**\n * MyAMS tree management\n */\n\nconst $ = MyAMS.$;\n\n\nexport const tree = {\n\n\t/**\n\t * Open/close tree node inside a table\n\t */\n\tswitchTreeNode: (evt) => {\n\n\t\tconst removeChildNodes = (node_id) => {\n\t\t\t$(`tr[data-ams-tree-node-parent-id=\"${node_id}\"]`).each((idx, elt) => {\n\t\t\t\tconst row = $(elt);\n\t\t\t\tremoveChildNodes(row.data('ams-tree-node-id'));\n\t\t\t\tdtTable.row(row).remove().draw();\n\t\t\t});\n\t\t}\n\n\t\tconst\n\t\t\tnode = $(evt.currentTarget),\n\t\t\tswitcher = $('i.switch', node),\n\t\t\ttr = node.parents('tr').first(),\n\t\t\ttable = tr.parents('table').first(),\n\t\t\tdtTable = table.DataTable();\n\t\tnode.tooltip('hide');\n\t\tif (switcher.hasClass('minus')) {\n\t\t\tremoveChildNodes(tr.data('ams-tree-node-id'));\n\t\t\tMyAMS.core.switchIcon(switcher, 'minus-square', 'plus-square', 'far');\n\t\t\tswitcher.removeClass('minus');\n\t\t} else {\n\t\t\tconst\n\t\t\t\tlocation = tr.data('ams-location') || table.data('ams-location') || '',\n\t\t\t\ttreeNodesTarget = tr.data('ams-tree-nodes-target') ||\n\t\t\t\t\ttable.data('ams-tree-nodes-target') || 'get-tree-nodes.json',\n\t\t\t\tsourceName = tr.data('ams-element-name');\n\t\t\tMyAMS.core.switchIcon(switcher, 'plus-square', 'cog', 'fas');\n\t\t\tMyAMS.require('ajax').then(() => {\n\t\t\t\tMyAMS.ajax.post(location + '/' + sourceName + '/' + treeNodesTarget, {\n\t\t\t\t\tcan_sort: !$('td.sorter', tr).is(':empty')\n\t\t\t\t}).then((result) => {\n\t\t\t\t\tif (result.length > 0) {\n\t\t\t\t\t\tlet newRow,\n\t\t\t\t\t\t\toldRow = tr;\n\t\t\t\t\t\tfor (const row of result) {\n\t\t\t\t\t\t\tnewRow = $(row);\n\t\t\t\t\t\t\tdtTable.row.add(newRow).draw();\n\t\t\t\t\t\t\toldRow = newRow;\n\t\t\t\t\t\t\tMyAMS.core.initContent(newRow).then();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tMyAMS.core.switchIcon(switcher, 'cog', 'minus-square', 'far');\n\t\t\t\t\tswitcher.addClass('minus');\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t},\n\n\n\t/**\n\t * Open close all tree nodes\n\t */\n\tswitchTree: (evt) => {\n\t\tconst\n\t\t\tnode = $(evt.currentTarget),\n\t\t\tswitcher = $('i.switch', node),\n\t\t\tth = node.parents('th'),\n\t\t\ttable = th.parents('table').first(),\n\t\t\ttableID = table.data('ams-tree-node-id'),\n\t\t\tdtTable = table.DataTable();\n\t\tnode.tooltip('hide');\n\t\tif (switcher.hasClass('minus')) {\n\t\t\t$('tr[data-ams-tree-node-parent-id]').filter(`tr[data-ams-tree-node-parent-id!=\"${tableID}\"]`).each((idx, elt) => {\n\t\t\t\tdtTable.row(elt).remove().draw();\n\t\t\t});\n\t\t\t$('i.switch', table).each((idx, elt) => {\n\t\t\t\tMyAMS.core.switchIcon($(elt), 'minus-square', 'plus-square', 'far');\n\t\t\t\t$(elt).removeClass('minus');\n\t\t\t});\n\t\t} else {\n\t\t\tconst\n\t\t\t\tlocation = table.data('ams-location') || '',\n\t\t\t\ttarget = table.data('ams-tree-nodes-target') || 'get-tree.json',\n\t\t\t\ttr = $('tbody tr', table.first());\n\t\t\tMyAMS.core.switchIcon(switcher, 'plus-square', 'cog', 'fas');\n\t\t\tMyAMS.require('ajax').then(() => {\n\t\t\t\tMyAMS.ajax.post(`${location}/${target}`, {\n\t\t\t\t\tcan_sort: !$('td.sorter', tr).is(':empty')\n\t\t\t\t}).then((result) => {\n\t\t\t\t\t$(`tr[data-ams-tree-node-id]`, table).each((idx, elt) => {\n\t\t\t\t\t\tdtTable.row(elt).remove().draw();\n\t\t\t\t\t});\n\t\t\t\t\t$(result).each((idx, elt) => {\n\t\t\t\t\t\tconst newRow = $(elt);\n\t\t\t\t\t\tdtTable.row.add(newRow).draw();\n\t\t\t\t\t});\n\t\t\t\t\tMyAMS.core.initContent(table).then();\n\t\t\t\t\tMyAMS.core.switchIcon(switcher, 'cog', 'minus-square', 'far');\n\t\t\t\t\tswitcher.addClass('minus');\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t},\n\n\n\t/**\n\t * Custom tree element delete callback\n\t *\n\t * @param form: source form, which can be null if callback wasn't triggered from a form\n\t * @param options: callback options\n\t */\n\tdeleteElement: (form, options) => {\n\t\tconsole.debug(options);\n\t\tconst nodeId = options.node_id;\n\t\tif (nodeId) {\n\t\t\t$(`tr[data-ams-tree-node-parent-id=\"${nodeId}\"]`).each((idx, elt) => {\n\t\t\t\tconst\n\t\t\t\t\ttable = $(elt).parents('table'),\n\t\t\t\t\tdtTable  = table.DataTable();\n\t\t\t\tdtTable.row(elt).remove().draw();\n\t\t\t});\n\t\t}\n\t},\n\n\t/**\n\t * Sort and re-parent tree elements\n\t */\n\tsortTree: (evt, details) => {\n\t\tconst\n\t\t\ttable = $(evt.target),\n\t\t\tdtTable = table.DataTable(),\n\t\t\tdata = $(table).data();\n\t\tlet target = data.amsReorderUrl;\n\t\tif (target) {\n\t\t\t// Disable row click handler\n\t\t\tconst row = $(data.amsReorderSource.node);\n\t\t\trow.data('ams-disabled-handlers', 'click');\n\t\t\ttry {\n\t\t\t\t// Get root ID\n\t\t\t\tconst tableID = row.parents('table').first().data('ams-tree-node-id');\n\t\t\t\t// Get moved row ID\n\t\t\t\tconst rowID = row.data('ams-tree-node-id');\n\t\t\t\tconst rowParentID = row.data('ams-tree-node-parent-id');\n\t\t\t\t// Get new parent ID\n\t\t\t\tconst parent = row.prev('tr');\n\t\t\t\tlet parentID,\n\t\t\t\t\tswitcher,\n\t\t\t\t\taction;\n\t\t\t\tif (parent.exists()) {\n\t\t\t\t\t// Move below an existing row\n\t\t\t\t\tparentID = parent.data('ams-tree-node-id');\n\t\t\t\t\t// Check switcher state\n\t\t\t\t\tswitcher = $('.switch', parent);\n\t\t\t\t\tif (switcher.hasClass('minus')) {\n\t\t\t\t\t\t// Opened folder: move as child\n\t\t\t\t\t\tif (rowParentID === parentID) {\n\t\t\t\t\t\t\t// Don't change parent\n\t\t\t\t\t\t\taction = 'reorder';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Change parent\n\t\t\t\t\t\t\taction = 'reparent';\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Closed folder or simple item: move as sibling\n\t\t\t\t\t\tparentID = parent.data('ams-tree-node-parent-id');\n\t\t\t\t\t\tif (rowParentID === parentID) {\n\t\t\t\t\t\t\t// Don't change parent\n\t\t\t\t\t\t\taction = 'reorder';\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// Change parent\n\t\t\t\t\t\t\taction = 'reparent';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t// Move to site root\n\t\t\t\t\tparentID = tableID;\n\t\t\t\t\tswitcher = null;\n\t\t\t\t\tif (rowParentID === parentID) {\n\t\t\t\t\t\t// Already child of site root\n\t\t\t\t\t\taction = 'reorder';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// Move from inner folder to site root\n\t\t\t\t\t\taction = 'reparent';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Call ordering target\n\t\t\t\tconst localTarget = MyAMS.core.getFunctionByName(target);\n\t\t\t\tif (typeof localTarget === 'function') {\n\t\t\t\t\tlocalTarget.call(table, dnd_table, post_data);\n\t\t\t\t} else {\n\t\t\t\t\tif (!target.startsWith(window.location.protocol)) {\n\t\t\t\t\t\tconst location = data.amsLocation;\n\t\t\t\t\t\tif (location) {\n\t\t\t\t\t\t\ttarget = location + '/' + target;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tconst\n\t\t\t\t\t\tpostData = {\n\t\t\t\t\t\t\taction: action,\n\t\t\t\t\t\t\tchild: rowID,\n\t\t\t\t\t\t\tparent: parentID,\n\t\t\t\t\t\t\torder: JSON.stringify($('tr[data-ams-tree-node-id]').listattr('data-ams-tree-node-id')),\n\t\t\t\t\t\t\tcan_sort: !$('td.sorter', row).is(':empty')\n\t\t\t\t\t\t};\n\t\t\t\t\tMyAMS.require('ajax').then(() => {\n\t\t\t\t\t\tMyAMS.ajax.post(target, postData).then((result) => {\n\n\t\t\t\t\t\t\tconst removeRow = (rowID) => {\n\t\t\t\t\t\t\t\tconst row = $(`tr[data-ams-tree-node-id=\"${rowID}\"]`);\n\t\t\t\t\t\t\t\tdtTable.row(row).remove().draw();\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tconst removeChildRows = (rowID) => {\n\t\t\t\t\t\t\t\tconst childs = $(`tr[data-ams-tree-node-parent-id=\"${rowID}\"]`);\n\t\t\t\t\t\t\t\tchilds.each((idx, elt) => {\n\t\t\t\t\t\t\t\t\tconst\n\t\t\t\t\t\t\t\t\t\tchildRow = $(elt),\n\t\t\t\t\t\t\t\t\t\tchildID = childRow.attr('data-ams-tree-node-id');\n\t\t\t\t\t\t\t\t\tremoveChildRows(childID);\n\t\t\t\t\t\t\t\t\tdtTable.row(childRow).remove().draw();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tif (result.status) {\n\t\t\t\t\t\t\t\tMyAMS.ajax.handleJSON(result);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// Remove parent row if changed parent\n\t\t\t\t\t\t\t\tif (postData.action === 'reparent') {\n\t\t\t\t\t\t\t\t\tremoveRow(parentID);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Remove moved row children\n\t\t\t\t\t\t\t\tremoveChildRows(parentID);\n\t\t\t\t\t\t\t\tremoveChildRows(rowID);\n\t\t\t\t\t\t\t\tdtTable.row(row).remove().draw();\n\t\t\t\t\t\t\t\tlet newRow,\n\t\t\t\t\t\t\t\t\toldRow;\n\t\t\t\t\t\t\t\tfor (const resultRow of result) {\n\t\t\t\t\t\t\t\t\tnewRow = $(resultRow);\n\t\t\t\t\t\t\t\t\toldRow = $(`tr[id=\"${newRow.attr('id')}\"]`);\n\t\t\t\t\t\t\t\t\tdtTable.row(oldRow).remove().draw();\n\t\t\t\t\t\t\t\t\tdtTable.row.add(newRow).draw();\n\t\t\t\t\t\t\t\t\tMyAMS.core.initContent(newRow).then();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\t// Restore row click handler\n\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t$(row).removeData('ams-disabled-handlers');\n\t\t\t\t}, 50);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n};\n\n\n/**\n * Global module initialization\n */\nif (window.MyAMS) {\n\tif (MyAMS.env.bundle) {\n\t\tMyAMS.config.modules.push('tree');\n\t} else {\n\t\tMyAMS.tree = tree;\n\t\tconsole.debug(\"MyAMS: tree module loaded...\");\n\t}\n}\n"],"file":"mod-tree-dev.js"}