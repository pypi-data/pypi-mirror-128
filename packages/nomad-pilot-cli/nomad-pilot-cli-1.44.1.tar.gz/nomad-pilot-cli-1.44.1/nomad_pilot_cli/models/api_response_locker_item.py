# coding: utf-8

"""
    Nomad Pilot

    This is the API descriptor for the Nomad Pilot API, responsible for shipping and logistics processing. Developed by [Samarkand Global](https://www.samarkand.global/) in partnership with [SF Express](https://www.sf-express.com/), [eSinotrans](http://air.esinotrans.com/), [sto](http://sto-express.co.uk/). Read the documentation online at [Nomad API Suite](https://api.samarkand.io/). - Install for node with `npm install nomad_pilot_cli` - Install for python with `pip install nomad-pilot-cli` - Install for Maven users `groupId, com.gitlab.samarkand-nomad; artifactId, nomad-pilot-cli`  # noqa: E501

    The version of the OpenAPI document: 1.44.1
    Contact: paul@samarkand.global
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from nomad_pilot_cli.configuration import Configuration


class ApiResponseLockerItem(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'belong_org': 'int',
        'big_cell_count_left': 'int',
        'cabinet_code': 'str',
        'can_pay_prefix': 'bool',
        'city': 'str',
        'city_code': 'str',
        'distance': 'int',
        'district': 'str',
        'latitude': 'str',
        'longitude': 'str',
        'middle_cell_count_left': 'int',
        'province': 'str',
        'small_cell_count_left': 'int',
        'throw_address': 'str',
        'throw_building_location': 'str',
        'whole_throwaddress': 'str'
    }

    attribute_map = {
        'belong_org': 'belongOrg',
        'big_cell_count_left': 'bigCellCountLeft',
        'cabinet_code': 'cabinetCode',
        'can_pay_prefix': 'canPayPrefix',
        'city': 'city',
        'city_code': 'cityCode',
        'distance': 'distance',
        'district': 'district',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'middle_cell_count_left': 'middleCellCountLeft',
        'province': 'province',
        'small_cell_count_left': 'smallCellCountLeft',
        'throw_address': 'throwAddress',
        'throw_building_location': 'throwBuildingLocation',
        'whole_throwaddress': 'wholeThrowaddress'
    }

    def __init__(self, belong_org=26, big_cell_count_left=1, cabinet_code='FC75522956', can_pay_prefix=True, city='深圳市', city_code='755', distance=None, district=None, latitude='755', longitude=None, middle_cell_count_left=None, province=None, small_cell_count_left=None, throw_address=None, throw_building_location=None, whole_throwaddress=None, local_vars_configuration=None):  # noqa: E501
        """ApiResponseLockerItem - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._belong_org = None
        self._big_cell_count_left = None
        self._cabinet_code = None
        self._can_pay_prefix = None
        self._city = None
        self._city_code = None
        self._distance = None
        self._district = None
        self._latitude = None
        self._longitude = None
        self._middle_cell_count_left = None
        self._province = None
        self._small_cell_count_left = None
        self._throw_address = None
        self._throw_building_location = None
        self._whole_throwaddress = None
        self.discriminator = None

        if belong_org is not None:
            self.belong_org = belong_org
        if big_cell_count_left is not None:
            self.big_cell_count_left = big_cell_count_left
        if cabinet_code is not None:
            self.cabinet_code = cabinet_code
        if can_pay_prefix is not None:
            self.can_pay_prefix = can_pay_prefix
        if city is not None:
            self.city = city
        if city_code is not None:
            self.city_code = city_code
        if distance is not None:
            self.distance = distance
        if district is not None:
            self.district = district
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if middle_cell_count_left is not None:
            self.middle_cell_count_left = middle_cell_count_left
        if province is not None:
            self.province = province
        if small_cell_count_left is not None:
            self.small_cell_count_left = small_cell_count_left
        if throw_address is not None:
            self.throw_address = throw_address
        if throw_building_location is not None:
            self.throw_building_location = throw_building_location
        if whole_throwaddress is not None:
            self.whole_throwaddress = whole_throwaddress

    @property
    def belong_org(self):
        """Gets the belong_org of this ApiResponseLockerItem.  # noqa: E501

        Locker type  # noqa: E501

        :return: The belong_org of this ApiResponseLockerItem.  # noqa: E501
        :rtype: int
        """
        return self._belong_org

    @belong_org.setter
    def belong_org(self, belong_org):
        """Sets the belong_org of this ApiResponseLockerItem.

        Locker type  # noqa: E501

        :param belong_org: The belong_org of this ApiResponseLockerItem.  # noqa: E501
        :type: int
        """

        self._belong_org = belong_org

    @property
    def big_cell_count_left(self):
        """Gets the big_cell_count_left of this ApiResponseLockerItem.  # noqa: E501

        Remaining large locker boxes  # noqa: E501

        :return: The big_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :rtype: int
        """
        return self._big_cell_count_left

    @big_cell_count_left.setter
    def big_cell_count_left(self, big_cell_count_left):
        """Sets the big_cell_count_left of this ApiResponseLockerItem.

        Remaining large locker boxes  # noqa: E501

        :param big_cell_count_left: The big_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :type: int
        """

        self._big_cell_count_left = big_cell_count_left

    @property
    def cabinet_code(self):
        """Gets the cabinet_code of this ApiResponseLockerItem.  # noqa: E501

        Cabinet code of locker  # noqa: E501

        :return: The cabinet_code of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._cabinet_code

    @cabinet_code.setter
    def cabinet_code(self, cabinet_code):
        """Sets the cabinet_code of this ApiResponseLockerItem.

        Cabinet code of locker  # noqa: E501

        :param cabinet_code: The cabinet_code of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._cabinet_code = cabinet_code

    @property
    def can_pay_prefix(self):
        """Gets the can_pay_prefix of this ApiResponseLockerItem.  # noqa: E501

        Whether online payment is supported  # noqa: E501

        :return: The can_pay_prefix of this ApiResponseLockerItem.  # noqa: E501
        :rtype: bool
        """
        return self._can_pay_prefix

    @can_pay_prefix.setter
    def can_pay_prefix(self, can_pay_prefix):
        """Sets the can_pay_prefix of this ApiResponseLockerItem.

        Whether online payment is supported  # noqa: E501

        :param can_pay_prefix: The can_pay_prefix of this ApiResponseLockerItem.  # noqa: E501
        :type: bool
        """

        self._can_pay_prefix = can_pay_prefix

    @property
    def city(self):
        """Gets the city of this ApiResponseLockerItem.  # noqa: E501

        The city where the locker is  # noqa: E501

        :return: The city of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this ApiResponseLockerItem.

        The city where the locker is  # noqa: E501

        :param city: The city of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def city_code(self):
        """Gets the city_code of this ApiResponseLockerItem.  # noqa: E501

        The city code where the locker is  # noqa: E501

        :return: The city_code of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._city_code

    @city_code.setter
    def city_code(self, city_code):
        """Sets the city_code of this ApiResponseLockerItem.

        The city code where the locker is  # noqa: E501

        :param city_code: The city_code of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._city_code = city_code

    @property
    def distance(self):
        """Gets the distance of this ApiResponseLockerItem.  # noqa: E501

        Distance between the locker and the specified address, unit is meter  # noqa: E501

        :return: The distance of this ApiResponseLockerItem.  # noqa: E501
        :rtype: int
        """
        return self._distance

    @distance.setter
    def distance(self, distance):
        """Sets the distance of this ApiResponseLockerItem.

        Distance between the locker and the specified address, unit is meter  # noqa: E501

        :param distance: The distance of this ApiResponseLockerItem.  # noqa: E501
        :type: int
        """

        self._distance = distance

    @property
    def district(self):
        """Gets the district of this ApiResponseLockerItem.  # noqa: E501

        The district where the locker is  # noqa: E501

        :return: The district of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._district

    @district.setter
    def district(self, district):
        """Sets the district of this ApiResponseLockerItem.

        The district where the locker is  # noqa: E501

        :param district: The district of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._district = district

    @property
    def latitude(self):
        """Gets the latitude of this ApiResponseLockerItem.  # noqa: E501

        The latitude where the locker is  # noqa: E501

        :return: The latitude of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this ApiResponseLockerItem.

        The latitude where the locker is  # noqa: E501

        :param latitude: The latitude of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this ApiResponseLockerItem.  # noqa: E501

        The longitude where the locker is  # noqa: E501

        :return: The longitude of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this ApiResponseLockerItem.

        The longitude where the locker is  # noqa: E501

        :param longitude: The longitude of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._longitude = longitude

    @property
    def middle_cell_count_left(self):
        """Gets the middle_cell_count_left of this ApiResponseLockerItem.  # noqa: E501

        Remaining middle locker boxes  # noqa: E501

        :return: The middle_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :rtype: int
        """
        return self._middle_cell_count_left

    @middle_cell_count_left.setter
    def middle_cell_count_left(self, middle_cell_count_left):
        """Sets the middle_cell_count_left of this ApiResponseLockerItem.

        Remaining middle locker boxes  # noqa: E501

        :param middle_cell_count_left: The middle_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :type: int
        """

        self._middle_cell_count_left = middle_cell_count_left

    @property
    def province(self):
        """Gets the province of this ApiResponseLockerItem.  # noqa: E501

        The province where the locker is  # noqa: E501

        :return: The province of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._province

    @province.setter
    def province(self, province):
        """Sets the province of this ApiResponseLockerItem.

        The province where the locker is  # noqa: E501

        :param province: The province of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._province = province

    @property
    def small_cell_count_left(self):
        """Gets the small_cell_count_left of this ApiResponseLockerItem.  # noqa: E501

        Remaining middle locker boxes  # noqa: E501

        :return: The small_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :rtype: int
        """
        return self._small_cell_count_left

    @small_cell_count_left.setter
    def small_cell_count_left(self, small_cell_count_left):
        """Sets the small_cell_count_left of this ApiResponseLockerItem.

        Remaining middle locker boxes  # noqa: E501

        :param small_cell_count_left: The small_cell_count_left of this ApiResponseLockerItem.  # noqa: E501
        :type: int
        """

        self._small_cell_count_left = small_cell_count_left

    @property
    def throw_address(self):
        """Gets the throw_address of this ApiResponseLockerItem.  # noqa: E501

        The street address  # noqa: E501

        :return: The throw_address of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._throw_address

    @throw_address.setter
    def throw_address(self, throw_address):
        """Sets the throw_address of this ApiResponseLockerItem.

        The street address  # noqa: E501

        :param throw_address: The throw_address of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._throw_address = throw_address

    @property
    def throw_building_location(self):
        """Gets the throw_building_location of this ApiResponseLockerItem.  # noqa: E501

        Detailed address  # noqa: E501

        :return: The throw_building_location of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._throw_building_location

    @throw_building_location.setter
    def throw_building_location(self, throw_building_location):
        """Sets the throw_building_location of this ApiResponseLockerItem.

        Detailed address  # noqa: E501

        :param throw_building_location: The throw_building_location of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._throw_building_location = throw_building_location

    @property
    def whole_throwaddress(self):
        """Gets the whole_throwaddress of this ApiResponseLockerItem.  # noqa: E501

        The detailed address where the locker is  # noqa: E501

        :return: The whole_throwaddress of this ApiResponseLockerItem.  # noqa: E501
        :rtype: str
        """
        return self._whole_throwaddress

    @whole_throwaddress.setter
    def whole_throwaddress(self, whole_throwaddress):
        """Sets the whole_throwaddress of this ApiResponseLockerItem.

        The detailed address where the locker is  # noqa: E501

        :param whole_throwaddress: The whole_throwaddress of this ApiResponseLockerItem.  # noqa: E501
        :type: str
        """

        self._whole_throwaddress = whole_throwaddress

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ApiResponseLockerItem):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, ApiResponseLockerItem):
            return True

        return self.to_dict() != other.to_dict()
