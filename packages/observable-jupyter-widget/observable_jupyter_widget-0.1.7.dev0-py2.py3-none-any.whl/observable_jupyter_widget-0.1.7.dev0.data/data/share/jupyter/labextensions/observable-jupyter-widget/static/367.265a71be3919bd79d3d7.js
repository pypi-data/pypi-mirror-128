(self.webpackChunkobservable_jupyter_widget=self.webpackChunkobservable_jupyter_widget||[]).push([[367],{44:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.logo=void 0,n.logo='<svg role="img" viewBox="0 0 25 28" width="25" height="28" aria-label="Observable" fill="currentColor" class="near-black" style="width: 18px;"><path d="M12.5 22.6667C11.3458 22.6667 10.3458 22.4153 9.5 21.9127C8.65721 21.412 7.98339 20.7027 7.55521 19.8654C7.09997 18.9942 6.76672 18.0729 6.56354 17.1239C6.34796 16.0947 6.24294 15.0483 6.25 14C6.25 13.1699 6.30417 12.3764 6.41354 11.6176C6.52188 10.8598 6.72292 10.0894 7.01563 9.30748C7.30833 8.52555 7.68542 7.84763 8.14479 7.27274C8.62304 6.68378 9.24141 6.20438 9.95208 5.87163C10.6979 5.51244 11.5458 5.33333 12.5 5.33333C13.6542 5.33333 14.6542 5.58467 15.5 6.08733C16.3428 6.588 17.0166 7.29733 17.4448 8.13459C17.8969 8.99644 18.2271 9.9103 18.4365 10.8761C18.6448 11.841 18.75 12.883 18.75 14C18.75 14.8301 18.6958 15.6236 18.5865 16.3824C18.4699 17.1702 18.2639 17.9446 17.9719 18.6925C17.6698 19.4744 17.2948 20.1524 16.8427 20.7273C16.3906 21.3021 15.7927 21.7692 15.0479 22.1284C14.3031 22.4876 13.4542 22.6667 12.5 22.6667ZM14.7063 16.2945C15.304 15.6944 15.6365 14.864 15.625 14C15.625 13.1073 15.326 12.3425 14.7292 11.7055C14.1313 11.0685 13.3885 10.75 12.5 10.75C11.6115 10.75 10.8688 11.0685 10.2708 11.7055C9.68532 12.3123 9.36198 13.1405 9.375 14C9.375 14.8927 9.67396 15.6575 10.2708 16.2945C10.8688 16.9315 11.6115 17.25 12.5 17.25C13.3885 17.25 14.124 16.9315 14.7063 16.2945ZM12.5 27C19.4031 27 25 21.1792 25 14C25 6.82075 19.4031 1 12.5 1C5.59687 1 0 6.82075 0 14C0 21.1792 5.59687 27 12.5 27Z" fill="currentColor"></path></svg>'},657:(e,n,t)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.MODULE_NAME=n.MODULE_VERSION=void 0;const i=t(147);n.MODULE_VERSION=i.version,n.MODULE_NAME=i.name},367:function(e,n,t){"use strict";var i=this&&this.__awaiter||function(e,n,t,i){return new(t||(t=Promise))((function(s,o){function r(e){try{l(i.next(e))}catch(e){o(e)}}function a(e){try{l(i.throw(e))}catch(e){o(e)}}function l(e){var n;e.done?s(e.value):(n=e.value,n instanceof t?n:new t((function(e){e(n)}))).then(r,a)}l((i=i.apply(e,n||[])).next())}))},s=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.ObservableWidgetView=n.ObservableWidgetModel=void 0;const o=t(565),r=t(657),a=t(293),l=t(44),u=s(t(677));t(204);class d extends o.DOMWidgetModel{defaults(){return Object.assign(Object.assign({},super.defaults()),{_model_name:d.model_name,_model_module:d.model_module,_model_module_version:d.model_module_version,_view_name:d.view_name,_view_module:d.view_module,_view_module_version:d.view_module_version,value:void 0,slug:"",cells:void 0,inputs:void 0,outputs:void 0})}}n.ObservableWidgetModel=d,d.serializers=Object.assign({},o.DOMWidgetModel.serializers),d.model_name="ObservableWidgetModel",d.model_module=r.MODULE_NAME,d.model_module_version=r.MODULE_VERSION,d.view_name="ObservableWidgetView",d.view_module=r.MODULE_NAME,d.view_module_version=r.MODULE_VERSION;class c extends o.DOMWidgetView{constructor(){super(...arguments),this.queuedInputs=[],this.pAndR=function(){let e;return[new Promise((n=>{e=n})),e]}(),this.iframeReadyForInputs=this.pAndR[0],this.setIframeReadyForInputs=this.pAndR[1],this.onInputs=()=>i(this,void 0,void 0,(function*(){const e=Object.assign({},this.model.get("inputs"));for(const n of Object.keys(e))n.startsWith("-invalid-cell-name")&&delete e[n];let n;for(this.queuedInputs.push(e),yield this.iframeReadyForInputs;n=this.queuedInputs.shift();)a.sendInputs(this.iframe,n)})),this.onPublishValues=e=>{console.log("publishing values:",e),this.outputEl&&(this.outputEl.innerHTML='<span title="'+JSON.stringify(e,null,2).replace(/"/g,"'")+'">hover to preview widget.value</span>'),this.model.set("value",e),this.touch()}}render(){this.el.classList.add("custom-widget");const e=this.model.get("slug"),n=this.model.get("cells"),t=this.model.get("outputs"),i=e.startsWith("d/")?"embedded notebook":e,s=`<a class="observable-link" href="https://observablehq.com/${e}" target="_blank" style="text-decoration: none; color: inherit;">\n    <div class="observable-logo" style="display: flex; align-items: center; justify-content: flex-end;">\n    <span>Edit ${i} on Observable</span>\n    ${l.logo}\n    </div>\n    </a>`;this.el.innerHTML=`\n    <div>\n    ${s}\n    <iframe sandbox="allow-scripts" style="overflow: auto; min-width: 100%; width: 0px;" frameBorder="0"></iframe>\n    <div class="value">output not available yet...</div>`,this.el.querySelector("iframe").srcdoc=function(e,n,t){return`<!DOCTYPE html>\n<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@observablehq/inspector@3/dist/inspector.css">\n<style>\nbody {\n  margin: 0;\n}\n</style>\n<div style="overflow: auto;"></div>\n<script type="module">\n${u.default}\n\nconst slug = '${e}';\nconst into = document.getElementsByTagName('div')[0];\nconst cells = ${n?JSON.stringify(n):"undefined"};\nconst outputs = ${t?JSON.stringify(t):"undefined"}\nembed(slug, into, cells, outputs);\nmonitor()\n// TODO how to clean up monitor or a window event listener when this cell gets rerun?\n<\/script>\n`}(e,n,t),this.outputEl=this.el.querySelector(".value"),this.iframe=this.el.querySelector("iframe"),a.listenToSizeAndValuesAndReady(this.iframe,this.onPublishValues,this.setIframeReadyForInputs),this.onInputs(),this.model.on("change:inputs",this.onInputs,this)}}n.ObservableWidgetView=c},293:(e,n)=>{"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.sendInputs=n.listenToSizeAndValuesAndReady=void 0,n.listenToSizeAndValuesAndReady=function(e,n,t){window.addEventListener("message",(function i(s){document.body.contains(e)||removeEventListener("message",i);const o=(r=s,[...document.getElementsByTagName("iframe")].filter((e=>e.contentWindow===r.source))[0]);var r;"iframeSize"===s.data.type&&o===e?e.height=s.data.height:"outputs"===s.data.type&&o===e?n(s.data.outputs):"ready"===s.data.type&&o===e&&t()}))},n.sendInputs=function(e,n){e.contentWindow.postMessage({type:"inputs",inputs:n},"*")}},889:(e,n,t)=>{(n=t(645)(!1)).push([e.id,".observable-logo {\n  position: absolute;\n  bottom: 0;\n  right: 0;\n  margin-bottom: 5px;\n  margin-right: 1px;\n  transition: background-color 0.2s;\n}\n.observable-logo svg {\n  opacity: 0.5;\n  transition: opacity 0.2s;\n}\n.observable-logo span {\n  opacity: 0;\n  transition: opacity 0.2s;\n  padding-right: 0.2em;\n  padding-left: 0.2em;\n}\n.observable-logo:hover {\n  background-color: white;\n}\n.observable-logo:hover span {\n  opacity: 0.8;\n}\n.observable-logo:hover svg {\n  opacity: 0.8;\n}\n/*\n.observable-link:hover ~ iframe {\n  outline: solid 1px #e0e0e0;\n  box-shadow: 0 0 3px;\n  transition: box-shadow 0.2s;\n}\n.observable-link ~ iframe {\n  outline: none;\n}\n*/\n/* Colab-only rule - untested */\nbody > .output-area > .output-body {\n  margin-right: 2px;\n}\n",""]),e.exports=n},645:e=>{"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t,i,s,o=e[1]||"",r=e[3];if(!r)return o;if(n&&"function"==typeof btoa){var a=(t=r,i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),"/*# ".concat(s," */")),l=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[o].concat(l).concat([a]).join("\n")}return[o].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,i){"string"==typeof e&&(e=[[null,e,""]]);var s={};if(i)for(var o=0;o<this.length;o++){var r=this[o][0];null!=r&&(s[r]=!0)}for(var a=0;a<e.length;a++){var l=[].concat(e[a]);i&&s[l[0]]||(t&&(l[2]?l[2]="".concat(t," and ").concat(l[2]):l[2]=t),n.push(l))}},n}},677:(e,n,t)=>{"use strict";t.r(n),t.d(n,{default:()=>i});const i="// This code is injected into the iframe via a .srcdoc property\nimport {\n  Runtime,\n  Inspector,\n} from 'https://cdn.jsdelivr.net/npm/@observablehq/runtime@4/dist/runtime.js';\n\nexport class DocumentBodyDimensionsMutationObserverMonitor {\n  constructor() {\n    this.lastHeight = -1;\n\n    this.onMutation = (entries) => {\n      const height = document.body.clientHeight;\n      if (height !== this.lastHeight) {\n        this.lastHeight = height;\n        postHeight(this.lastHeight);\n      }\n    };\n  }\n\n  start() {\n    this.observer = new MutationObserver(this.onMutation);\n    this.observer.observe(document.body, {\n      childList: true,\n      attributes: true,\n      subtree: true,\n    });\n  }\n}\n\nexport class DocumentBodyDimensionsResizeObserverMonitor {\n  constructor() {\n    if (typeof window.ResizeObserver === 'undefined') {\n      throw Error('ResizeObserver is not supported');\n    }\n    this.lastHeight = -1;\n\n    this.onResize = (entries) => {\n      for (let entry of entries) {\n        const height = entry.contentRect.height;\n        if (height !== this.lastHeight) {\n          this.lastHeight = height;\n          postHeight(this.lastHeight);\n        }\n      }\n    };\n  }\n\n  start() {\n    this.observer = new ResizeObserver(this.onResize);\n    this.observer.observe(document.body);\n  }\n}\n\nfunction postHeight(height) {\n  window.parent.postMessage(\n    {\n      type: 'iframeSize',\n      height,\n    },\n    '*'\n  );\n}\n\nexport const monitor = () => {\n  if (typeof window.ResizeObserver !== 'undefined') {\n    new DocumentBodyDimensionsResizeObserverMonitor().start();\n  } else {\n    new DocumentBodyDimensionsMutationObserverMonitor().start();\n  }\n};\n\nclass JupyterWidgetOutputObserver {\n  pending() {\n    // could gray something out here\n  }\n  fulfilled(value) {\n    // postMessage does a \"structured clone\" which fails for DOM elements, functions, and more\n    // so let's jsonify\n    // We will probably wastefully jsonify again on the other side of the postMessage\n    const cleaned = {};\n    for (const name of Object.keys(value)) {\n      try {\n        let v = value[name];\n        if (v instanceof Set) {\n          v = Array.from(v);\n        } else if (v instanceof Map) {\n          v = Object.fromEntries(v);\n        }\n        cleaned[name] = JSON.parse(JSON.stringify(v));\n      } catch (e) {\n        console.log('error JSONifying value of cell', name, v);\n        cleaned[name] = null;\n      }\n    }\n    window.parent.postMessage(\n      {\n        type: 'outputs',\n        outputs: JSON.parse(JSON.stringify(cleaned)),\n      },\n      '*'\n    );\n  }\n  rejected(error) {\n    console.error('all values rejected:', error);\n  }\n}\n\n// (slug: string, into: string | HTMLElement, cells?: string[], outputs?: string[])\nexport const embed = async (slug, into, cells, outputs) => {\n  const moduleUrl = 'https://api.observablehq.com/' + slug + '.js?v=3';\n  const define = (await import(moduleUrl)).default;\n  const inspect = Inspector.into(into);\n  const filter = cells ? (name) => cells.includes(name) : (name) => true;\n\n  const newDefine = (runtime, observer) => {\n    const main = define(runtime, observer);\n    let outputVariables = new Set();\n    // TODO allow a subset of these to be manually specified?\n    if (outputs) {\n      outputVariables = new Set(outputs);\n    } else {\n      const candidateOutputVariables = cells ? cells : [...main._scope.keys()];\n      for (const cell of candidateOutputVariables) {\n        if (cell.slice(0, 7) === 'viewof ') {\n          outputVariables.add(cell.slice(7));\n        } else {\n          outputVariables.add(cell);\n        }\n      }\n    }\n    main\n      .variable(observer('observableJupyterWidgetOutputCell'))\n      .define(\n        'observableJupyterWidgetOutputCell',\n        [...outputVariables],\n        (...args) => {\n          const output = {};\n          [...outputVariables].forEach((name, i) => {\n            output[name] = args[i];\n          });\n          return output;\n        }\n      );\n  };\n\n  let main;\n\n  // TODO wait for this initial inputs message before actually running anything\n  window.addEventListener('message', (msg) => {\n    if (msg.data.type === 'inputs' && msg.source === window.parent) {\n      // only the first time, start things up\n      if (!main) {\n        const runtime = new Runtime();\n        main = runtime.module(newDefine, (name) => {\n          if (name === 'observableJupyterWidgetOutputCell') {\n            return new JupyterWidgetOutputObserver();\n          }\n          return filter(name) ? inspect() : true;\n        });\n      }\n      window.addEventListener('unload', () => {\n        main._runtime.dispose();\n      });\n\n      const inputs = msg.data.inputs;\n      for (let name of Object.keys(inputs)) {\n        try {\n          //console.log('redefining', name, 'to', inputs[name]);\n          main.redefine(name, inputs[name]);\n        } catch (e) {\n          if (e.message.endsWith(name + ' is not defined')) {\n            console.log(\n              'Send value to Observable that does not exist: ' + name\n            );\n            console.log(e);\n            // TODO get this error into Python code? How do widget Python exceptions propagate?\n          } else {\n            throw e;\n          }\n        }\n      }\n    }\n  });\n\n  // iframe is ready to start receiving 'inputs' messages\n  window.parent.postMessage({ type: 'ready' }, '*');\n  return main;\n};\n"},204:(e,n,t)=>{var i=t(379),s=t(889);"string"==typeof(s=s.__esModule?s.default:s)&&(s=[[e.id,s,""]]);i(s,{insert:"head",singleton:!1}),e.exports=s.locals||{}},379:(e,n,t)=>{"use strict";var i,s=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),o=[];function r(e){for(var n=-1,t=0;t<o.length;t++)if(o[t].identifier===e){n=t;break}return n}function a(e,n){for(var t={},i=[],s=0;s<e.length;s++){var a=e[s],l=n.base?a[0]+n.base:a[0],u=t[l]||0,d="".concat(l," ").concat(u);t[l]=u+1;var c=r(d),p={css:a[1],media:a[2],sourceMap:a[3]};-1!==c?(o[c].references++,o[c].updater(p)):o.push({identifier:d,updater:m(p,n),references:1}),i.push(d)}return i}function l(e){var n=document.createElement("style"),i=e.attributes||{};if(void 0===i.nonce){var o=t.nc;o&&(i.nonce=o)}if(Object.keys(i).forEach((function(e){n.setAttribute(e,i[e])})),"function"==typeof e.insert)e.insert(n);else{var r=s(e.insert||"head");if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}return n}var u,d=(u=[],function(e,n){return u[e]=n,u.filter(Boolean).join("\n")});function c(e,n,t,i){var s=t?"":i.media?"@media ".concat(i.media," {").concat(i.css,"}"):i.css;if(e.styleSheet)e.styleSheet.cssText=d(n,s);else{var o=document.createTextNode(s),r=e.childNodes;r[n]&&e.removeChild(r[n]),r.length?e.insertBefore(o,r[n]):e.appendChild(o)}}function p(e,n,t){var i=t.css,s=t.media,o=t.sourceMap;if(s?e.setAttribute("media",s):e.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleSheet)e.styleSheet.cssText=i;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(i))}}var b=null,h=0;function m(e,n){var t,i,s;if(n.singleton){var o=h++;t=b||(b=l(n)),i=c.bind(null,t,o,!1),s=c.bind(null,t,o,!0)}else t=l(n),i=p.bind(null,t,n),s=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return i(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;i(e=n)}else s()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=(void 0===i&&(i=Boolean(window&&document&&document.all&&!window.atob)),i));var t=a(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var i=0;i<t.length;i++){var s=r(t[i]);o[s].references--}for(var l=a(e,n),u=0;u<t.length;u++){var d=r(t[u]);0===o[d].references&&(o[d].updater(),o.splice(d,1))}t=l}}}},147:e=>{"use strict";e.exports=JSON.parse('{"name":"observable-jupyter-widget","version":"0.1.6","description":"Connect Observable notebooks to the Jupyter kernel","keywords":["jupyter","jupyterlab","jupyterlab-extension","widgets"],"files":["lib/**/*.js","dist/*.js","css/*.css"],"homepage":"https://github.com/thomasballinger/observable-jupyter-widget","bugs":{"url":"https://github.com/thomasballinger/observable-jupyter-widget/issues"},"license":"ISC","author":{"name":"Thomas Ballinger","email":"me@ballingt.com"},"main":"lib/index.js","types":"./lib/index.d.ts","repository":{"type":"git","url":"https://github.com/thomasballinger/observable-jupyter-widget"},"scripts":{"build":"yarn run build:lib && yarn run build:nbextension && yarn run build:labextension:dev","build:prod":"yarn run build:lib && yarn run build:nbextension && yarn run build:labextension","build:labextension":"jupyter labextension build .","build:labextension:dev":"jupyter labextension build --development True .","build:lib":"tsc","build:nbextension":"webpack","clean":"yarn run clean:lib && yarn run clean:nbextension && yarn run clean:labextension","clean:lib":"rimraf lib","clean:labextension":"rimraf observable_jupyter_widget/labextension","clean:nbextension":"rimraf observable_jupyter_widget/nbextension/static/index.js","lint":"eslint . --ext .ts,.tsx --fix","lint:check":"eslint . --ext .ts,.tsx","prepack":"yarn run build:lib","test":"jest","watch":"npm-run-all -p watch:*","watch:lib":"tsc -w","watch:nbextension":"webpack --watch --mode=development","watch:labextension":"jupyter labextension watch ."},"dependencies":{"@jupyter-widgets/base":"^1.1.10 || ^2.0.0 || ^3.0.0 || ^4.0.0","@observablehq/runtime":"^4.18.0","raw-loader":"^4.0.2"},"devDependencies":{"@babel/core":"^7.5.0","@babel/preset-env":"^7.5.0","@jupyterlab/builder":"^3.0.0","@phosphor/application":"^1.6.0","@phosphor/widgets":"^1.6.0","@types/jest":"^26.0.0","@types/webpack-env":"^1.13.6","@typescript-eslint/eslint-plugin":"^3.6.0","@typescript-eslint/parser":"^3.6.0","acorn":"^7.2.0","css-loader":"^3.2.0","eslint":"^7.4.0","eslint-config-prettier":"^6.11.0","eslint-plugin-prettier":"^3.1.4","fs-extra":"^7.0.0","identity-obj-proxy":"^3.0.0","jest":"^26.0.0","jest-raw-loader":"^1.0.1","mkdirp":"^0.5.1","npm-run-all":"^4.1.3","prettier":"^2.0.5","rimraf":"^2.6.2","source-map-loader":"^1.1.3","style-loader":"^1.0.0","ts-jest":"^26.0.0","ts-loader":"^8.0.0","typescript":"~4.1.3","webpack":"^5.0.0","webpack-cli":"^4.0.0"},"jupyterlab":{"extension":"lib/plugin","outputDir":"observable_jupyter_widget/labextension/","sharedPackages":{"@jupyter-widgets/base":{"bundled":false,"singleton":true}}}}')}}]);