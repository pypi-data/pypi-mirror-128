{"version":3,"file":"changeform.164ad94686cff8bf9197.js","mappings":"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","sources":["webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_management-form.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/paper-formset/_inline-formset.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/bem/scroll-top-button/scroll-top-button.js","webpack://paper-admin/./paper_admin/static/paper_admin/src/js/changeform.js"],"sourcesContent":["const TOTAL_FORMS_SELECTOR = \"input[name$=\\\"-TOTAL_FORMS\\\"]\";\nconst INITIAL_FORMS_SELECTOR = \"input[name$=\\\"-INITIAL_FORMS\\\"]\";\nconst MIN_NUM_FORMS_SELECTOR = \"input[name$=\\\"-MIN_NUM_FORMS\\\"]\";\nconst MAX_NUM_FORMS_SELECTOR = \"input[name$=\\\"-MAX_NUM_FORMS\\\"]\";\n\n\nclass ManagementForm {\n    constructor(root) {\n        this.root = root;\n    }\n\n    get totalForms() {\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString())\n    }\n\n    set totalForms(value) {\n        let intValue = parseInt(value);\n        if (isNaN(intValue) || (intValue < 0)) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(TOTAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get initialForms() {\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        return parseInt(input.value.toString())\n    }\n\n    set initialForms(value) {\n        let intValue = parseInt(value);\n        if (isNaN(intValue) || (intValue < 0)) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(INITIAL_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get minForms() {\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString())\n        } else {\n            return 0;\n        }\n    }\n\n    set minForms(value) {\n        let intValue = parseInt(value);\n        if (isNaN(intValue) || (intValue < 0)) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MIN_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n\n    get maxForms() {\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        if (input) {\n            return parseInt(input.value.toString())\n        } else {\n            return Infinity;\n        }\n    }\n\n    set maxForms(value) {\n        let intValue = parseInt(value);\n        if (isNaN(intValue) || (intValue < 0)) {\n            throw new Error(`Invalid value: ${value}`);\n        }\n\n        const input = this.root.querySelector(MAX_NUM_FORMS_SELECTOR);\n        input.value = intValue;\n    }\n}\n\nexport default ManagementForm;\n","import ManagementForm from \"./_management-form\";\n\n\n/**\n * Базовый класс для Django-формсетов.\n *\n * Основные приципы работы:\n * 1) Желательно задать корневому элементу форсета уникальный ID, чтобы иметь\n *    возможность указать зависимым элементам, с каким именно формсетом они будут работать.\n *\n * 2) Префикс формсета задается через атрибут \"data-formset-prefix\".\n *\n * 3) Контейнер для форм задается атрибутом \"data-formset-form-container\".\n *\n * 4) Селектор форм формсета задается атрибутом \"data-formset-form-selector\".\n *\n * 5) Шаблонный элемент для новых форм задается через атрибут \"data-formset-form-template\".\n *\n *      <div id=\"example-formset\"\n *           data-formset-prefix=\"example\"\n *           data-formset-form-container=\".example-forms\"\n *           data-formset-form-selector=\".example-form\"\n *           data-formset-form-template=\"example-form-template\">\n *        <div class=\"example-forms\">\n *          ...\n *        </div>\n *      </div>\n *\n *      <template id=\"example-form-template\">\n *        <div class=\"example-form\">\n *          ...\n *        </div>\n *      </template>\n *\n * 6) Кнопки добавления формы должна иметь атрибут data-formset-toggle=\"add\".\n *    Если кнопка находится за пределами корневого элемента формсета, необходимо\n *    добавить атрибут \"data-formset\" с ID формсета.\n *\n *      <button data-formset-toggle=\"add\" data-formset=\"example-formset\">\n *        Add form\n *      </button>\n *\n * 7) Кнопка удаления ещё не сохраненной формы должна иметь атрибут\n *    data-formset-toggle=\"delete\" и располагаться в пределах формы.\n *\n *      <button data-formset-toggle=\"delete\">\n *        Delete this form\n *      </button>\n *\n * 8) Кнопки сортировки форм должны иметь атрибут \"data-formset-toggle\" со\n *    значениями \"up\" либо \"down\" и располагаться в пределах формы.\n *\n */\nclass Formset {\n    constructor(root) {\n        this.root = root;\n        this.management_form = new ManagementForm(root);\n\n        this._initAddFormButtons();\n        this._initDeleteFormButtons();\n        this._initSortFormButtons();\n    }\n\n    get prefix() {\n        const prefix = this.root.dataset.formsetPrefix;\n        if (!prefix) {\n            throw new Error(\"formset prefix required\");\n        }\n\n        return prefix;\n    }\n\n    get formContainer() {\n        const selector = this.root.dataset.formsetFormContainer;\n        if (!selector) {\n            throw new Error(\"container selector required\");\n        }\n\n        const container = this.root.querySelector(selector);\n        if (!container) {\n            throw new Error(\"container not found\");\n        }\n\n        return container;\n    }\n\n    get formSelector() {\n        const formSelector = this.root.dataset.formsetFormSelector;\n        if (!formSelector) {\n            throw new Error(\"form selector required\");\n        }\n\n        return formSelector;\n    }\n\n    get templateId() {\n        const templateId = this.root.dataset.formsetFormTemplate;\n        if (!templateId) {\n            throw new Error(\"form template ID required\");\n        }\n\n        return templateId;\n    }\n\n    get formTemplate() {\n        const templateElement = document.getElementById(this.templateId);\n        if (!templateElement) {\n            throw new Error(\"form template element not found\");\n        }\n\n        return templateElement;\n    }\n\n    /**\n     * Возвращает текущие формы формсета.\n     * @returns {NodeListOf<HTMLElement>}\n     */\n    getForms() {\n        return this.formContainer.querySelectorAll(this.formSelector);\n    }\n\n    /**\n     * Возвращает порядковый номер формы в формсете.\n     * !! Внимание !! Это не тот же индекс, что передается в setFormIndex !!\n     * @param {HTMLElement} form\n     * @returns {number}\n     */\n    getFormIndex(form) {\n        return Array.from(this.getForms()).indexOf(form);\n    }\n\n    /**\n     * Возвращает массив кнопок добавления формы в формсет.\n     * @returns {HTMLElement[]}\n     */\n    getAddFormButtons() {\n        let buttons = [];\n\n        document.querySelectorAll(\"[data-formset-toggle=\\\"add\\\"]\").forEach(function(button) {\n            if (this.root.id && (button.dataset.formset === this.root.id)) {\n                buttons.push(button);\n            } else if (this.root.contains(button) && !button.dataset.formset) {\n                buttons.push(button);\n            }\n        }.bind(this));\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок удаления форм.\n     * @returns {HTMLElement[]}\n     */\n    getDeleteFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(function(form) {\n            let deleteFormButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"delete\\\"]\");\n            if (deleteFormButtons.length) {\n                buttons = buttons.concat(Array.from(deleteFormButtons));\n            }\n        }.bind(this));\n\n        return buttons;\n    }\n\n    /**\n     * Возвращает массив кнопок сортировки форм.\n     * @returns {HTMLElement[]}\n     */\n    getSortFormButtons() {\n        let buttons = [];\n\n        this.getForms().forEach(function(form) {\n            let moveUpButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"up\\\"]\");\n            if (moveUpButtons.length) {\n                buttons = buttons.concat(Array.from(moveUpButtons));\n            }\n\n            let moveDownButtons = form.querySelectorAll(\"[data-formset-toggle=\\\"down\\\"]\");\n            if (moveDownButtons.length) {\n                buttons = buttons.concat(Array.from(moveDownButtons));\n            }\n        }.bind(this));\n\n        return buttons;\n    }\n\n    /**\n     * Включение/выключение кнопки добавления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setAddFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки удаления формы.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setDeleteFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    /**\n     * Включение/выключение кнопки сортировки форм.\n     * @param {HTMLElement} button\n     * @param {Boolean} state\n     */\n    setSortFormButtonState(button, state) {\n        button.disabled = !state;\n    }\n\n    _initAddFormButtons() {\n        document.addEventListener(\"click\", function(event) {\n            let button = event.target.closest(\"[data-formset-toggle=\\\"add\\\"]\");\n            if (button) {\n                if (this.root.id && (button.dataset.formset === this.root.id)) {\n                    this.addForm();\n                } else if (this.root.contains(button) && !button.dataset.formset) {\n                    this.addForm();\n                }\n            }\n        }.bind(this));\n    }\n\n    _initDeleteFormButtons() {\n        document.addEventListener(\"click\", function(event) {\n            let button = event.target.closest(\"[data-formset-toggle=\\\"delete\\\"]\");\n            if (button && this.root.contains(button)) {\n                let form = button.closest(this.formSelector);\n                if (form) {\n                    this.deleteForm(form);\n                }\n            }\n        }.bind(this));\n    }\n\n    _initSortFormButtons() {\n        document.addEventListener(\"click\", function(event) {\n            let moveUpButton = event.target.closest(\"[data-formset-toggle=\\\"up\\\"]\");\n            let moveDownButton = event.target.closest(\"[data-formset-toggle=\\\"down\\\"]\");\n\n            if (moveUpButton && this.root.contains(moveUpButton)) {\n                let form = moveUpButton.closest(this.formSelector);\n                if (form) {\n                    this.moveFormUp(form);\n                }\n            } else if (moveDownButton && this.root.contains(moveDownButton)) {\n                let form = moveDownButton.closest(this.formSelector);\n                if (form) {\n                    this.moveFormDown(form);\n                }\n            }\n        }.bind(this));\n    }\n\n    addForm() {\n        if (this.management_form.totalForms >= this.management_form.maxForms) {\n            throw new Error(\"Maximum number of forms is reached\");\n        }\n\n        let formFragment = this.formTemplate.content.cloneNode(true);\n        let form = formFragment.children[0];\n\n        this.formContainer.appendChild(formFragment);\n\n        this.management_form.totalForms++;\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n\n        return form;\n    }\n\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        form.remove();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"form is already first\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        form.after(previousForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"form is already last\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        form.before(nextForm);\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n        this.updateButtonsState();\n    }\n\n    /**\n     * Установка Django-индекса для всех форм в соответствии с их порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректные Django-индексы при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormIndexes(skip = null) {\n        let index = 0;\n        this.getForms().forEach(function(form) {\n            if (form !== skip) {\n                this.setFormIndex(form, index++);\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Установка Django-индекса формы для всех элементов в пределах формы.\n     * @param {HTMLElement} form\n     * @param {Number} index\n     */\n    setFormIndex(form, index) {\n        this._setElementIndex(form, index);\n        form.querySelectorAll(\"*\").forEach(function(element) {\n            this._setElementIndex(element, index);\n        }.bind(this));\n    }\n\n    /**\n     * Установка Django-индекса формы в атрибутах указанного элемента.\n     * @param {HTMLElement} element\n     * @param {Number} index\n     * @private\n     */\n    _setElementIndex(element, index) {\n        const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n        const replacement = this.prefix + \"-\" + index;\n\n        if (element.htmlFor) {\n            element.htmlFor = element.htmlFor.replace(regex, replacement);\n        }\n\n        if (element.id) {\n            element.id = element.id.replace(regex, replacement);\n        }\n\n        if (element.name) {\n            element.name = element.name.replace(regex, replacement);\n        }\n    }\n\n    /**\n     * Установка поля сортировки для всех форм в соответствии с их порядком в DOM.\n     * Можно указать форму, которую следует пропустить при обходе. Это позволит\n     * указать корректную сортировку при удалении, не дожидаясь физического\n     * удаления формы из DOM.\n     * @param {HTMLElement} skip\n     */\n    updateFormOrder(skip = null) {\n        let index = 0;\n        this.getForms().forEach(function(form) {\n            if (form !== skip) {\n                this.setFormOrder(form, index++);\n            }\n        }.bind(this));\n    }\n\n    /**\n     * Установка значения в поле сортровки формы.\n     * @param {HTMLElement} form\n     * @param {Number} value\n     */\n    setFormOrder(form, value) {\n\n    }\n\n    /**\n     * Обновление стостояния всех кнопок формсета.\n     */\n    updateButtonsState() {\n        const disableAdd = this.management_form.totalForms >= this.management_form.maxForms;\n        this.getAddFormButtons().forEach(function(button) {\n            this.setAddFormButtonState(button, !disableAdd);\n        }.bind(this));\n\n        const disableDelete = this.management_form.totalForms <= this.management_form.minForms;\n        this.getDeleteFormButtons().forEach(function(button) {\n            this.setDeleteFormButtonState(button, !disableDelete);\n        }.bind(this));\n\n        const formCount = this.getForms().length;\n        this.getSortFormButtons().forEach(function(button) {\n            const form = button.closest(this.formSelector);\n            const formIndex = this.getFormIndex(form);\n            const direction = button.dataset.formsetToggle;\n            let state = true;\n\n            if ((formIndex === 0) && (direction === \"up\")) {\n                state = false;\n            }\n\n            if ((formIndex === (formCount - 1)) && (direction === \"down\")) {\n                state = false;\n            }\n\n            this.setSortFormButtonState(button, state);\n        }.bind(this));\n    }\n}\n\nexport default Formset;\n","import emitters from \"js/utilities/emitters\";\nimport {gsap, TimelineLite} from \"gsap\";\nimport {ScrollToPlugin} from \"gsap/ScrollToPlugin\";\nimport Formset from \"./_formset\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\n\nclass InlineFormset extends Formset {\n    constructor(root) {\n        super(root);\n        this._isTransitioning = false;\n    }\n\n    setAddFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        let finalState = !this._isTransitioning && state;\n        super.setAddFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setDeleteFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        let finalState = !this._isTransitioning && state;\n        super.setDeleteFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    setSortFormButtonState(button, state) {\n        // отключение кнопок во время анимации\n        let finalState = !this._isTransitioning && state;\n        super.setSortFormButtonState(button, finalState);\n        button.classList.toggle(\"disabled\", !finalState);\n    }\n\n    addForm() {\n        this._isTransitioning = true;\n        let form = super.addForm();\n\n        // Events\n        emitters.dom.trigger(\"mutate\", [form]);\n        emitters.inlines.trigger(\"add\", [form, this.prefix]);\n\n        // Animation\n        const onAddCallback = function() {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"added\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:added\", [$(form), this.prefix]);\n        }.bind(this);\n\n        const animationOptions = {\n            onComplete: onAddCallback\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n            animationOptions.clearProps = \"opacity\";\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n            animationOptions.clearProps = \"height\";\n        }\n\n        gsap.from(form, animationOptions);\n\n        return form;\n    }\n\n    deleteForm(form) {\n        if (this.management_form.totalForms <= this.management_form.minForms) {\n            throw new Error(\"Minimum number of forms is reached\");\n        }\n\n        this.management_form.totalForms--;\n\n        // Устанавливаем корректные индексы форм, не дожидаясь анимаций.\n        this.setFormIndex(form, this.management_form.totalForms);\n        this.updateFormIndexes(form);\n\n        // Устанавливаем коректную сортировку форм, не дожидаясь анимаций.\n        this.updateFormOrder(form);\n\n        // Events\n        emitters.inlines.trigger(\"remove\", [form, this.prefix]);\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onDeleteCallback = function() {\n            emitters.dom.trigger(\"release\", [form]);\n\n            form.remove();\n\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            // Events\n            emitters.inlines.trigger(\"removed\", [form, this.prefix]);\n\n            // Django compatible\n            $(document).trigger(\"formset:removed\", [$(form), this.prefix]);\n        }.bind(this);\n\n        const animationOptions = {\n            onComplete: onDeleteCallback\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.2;\n            animationOptions.opacity = 0;\n        } else {\n            animationOptions.duration = 0.3;\n            animationOptions.height = 0;\n        }\n\n        gsap.to(form, animationOptions);\n    }\n\n    moveFormUp(form) {\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === 0) {\n            throw new Error(\"the form is first already\");\n        }\n\n        const previousForm = this.getForms()[formIndex - 1];\n        this._swapForms(previousForm, form, \"up\");\n    }\n\n    moveFormDown(form) {\n        const formCount = this.getForms().length;\n        const formIndex = this.getFormIndex(form);\n        if (formIndex === formCount - 1) {\n            throw new Error(\"the form is last already\");\n        }\n\n        const nextForm = this.getForms()[formIndex + 1];\n        this._swapForms(form, nextForm, \"down\");\n    }\n\n    /**\n     * Меняет местами формы form1 и form2.\n     * Порядок указания форм должен совпадать с их порядком в DOM, т.е. form1\n     * должна быть выше form2.\n     * @param {HTMLElement} form1\n     * @param {HTMLElement} form2\n     * @param {string} direction\n     * @private\n     */\n    _swapForms(form1, form2, direction) {\n        const initialRect1 = form1.getBoundingClientRect();\n        const initialRect2 = form2.getBoundingClientRect();\n\n        // TIP: при изменении форм местами может проскроллиться страница\n        // (возможно из-за фокуса). Это внесет ошибку в дальнейшие рассчеты.\n        // Поэтому фиксируем вертикальное расположение окна браузера.\n        const currentPageOffset = window.pageYOffset || document.documentElement.scrollTop;\n        form2.after(form1);\n        window.scrollTo(0, currentPageOffset);\n\n        const swappedRect1 = form1.getBoundingClientRect();\n        const swappedRect2 = form2.getBoundingClientRect();\n\n        this.updateFormIndexes();\n        this.updateFormOrder();\n\n        // Имитация начального расположения форм с помощью CSS-трансформаций.\n        this.formContainer.style.transformStyle = 'preserve-3d';\n        if (direction === \"up\") {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 0)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 1px)`;\n        } else {\n            form1.style.transform = `translate3d(0, ${initialRect1.top - swappedRect1.top}px, 1px)`;\n            form2.style.transform = `translate3d(0, ${initialRect2.top - swappedRect2.top}px, 0)`;\n        }\n\n        // Animation\n        this._isTransitioning = true;\n        this.updateButtonsState();\n\n        const onSwapCallback = function() {\n            this._isTransitioning = false;\n            this.updateButtonsState();\n\n            this.formContainer.style.transformStyle = '';\n        }.bind(this);\n\n        const animationOptions = {\n            y: 0,\n            clearProps: \"transform\",\n        };\n\n        if (this.root.classList.contains(\"paper-formset--tabular\")) {\n            animationOptions.duration = 0.25;\n        } else {\n            animationOptions.duration = 0.5;\n        }\n\n        const tl = new TimelineLite({\n            onComplete: onSwapCallback\n        })\n        .to(form1, animationOptions)\n        .to(form2, animationOptions, 0);\n\n        // Перемещение окна вместе с формой.\n        let finalPageOffset;\n        let preventScroll;\n        if (direction === \"up\") {\n            finalPageOffset = currentPageOffset + (swappedRect2.top - initialRect2.top);\n            preventScroll = (\n                (initialRect2.top > (0.5 * window.innerHeight))\n                && (swappedRect2.top > (0.5 * window.innerHeight))\n            )\n        } else {\n            finalPageOffset = currentPageOffset + (swappedRect1.top - initialRect1.top);\n            preventScroll = (\n                (initialRect1.top < (0.5 * window.innerHeight))\n                && (swappedRect1.top < (0.5 * window.innerHeight))\n            )\n        }\n\n        if (!preventScroll) {\n            tl.to(window, {\n                duration: animationOptions.duration,\n                scrollTo: {\n                    y: Math.max(0, finalPageOffset)\n                }\n            }, 0)\n        }\n    }\n\n    setFormOrder(form, value) {\n        super.setFormOrder(form, value);\n\n        const input = form.querySelector(\".paper-formset__order\");\n        if (input) {\n            input.value = value;\n        }\n    }\n\n    setFormIndex(form, index) {\n        super.setFormIndex(form, index);\n\n        // Обновление индекса в заголовке stacked-формы.\n        let caption = form.querySelector(\".paper-formset__form-caption\");\n        if (caption) {\n            caption.innerHTML = caption.innerHTML.replace(/#(\\d+|__prefix__)/g, \"#\" + (index + 1));\n        }\n\n        // Обновление кнопки удаления\n        let deleteFormButton = form.querySelector(\"[data-formset-toggle=\\\"delete\\\"]\");\n        if (deleteFormButton && deleteFormButton.dataset.formsetForm) {\n            const regex = new RegExp(\"(\" + this.prefix + \"-(\\\\d+|__prefix__))\");\n            const replacement = this.prefix + \"-\" + index;\n            const formId = deleteFormButton.dataset.formsetForm.replace(regex, replacement);\n            deleteFormButton.setAttribute(\"data-formset-form\", formId);\n        }\n    }\n}\n\nexport default InlineFormset;\n","import {gsap} from \"gsap\";\nimport {ScrollToPlugin} from \"gsap/ScrollToPlugin\";\n\nimport \"./scroll-top-button.scss\";\n\ngsap.registerPlugin(ScrollToPlugin);\n\ndocument.addEventListener(\"click\", function(event) {\n    let button = event.target.closest(\".scroll-top-button\");\n    if (button) {\n        gsap.to(window, {\n            duration: 0.3,\n            scrollTo: {\n                y: 0,\n            }\n        });\n    }\n});\n\nwindow.addEventListener(\"scroll\", function() {\n    let button = document.querySelector(\".scroll-top-button\");\n    if (button) {\n        button.classList.toggle(\"show\", window.pageYOffset >= (document.documentElement.clientHeight * .75));\n    }\n});\n","import formUtils from \"js/utilities/form_utils\";\nimport {Select2Widget} from \"components/select2\";\nimport {InlineFormset} from \"bem/paper-formset/paper-formset\";\nimport \"bem/scroll-top-button/scroll-top-button\";\n\n// Select2 для выпадающих списков\nconst select2_changeform = new Select2Widget({\n    width: \"\",\n    allowClear: true\n});\nselect2_changeform.observe(\".select-field select\");\nselect2_changeform.initAll(\".select-field select\");\n\n// Инициализация inline-форм\nlet formsets = [];\ndocument.querySelectorAll(\".paper-formset\").forEach(function(element) {\n    let formset = new InlineFormset(element);\n    formset.updateButtonsState();\n    formsets.push(formset);\n});\n\n// Установка значения поля сортировки перед сохранением.\n// Назначить сортировку сразу нельзя из-за того, что extra-формы не должны меняться.\ndocument.addEventListener(\"submit\", function() {\n    formsets.forEach(function(formset) {\n        let index = 0;\n        formset.getForms().forEach(function(form) {\n            if (form.classList.contains(\"has_original\") || formUtils.containsChangedField(form)) {\n                this.setFormOrder(form, index++);\n            }\n        }.bind(formset));\n    });\n});\n"],"names":["TOTAL_FORMS_SELECTOR","INITIAL_FORMS_SELECTOR","MIN_NUM_FORMS_SELECTOR","MAX_NUM_FORMS_SELECTOR","constructor","root","this","input","querySelector","parseInt","value","toString","intValue","isNaN","Error","Infinity","management_form","ManagementForm","_initAddFormButtons","_initDeleteFormButtons","_initSortFormButtons","prefix","dataset","formsetPrefix","selector","formsetFormContainer","container","formSelector","formsetFormSelector","templateId","formsetFormTemplate","templateElement","document","getElementById","getForms","formContainer","querySelectorAll","getFormIndex","form","Array","from","indexOf","getAddFormButtons","buttons","forEach","button","id","formset","contains","push","bind","getDeleteFormButtons","deleteFormButtons","length","concat","getSortFormButtons","moveUpButtons","moveDownButtons","setAddFormButtonState","state","disabled","setDeleteFormButtonState","setSortFormButtonState","addEventListener","event","target","closest","addForm","deleteForm","moveUpButton","moveDownButton","moveFormUp","moveFormDown","totalForms","maxForms","formFragment","formTemplate","content","cloneNode","children","appendChild","updateFormIndexes","updateFormOrder","updateButtonsState","minForms","remove","formIndex","previousForm","after","formCount","nextForm","before","skip","index","setFormIndex","_setElementIndex","element","regex","RegExp","replacement","htmlFor","replace","name","setFormOrder","disableAdd","disableDelete","direction","formsetToggle","gsap","ScrollToPlugin","Formset","super","_isTransitioning","finalState","classList","toggle","emitters","animationOptions","onComplete","$","trigger","duration","opacity","clearProps","height","_swapForms","form1","form2","initialRect1","getBoundingClientRect","initialRect2","currentPageOffset","window","pageYOffset","documentElement","scrollTop","scrollTo","swappedRect1","swappedRect2","style","transformStyle","transform","top","onSwapCallback","y","tl","TimelineLite","to","finalPageOffset","preventScroll","innerHeight","Math","max","caption","innerHTML","deleteFormButton","formsetForm","formId","setAttribute","clientHeight","select2_changeform","Select2Widget","width","allowClear","observe","initAll","formsets","InlineFormset","formUtils"],"sourceRoot":""}