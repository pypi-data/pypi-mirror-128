# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0+0.3.1
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class DataFeedsConnectionUser(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'email': 'str',
        'salt_edge_partners_consented': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'email': 'email',
        'salt_edge_partners_consented': 'salt_edge_partners_consented'
    }

    def __init__(self, id=None, email=None, salt_edge_partners_consented=None, local_vars_configuration=None):  # noqa: E501
        """DataFeedsConnectionUser - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._email = None
        self._salt_edge_partners_consented = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if email is not None:
            self.email = email
        if salt_edge_partners_consented is not None:
            self.salt_edge_partners_consented = salt_edge_partners_consented

    @property
    def id(self):
        """Gets the id of this DataFeedsConnectionUser.  # noqa: E501


        :return: The id of this DataFeedsConnectionUser.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataFeedsConnectionUser.


        :param id: The id of this DataFeedsConnectionUser.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def email(self):
        """Gets the email of this DataFeedsConnectionUser.  # noqa: E501


        :return: The email of this DataFeedsConnectionUser.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DataFeedsConnectionUser.


        :param email: The email of this DataFeedsConnectionUser.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def salt_edge_partners_consented(self):
        """Gets the salt_edge_partners_consented of this DataFeedsConnectionUser.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The salt_edge_partners_consented of this DataFeedsConnectionUser.  # noqa: E501
        :rtype: bool
        """
        return self._salt_edge_partners_consented

    @salt_edge_partners_consented.setter
    def salt_edge_partners_consented(self, salt_edge_partners_consented):
        """Sets the salt_edge_partners_consented of this DataFeedsConnectionUser.

        UNKNOWN  # noqa: E501

        :param salt_edge_partners_consented: The salt_edge_partners_consented of this DataFeedsConnectionUser.  # noqa: E501
        :type: bool
        """

        self._salt_edge_partners_consented = salt_edge_partners_consented

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFeedsConnectionUser):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataFeedsConnectionUser):
            return True

        return self.to_dict() != other.to_dict()
