# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class DataConnection(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'status': 'str',
        'status_changed_at': 'datetime',
        'status_changed_at_hash': 'str',
        'error_detail': 'str',
        'user_interaction_likely': 'bool',
        'categorisation': 'bool',
        'automatic_syncing': 'bool',
        'automatic_syncing_overridden': 'bool',
        'pending_transactions': 'bool',
        'login_form': 'Form',
        'interactive_login_form': 'Form',
        'external_authorisation_url': 'str',
        'external_syncing_url': 'str',
        'last_successful_sync_at': 'datetime',
        'next_sync_possible_at': 'datetime',
        'next_background_sync_at': 'datetime',
        'accounts_updated_at': 'datetime',
        'soft_locked_until': 'datetime',
        'user': 'DataConnectionUser',
        'provider': 'Provider',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'status': 'status',
        'status_changed_at': 'status_changed_at',
        'status_changed_at_hash': 'status_changed_at_hash',
        'error_detail': 'error_detail',
        'user_interaction_likely': 'user_interaction_likely',
        'categorisation': 'categorisation',
        'automatic_syncing': 'automatic_syncing',
        'automatic_syncing_overridden': 'automatic_syncing_overridden',
        'pending_transactions': 'pending_transactions',
        'login_form': 'login_form',
        'interactive_login_form': 'interactive_login_form',
        'external_authorisation_url': 'external_authorisation_url',
        'external_syncing_url': 'external_syncing_url',
        'last_successful_sync_at': 'last_successful_sync_at',
        'next_sync_possible_at': 'next_sync_possible_at',
        'next_background_sync_at': 'next_background_sync_at',
        'accounts_updated_at': 'accounts_updated_at',
        'soft_locked_until': 'soft_locked_until',
        'user': 'user',
        'provider': 'provider',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, status=None, status_changed_at=None, status_changed_at_hash=None, error_detail=None, user_interaction_likely=None, categorisation=None, automatic_syncing=None, automatic_syncing_overridden=None, pending_transactions=None, login_form=None, interactive_login_form=None, external_authorisation_url=None, external_syncing_url=None, last_successful_sync_at=None, next_sync_possible_at=None, next_background_sync_at=None, accounts_updated_at=None, soft_locked_until=None, user=None, provider=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """DataConnection - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._status = None
        self._status_changed_at = None
        self._status_changed_at_hash = None
        self._error_detail = None
        self._user_interaction_likely = None
        self._categorisation = None
        self._automatic_syncing = None
        self._automatic_syncing_overridden = None
        self._pending_transactions = None
        self._login_form = None
        self._interactive_login_form = None
        self._external_authorisation_url = None
        self._external_syncing_url = None
        self._last_successful_sync_at = None
        self._next_sync_possible_at = None
        self._next_background_sync_at = None
        self._accounts_updated_at = None
        self._soft_locked_until = None
        self._user = None
        self._provider = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        self.name = name
        if status is not None:
            self.status = status
        if status_changed_at is not None:
            self.status_changed_at = status_changed_at
        if status_changed_at_hash is not None:
            self.status_changed_at_hash = status_changed_at_hash
        self.error_detail = error_detail
        if user_interaction_likely is not None:
            self.user_interaction_likely = user_interaction_likely
        if categorisation is not None:
            self.categorisation = categorisation
        if automatic_syncing is not None:
            self.automatic_syncing = automatic_syncing
        if automatic_syncing_overridden is not None:
            self.automatic_syncing_overridden = automatic_syncing_overridden
        if pending_transactions is not None:
            self.pending_transactions = pending_transactions
        self.login_form = login_form
        self.interactive_login_form = interactive_login_form
        self.external_authorisation_url = external_authorisation_url
        self.external_syncing_url = external_syncing_url
        self.last_successful_sync_at = last_successful_sync_at
        self.next_sync_possible_at = next_sync_possible_at
        self.next_background_sync_at = next_background_sync_at
        self.accounts_updated_at = accounts_updated_at
        self.soft_locked_until = soft_locked_until
        if user is not None:
            self.user = user
        if provider is not None:
            self.provider = provider
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this DataConnection.  # noqa: E501

        The unique identifier of the data connection  # noqa: E501

        :return: The id of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataConnection.

        The unique identifier of the data connection  # noqa: E501

        :param id: The id of this DataConnection.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataConnection.  # noqa: E501

        User-defined nickname for the data connection  # noqa: E501

        :return: The name of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataConnection.

        User-defined nickname for the data connection  # noqa: E501

        :param name: The name of this DataConnection.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def status(self):
        """Gets the status of this DataConnection.  # noqa: E501

        Sync/auth status of the data connection  # noqa: E501

        :return: The status of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataConnection.

        Sync/auth status of the data connection  # noqa: E501

        :param status: The status of this DataConnection.  # noqa: E501
        :type: str
        """
        allowed_values = ["synced", "unsynced", "unauthorised", "authorisation_failed"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and status not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def status_changed_at(self):
        """Gets the status_changed_at of this DataConnection.  # noqa: E501

        When the data connection's status last changed  # noqa: E501

        :return: The status_changed_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._status_changed_at

    @status_changed_at.setter
    def status_changed_at(self, status_changed_at):
        """Sets the status_changed_at of this DataConnection.

        When the data connection's status last changed  # noqa: E501

        :param status_changed_at: The status_changed_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._status_changed_at = status_changed_at

    @property
    def status_changed_at_hash(self):
        """Gets the status_changed_at_hash of this DataConnection.  # noqa: E501

        MD5 hash of the status_changed_at field  # noqa: E501

        :return: The status_changed_at_hash of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._status_changed_at_hash

    @status_changed_at_hash.setter
    def status_changed_at_hash(self, status_changed_at_hash):
        """Sets the status_changed_at_hash of this DataConnection.

        MD5 hash of the status_changed_at field  # noqa: E501

        :param status_changed_at_hash: The status_changed_at_hash of this DataConnection.  # noqa: E501
        :type: str
        """

        self._status_changed_at_hash = status_changed_at_hash

    @property
    def error_detail(self):
        """Gets the error_detail of this DataConnection.  # noqa: E501

        ?  # noqa: E501

        :return: The error_detail of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._error_detail

    @error_detail.setter
    def error_detail(self, error_detail):
        """Sets the error_detail of this DataConnection.

        ?  # noqa: E501

        :param error_detail: The error_detail of this DataConnection.  # noqa: E501
        :type: str
        """

        self._error_detail = error_detail

    @property
    def user_interaction_likely(self):
        """Gets the user_interaction_likely of this DataConnection.  # noqa: E501

        GUESSING: Whether syncing this data connection is likely to require user interaction  # noqa: E501

        :return: The user_interaction_likely of this DataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._user_interaction_likely

    @user_interaction_likely.setter
    def user_interaction_likely(self, user_interaction_likely):
        """Sets the user_interaction_likely of this DataConnection.

        GUESSING: Whether syncing this data connection is likely to require user interaction  # noqa: E501

        :param user_interaction_likely: The user_interaction_likely of this DataConnection.  # noqa: E501
        :type: bool
        """

        self._user_interaction_likely = user_interaction_likely

    @property
    def categorisation(self):
        """Gets the categorisation of this DataConnection.  # noqa: E501

        Whether automatic categorisation of transactions is enabled  # noqa: E501

        :return: The categorisation of this DataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._categorisation

    @categorisation.setter
    def categorisation(self, categorisation):
        """Sets the categorisation of this DataConnection.

        Whether automatic categorisation of transactions is enabled  # noqa: E501

        :param categorisation: The categorisation of this DataConnection.  # noqa: E501
        :type: bool
        """

        self._categorisation = categorisation

    @property
    def automatic_syncing(self):
        """Gets the automatic_syncing of this DataConnection.  # noqa: E501

        Whether the data connection will automatically sync when logged in to PocketSmith  # noqa: E501

        :return: The automatic_syncing of this DataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_syncing

    @automatic_syncing.setter
    def automatic_syncing(self, automatic_syncing):
        """Sets the automatic_syncing of this DataConnection.

        Whether the data connection will automatically sync when logged in to PocketSmith  # noqa: E501

        :param automatic_syncing: The automatic_syncing of this DataConnection.  # noqa: E501
        :type: bool
        """

        self._automatic_syncing = automatic_syncing

    @property
    def automatic_syncing_overridden(self):
        """Gets the automatic_syncing_overridden of this DataConnection.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The automatic_syncing_overridden of this DataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._automatic_syncing_overridden

    @automatic_syncing_overridden.setter
    def automatic_syncing_overridden(self, automatic_syncing_overridden):
        """Sets the automatic_syncing_overridden of this DataConnection.

        UNKNOWN  # noqa: E501

        :param automatic_syncing_overridden: The automatic_syncing_overridden of this DataConnection.  # noqa: E501
        :type: bool
        """

        self._automatic_syncing_overridden = automatic_syncing_overridden

    @property
    def pending_transactions(self):
        """Gets the pending_transactions of this DataConnection.  # noqa: E501

        Whether to receive pending transactions from this data connection, if available  # noqa: E501

        :return: The pending_transactions of this DataConnection.  # noqa: E501
        :rtype: bool
        """
        return self._pending_transactions

    @pending_transactions.setter
    def pending_transactions(self, pending_transactions):
        """Sets the pending_transactions of this DataConnection.

        Whether to receive pending transactions from this data connection, if available  # noqa: E501

        :param pending_transactions: The pending_transactions of this DataConnection.  # noqa: E501
        :type: bool
        """

        self._pending_transactions = pending_transactions

    @property
    def login_form(self):
        """Gets the login_form of this DataConnection.  # noqa: E501


        :return: The login_form of this DataConnection.  # noqa: E501
        :rtype: Form
        """
        return self._login_form

    @login_form.setter
    def login_form(self, login_form):
        """Sets the login_form of this DataConnection.


        :param login_form: The login_form of this DataConnection.  # noqa: E501
        :type: Form
        """

        self._login_form = login_form

    @property
    def interactive_login_form(self):
        """Gets the interactive_login_form of this DataConnection.  # noqa: E501


        :return: The interactive_login_form of this DataConnection.  # noqa: E501
        :rtype: Form
        """
        return self._interactive_login_form

    @interactive_login_form.setter
    def interactive_login_form(self, interactive_login_form):
        """Sets the interactive_login_form of this DataConnection.


        :param interactive_login_form: The interactive_login_form of this DataConnection.  # noqa: E501
        :type: Form
        """

        self._interactive_login_form = interactive_login_form

    @property
    def external_authorisation_url(self):
        """Gets the external_authorisation_url of this DataConnection.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The external_authorisation_url of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._external_authorisation_url

    @external_authorisation_url.setter
    def external_authorisation_url(self, external_authorisation_url):
        """Sets the external_authorisation_url of this DataConnection.

        UNKNOWN  # noqa: E501

        :param external_authorisation_url: The external_authorisation_url of this DataConnection.  # noqa: E501
        :type: str
        """

        self._external_authorisation_url = external_authorisation_url

    @property
    def external_syncing_url(self):
        """Gets the external_syncing_url of this DataConnection.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The external_syncing_url of this DataConnection.  # noqa: E501
        :rtype: str
        """
        return self._external_syncing_url

    @external_syncing_url.setter
    def external_syncing_url(self, external_syncing_url):
        """Sets the external_syncing_url of this DataConnection.

        UNKNOWN  # noqa: E501

        :param external_syncing_url: The external_syncing_url of this DataConnection.  # noqa: E501
        :type: str
        """

        self._external_syncing_url = external_syncing_url

    @property
    def last_successful_sync_at(self):
        """Gets the last_successful_sync_at of this DataConnection.  # noqa: E501

        When the data connection last synced successfully  # noqa: E501

        :return: The last_successful_sync_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._last_successful_sync_at

    @last_successful_sync_at.setter
    def last_successful_sync_at(self, last_successful_sync_at):
        """Sets the last_successful_sync_at of this DataConnection.

        When the data connection last synced successfully  # noqa: E501

        :param last_successful_sync_at: The last_successful_sync_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._last_successful_sync_at = last_successful_sync_at

    @property
    def next_sync_possible_at(self):
        """Gets the next_sync_possible_at of this DataConnection.  # noqa: E501

        When the data connection is next allowed to sync at  # noqa: E501

        :return: The next_sync_possible_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._next_sync_possible_at

    @next_sync_possible_at.setter
    def next_sync_possible_at(self, next_sync_possible_at):
        """Sets the next_sync_possible_at of this DataConnection.

        When the data connection is next allowed to sync at  # noqa: E501

        :param next_sync_possible_at: The next_sync_possible_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._next_sync_possible_at = next_sync_possible_at

    @property
    def next_background_sync_at(self):
        """Gets the next_background_sync_at of this DataConnection.  # noqa: E501

        When the data connection is scheduled to sync in the background next  # noqa: E501

        :return: The next_background_sync_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._next_background_sync_at

    @next_background_sync_at.setter
    def next_background_sync_at(self, next_background_sync_at):
        """Sets the next_background_sync_at of this DataConnection.

        When the data connection is scheduled to sync in the background next  # noqa: E501

        :param next_background_sync_at: The next_background_sync_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._next_background_sync_at = next_background_sync_at

    @property
    def accounts_updated_at(self):
        """Gets the accounts_updated_at of this DataConnection.  # noqa: E501

        When the accounts tied to the data connection were last updated  # noqa: E501

        :return: The accounts_updated_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._accounts_updated_at

    @accounts_updated_at.setter
    def accounts_updated_at(self, accounts_updated_at):
        """Sets the accounts_updated_at of this DataConnection.

        When the accounts tied to the data connection were last updated  # noqa: E501

        :param accounts_updated_at: The accounts_updated_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._accounts_updated_at = accounts_updated_at

    @property
    def soft_locked_until(self):
        """Gets the soft_locked_until of this DataConnection.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The soft_locked_until of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._soft_locked_until

    @soft_locked_until.setter
    def soft_locked_until(self, soft_locked_until):
        """Sets the soft_locked_until of this DataConnection.

        UNKNOWN  # noqa: E501

        :param soft_locked_until: The soft_locked_until of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._soft_locked_until = soft_locked_until

    @property
    def user(self):
        """Gets the user of this DataConnection.  # noqa: E501


        :return: The user of this DataConnection.  # noqa: E501
        :rtype: DataConnectionUser
        """
        return self._user

    @user.setter
    def user(self, user):
        """Sets the user of this DataConnection.


        :param user: The user of this DataConnection.  # noqa: E501
        :type: DataConnectionUser
        """

        self._user = user

    @property
    def provider(self):
        """Gets the provider of this DataConnection.  # noqa: E501


        :return: The provider of this DataConnection.  # noqa: E501
        :rtype: Provider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DataConnection.


        :param provider: The provider of this DataConnection.  # noqa: E501
        :type: Provider
        """

        self._provider = provider

    @property
    def created_at(self):
        """Gets the created_at of this DataConnection.  # noqa: E501

        When the data connection was created  # noqa: E501

        :return: The created_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataConnection.

        When the data connection was created  # noqa: E501

        :param created_at: The created_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataConnection.  # noqa: E501

        When the data connection was last updated  # noqa: E501

        :return: The updated_at of this DataConnection.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataConnection.

        When the data connection was last updated  # noqa: E501

        :param updated_at: The updated_at of this DataConnection.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataConnection):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataConnection):
            return True

        return self.to_dict() != other.to_dict()
