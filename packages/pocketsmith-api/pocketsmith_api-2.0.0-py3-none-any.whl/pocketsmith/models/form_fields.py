# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class FormFields(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'encrypted': 'bool',
        'value': 'str',
        'image': 'str',
        'placeholder': 'str',
        'editable': 'bool',
        'optional': 'bool',
        'max_length': 'int',
        'prefix': 'str',
        'suffix': 'str',
        'options': 'list[FormOptions]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'encrypted': 'encrypted',
        'value': 'value',
        'image': 'image',
        'placeholder': 'placeholder',
        'editable': 'editable',
        'optional': 'optional',
        'max_length': 'max_length',
        'prefix': 'prefix',
        'suffix': 'suffix',
        'options': 'options'
    }

    def __init__(self, id=None, name=None, type=None, encrypted=None, value=None, image=None, placeholder=None, editable=None, optional=None, max_length=None, prefix=None, suffix=None, options=None, local_vars_configuration=None):  # noqa: E501
        """FormFields - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._type = None
        self._encrypted = None
        self._value = None
        self._image = None
        self._placeholder = None
        self._editable = None
        self._optional = None
        self._max_length = None
        self._prefix = None
        self._suffix = None
        self._options = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type
        if encrypted is not None:
            self.encrypted = encrypted
        self.value = value
        self.image = image
        self.placeholder = placeholder
        if editable is not None:
            self.editable = editable
        if optional is not None:
            self.optional = optional
        self.max_length = max_length
        self.prefix = prefix
        self.suffix = suffix
        if options is not None:
            self.options = options

    @property
    def id(self):
        """Gets the id of this FormFields.  # noqa: E501

        Index of the field within the whole form  # noqa: E501

        :return: The id of this FormFields.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this FormFields.

        Index of the field within the whole form  # noqa: E501

        :param id: The id of this FormFields.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this FormFields.  # noqa: E501

        Unique name of the form field  # noqa: E501

        :return: The name of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this FormFields.

        Unique name of the form field  # noqa: E501

        :param name: The name of this FormFields.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this FormFields.  # noqa: E501

        Display type of the form field  # noqa: E501

        :return: The type of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this FormFields.

        Display type of the form field  # noqa: E501

        :param type: The type of this FormFields.  # noqa: E501
        :type: str
        """
        allowed_values = ["text", "password", "option", "radio", "image"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def encrypted(self):
        """Gets the encrypted of this FormFields.  # noqa: E501

        Whether the value of the form field should be encrypted with the form's `public_key`  # noqa: E501

        :return: The encrypted of this FormFields.  # noqa: E501
        :rtype: bool
        """
        return self._encrypted

    @encrypted.setter
    def encrypted(self, encrypted):
        """Sets the encrypted of this FormFields.

        Whether the value of the form field should be encrypted with the form's `public_key`  # noqa: E501

        :param encrypted: The encrypted of this FormFields.  # noqa: E501
        :type: bool
        """

        self._encrypted = encrypted

    @property
    def value(self):
        """Gets the value of this FormFields.  # noqa: E501

        Value of the field, possibly encrypted  # noqa: E501

        :return: The value of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this FormFields.

        Value of the field, possibly encrypted  # noqa: E501

        :param value: The value of this FormFields.  # noqa: E501
        :type: str
        """

        self._value = value

    @property
    def image(self):
        """Gets the image of this FormFields.  # noqa: E501

        Base64-encoded JPEG image to display by the field  # noqa: E501

        :return: The image of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image):
        """Sets the image of this FormFields.

        Base64-encoded JPEG image to display by the field  # noqa: E501

        :param image: The image of this FormFields.  # noqa: E501
        :type: str
        """

        self._image = image

    @property
    def placeholder(self):
        """Gets the placeholder of this FormFields.  # noqa: E501

        Placeholder text to display in the field  # noqa: E501

        :return: The placeholder of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._placeholder

    @placeholder.setter
    def placeholder(self, placeholder):
        """Sets the placeholder of this FormFields.

        Placeholder text to display in the field  # noqa: E501

        :param placeholder: The placeholder of this FormFields.  # noqa: E501
        :type: str
        """

        self._placeholder = placeholder

    @property
    def editable(self):
        """Gets the editable of this FormFields.  # noqa: E501

        Whether the user is allowed to edit the value of the field  # noqa: E501

        :return: The editable of this FormFields.  # noqa: E501
        :rtype: bool
        """
        return self._editable

    @editable.setter
    def editable(self, editable):
        """Sets the editable of this FormFields.

        Whether the user is allowed to edit the value of the field  # noqa: E501

        :param editable: The editable of this FormFields.  # noqa: E501
        :type: bool
        """

        self._editable = editable

    @property
    def optional(self):
        """Gets the optional of this FormFields.  # noqa: E501

        Whether the form can be submitted without providing a value to the field  # noqa: E501

        :return: The optional of this FormFields.  # noqa: E501
        :rtype: bool
        """
        return self._optional

    @optional.setter
    def optional(self, optional):
        """Sets the optional of this FormFields.

        Whether the form can be submitted without providing a value to the field  # noqa: E501

        :param optional: The optional of this FormFields.  # noqa: E501
        :type: bool
        """

        self._optional = optional

    @property
    def max_length(self):
        """Gets the max_length of this FormFields.  # noqa: E501

        Maximum number of characters allowed in the field value  # noqa: E501

        :return: The max_length of this FormFields.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this FormFields.

        Maximum number of characters allowed in the field value  # noqa: E501

        :param max_length: The max_length of this FormFields.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def prefix(self):
        """Gets the prefix of this FormFields.  # noqa: E501

        Text to display just before the form field  # noqa: E501

        :return: The prefix of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._prefix

    @prefix.setter
    def prefix(self, prefix):
        """Sets the prefix of this FormFields.

        Text to display just before the form field  # noqa: E501

        :param prefix: The prefix of this FormFields.  # noqa: E501
        :type: str
        """

        self._prefix = prefix

    @property
    def suffix(self):
        """Gets the suffix of this FormFields.  # noqa: E501

        Text to display just after the form field  # noqa: E501

        :return: The suffix of this FormFields.  # noqa: E501
        :rtype: str
        """
        return self._suffix

    @suffix.setter
    def suffix(self, suffix):
        """Sets the suffix of this FormFields.

        Text to display just after the form field  # noqa: E501

        :param suffix: The suffix of this FormFields.  # noqa: E501
        :type: str
        """

        self._suffix = suffix

    @property
    def options(self):
        """Gets the options of this FormFields.  # noqa: E501

        For fields with type=option, the options to be displayed in the dropdown  # noqa: E501

        :return: The options of this FormFields.  # noqa: E501
        :rtype: list[FormOptions]
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this FormFields.

        For fields with type=option, the options to be displayed in the dropdown  # noqa: E501

        :param options: The options of this FormFields.  # noqa: E501
        :type: list[FormOptions]
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FormFields):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, FormFields):
            return True

        return self.to_dict() != other.to_dict()
