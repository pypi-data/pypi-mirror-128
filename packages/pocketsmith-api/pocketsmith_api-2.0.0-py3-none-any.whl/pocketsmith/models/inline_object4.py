# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class InlineObject4(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'automatic_syncing': 'AutomaticSyncing',
        'categorisation': 'Categorisation',
        'name': 'Name',
        'pending_transactions': 'PendingTransactions',
        'login_form': 'LoginForm',
        'interactive_login_form': 'InteractiveLoginForm'
    }

    attribute_map = {
        'automatic_syncing': 'automatic_syncing',
        'categorisation': 'categorisation',
        'name': 'name',
        'pending_transactions': 'pending_transactions',
        'login_form': 'login_form',
        'interactive_login_form': 'interactive_login_form'
    }

    def __init__(self, automatic_syncing=None, categorisation=None, name=None, pending_transactions=None, login_form=None, interactive_login_form=None, local_vars_configuration=None):  # noqa: E501
        """InlineObject4 - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._automatic_syncing = None
        self._categorisation = None
        self._name = None
        self._pending_transactions = None
        self._login_form = None
        self._interactive_login_form = None
        self.discriminator = None

        if automatic_syncing is not None:
            self.automatic_syncing = automatic_syncing
        if categorisation is not None:
            self.categorisation = categorisation
        if name is not None:
            self.name = name
        if pending_transactions is not None:
            self.pending_transactions = pending_transactions
        if login_form is not None:
            self.login_form = login_form
        if interactive_login_form is not None:
            self.interactive_login_form = interactive_login_form

    @property
    def automatic_syncing(self):
        """Gets the automatic_syncing of this InlineObject4.  # noqa: E501


        :return: The automatic_syncing of this InlineObject4.  # noqa: E501
        :rtype: AutomaticSyncing
        """
        return self._automatic_syncing

    @automatic_syncing.setter
    def automatic_syncing(self, automatic_syncing):
        """Sets the automatic_syncing of this InlineObject4.


        :param automatic_syncing: The automatic_syncing of this InlineObject4.  # noqa: E501
        :type: AutomaticSyncing
        """

        self._automatic_syncing = automatic_syncing

    @property
    def categorisation(self):
        """Gets the categorisation of this InlineObject4.  # noqa: E501


        :return: The categorisation of this InlineObject4.  # noqa: E501
        :rtype: Categorisation
        """
        return self._categorisation

    @categorisation.setter
    def categorisation(self, categorisation):
        """Sets the categorisation of this InlineObject4.


        :param categorisation: The categorisation of this InlineObject4.  # noqa: E501
        :type: Categorisation
        """

        self._categorisation = categorisation

    @property
    def name(self):
        """Gets the name of this InlineObject4.  # noqa: E501


        :return: The name of this InlineObject4.  # noqa: E501
        :rtype: Name
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineObject4.


        :param name: The name of this InlineObject4.  # noqa: E501
        :type: Name
        """

        self._name = name

    @property
    def pending_transactions(self):
        """Gets the pending_transactions of this InlineObject4.  # noqa: E501


        :return: The pending_transactions of this InlineObject4.  # noqa: E501
        :rtype: PendingTransactions
        """
        return self._pending_transactions

    @pending_transactions.setter
    def pending_transactions(self, pending_transactions):
        """Sets the pending_transactions of this InlineObject4.


        :param pending_transactions: The pending_transactions of this InlineObject4.  # noqa: E501
        :type: PendingTransactions
        """

        self._pending_transactions = pending_transactions

    @property
    def login_form(self):
        """Gets the login_form of this InlineObject4.  # noqa: E501


        :return: The login_form of this InlineObject4.  # noqa: E501
        :rtype: LoginForm
        """
        return self._login_form

    @login_form.setter
    def login_form(self, login_form):
        """Sets the login_form of this InlineObject4.


        :param login_form: The login_form of this InlineObject4.  # noqa: E501
        :type: LoginForm
        """

        self._login_form = login_form

    @property
    def interactive_login_form(self):
        """Gets the interactive_login_form of this InlineObject4.  # noqa: E501


        :return: The interactive_login_form of this InlineObject4.  # noqa: E501
        :rtype: InteractiveLoginForm
        """
        return self._interactive_login_form

    @interactive_login_form.setter
    def interactive_login_form(self, interactive_login_form):
        """Sets the interactive_login_form of this InlineObject4.


        :param interactive_login_form: The interactive_login_form of this InlineObject4.  # noqa: E501
        :type: InteractiveLoginForm
        """

        self._interactive_login_form = interactive_login_form

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineObject4):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, InlineObject4):
            return True

        return self.to_dict() != other.to_dict()
