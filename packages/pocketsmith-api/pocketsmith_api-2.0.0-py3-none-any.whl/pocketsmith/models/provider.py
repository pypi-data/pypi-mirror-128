# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class Provider(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'ascii_name': 'str',
        'backend': 'str',
        'country': 'str',
        'authorisation_method': 'str',
        'external_authorisation': 'bool',
        'syncing_method': 'str',
        'external_syncing': 'bool',
        'available': 'bool',
        'brand_sensitive': 'bool',
        'experimental': 'bool',
        'enabled': 'bool',
        'home_url': 'str',
        'login_url': 'str',
        'default_logo_url': 'str',
        'custom_logo_url': 'str',
        'provider_notices': 'list[str]',
        'backend_requires_consent': 'bool',
        'backend_consent_text': 'str',
        'backend_consent_html': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'ascii_name': 'ascii_name',
        'backend': 'backend',
        'country': 'country',
        'authorisation_method': 'authorisation_method',
        'external_authorisation': 'external_authorisation',
        'syncing_method': 'syncing_method',
        'external_syncing': 'external_syncing',
        'available': 'available',
        'brand_sensitive': 'brand_sensitive',
        'experimental': 'experimental',
        'enabled': 'enabled',
        'home_url': 'home_url',
        'login_url': 'login_url',
        'default_logo_url': 'default_logo_url',
        'custom_logo_url': 'custom_logo_url',
        'provider_notices': 'provider_notices',
        'backend_requires_consent': 'backend_requires_consent',
        'backend_consent_text': 'backend_consent_text',
        'backend_consent_html': 'backend_consent_html',
        'created_at': 'created_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, id=None, name=None, ascii_name=None, backend=None, country=None, authorisation_method=None, external_authorisation=None, syncing_method=None, external_syncing=None, available=None, brand_sensitive=None, experimental=None, enabled=None, home_url=None, login_url=None, default_logo_url=None, custom_logo_url=None, provider_notices=None, backend_requires_consent=None, backend_consent_text=None, backend_consent_html=None, created_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """Provider - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._ascii_name = None
        self._backend = None
        self._country = None
        self._authorisation_method = None
        self._external_authorisation = None
        self._syncing_method = None
        self._external_syncing = None
        self._available = None
        self._brand_sensitive = None
        self._experimental = None
        self._enabled = None
        self._home_url = None
        self._login_url = None
        self._default_logo_url = None
        self._custom_logo_url = None
        self._provider_notices = None
        self._backend_requires_consent = None
        self._backend_consent_text = None
        self._backend_consent_html = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if ascii_name is not None:
            self.ascii_name = ascii_name
        if backend is not None:
            self.backend = backend
        if country is not None:
            self.country = country
        if authorisation_method is not None:
            self.authorisation_method = authorisation_method
        if external_authorisation is not None:
            self.external_authorisation = external_authorisation
        if syncing_method is not None:
            self.syncing_method = syncing_method
        if external_syncing is not None:
            self.external_syncing = external_syncing
        if available is not None:
            self.available = available
        if brand_sensitive is not None:
            self.brand_sensitive = brand_sensitive
        if experimental is not None:
            self.experimental = experimental
        if enabled is not None:
            self.enabled = enabled
        if home_url is not None:
            self.home_url = home_url
        if login_url is not None:
            self.login_url = login_url
        if default_logo_url is not None:
            self.default_logo_url = default_logo_url
        if custom_logo_url is not None:
            self.custom_logo_url = custom_logo_url
        if provider_notices is not None:
            self.provider_notices = provider_notices
        if backend_requires_consent is not None:
            self.backend_requires_consent = backend_requires_consent
        self.backend_consent_text = backend_consent_text
        self.backend_consent_html = backend_consent_html
        if created_at is not None:
            self.created_at = created_at
        self.updated_at = updated_at

    @property
    def id(self):
        """Gets the id of this Provider.  # noqa: E501

        The unique identifier of the data connection feed provider  # noqa: E501

        :return: The id of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Provider.

        The unique identifier of the data connection feed provider  # noqa: E501

        :param id: The id of this Provider.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this Provider.  # noqa: E501

        Name of the data connection feed provider  # noqa: E501

        :return: The name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Provider.

        Name of the data connection feed provider  # noqa: E501

        :param name: The name of this Provider.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def ascii_name(self):
        """Gets the ascii_name of this Provider.  # noqa: E501

        ASCII version of the data connection feed provider name  # noqa: E501

        :return: The ascii_name of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._ascii_name

    @ascii_name.setter
    def ascii_name(self, ascii_name):
        """Sets the ascii_name of this Provider.

        ASCII version of the data connection feed provider name  # noqa: E501

        :param ascii_name: The ascii_name of this Provider.  # noqa: E501
        :type: str
        """

        self._ascii_name = ascii_name

    @property
    def backend(self):
        """Gets the backend of this Provider.  # noqa: E501

        Data connection feed provider  # noqa: E501

        :return: The backend of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._backend

    @backend.setter
    def backend(self, backend):
        """Sets the backend of this Provider.

        Data connection feed provider  # noqa: E501

        :param backend: The backend of this Provider.  # noqa: E501
        :type: str
        """

        self._backend = backend

    @property
    def country(self):
        """Gets the country of this Provider.  # noqa: E501

        Country of origin of the provider  # noqa: E501

        :return: The country of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this Provider.

        Country of origin of the provider  # noqa: E501

        :param country: The country of this Provider.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def authorisation_method(self):
        """Gets the authorisation_method of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The authorisation_method of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._authorisation_method

    @authorisation_method.setter
    def authorisation_method(self, authorisation_method):
        """Sets the authorisation_method of this Provider.

        UNKNOWN  # noqa: E501

        :param authorisation_method: The authorisation_method of this Provider.  # noqa: E501
        :type: str
        """

        self._authorisation_method = authorisation_method

    @property
    def external_authorisation(self):
        """Gets the external_authorisation of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The external_authorisation of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._external_authorisation

    @external_authorisation.setter
    def external_authorisation(self, external_authorisation):
        """Sets the external_authorisation of this Provider.

        UNKNOWN  # noqa: E501

        :param external_authorisation: The external_authorisation of this Provider.  # noqa: E501
        :type: bool
        """

        self._external_authorisation = external_authorisation

    @property
    def syncing_method(self):
        """Gets the syncing_method of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The syncing_method of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._syncing_method

    @syncing_method.setter
    def syncing_method(self, syncing_method):
        """Sets the syncing_method of this Provider.

        UNKNOWN  # noqa: E501

        :param syncing_method: The syncing_method of this Provider.  # noqa: E501
        :type: str
        """

        self._syncing_method = syncing_method

    @property
    def external_syncing(self):
        """Gets the external_syncing of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The external_syncing of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._external_syncing

    @external_syncing.setter
    def external_syncing(self, external_syncing):
        """Sets the external_syncing of this Provider.

        UNKNOWN  # noqa: E501

        :param external_syncing: The external_syncing of this Provider.  # noqa: E501
        :type: bool
        """

        self._external_syncing = external_syncing

    @property
    def available(self):
        """Gets the available of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The available of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._available

    @available.setter
    def available(self, available):
        """Sets the available of this Provider.

        UNKNOWN  # noqa: E501

        :param available: The available of this Provider.  # noqa: E501
        :type: bool
        """

        self._available = available

    @property
    def brand_sensitive(self):
        """Gets the brand_sensitive of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The brand_sensitive of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._brand_sensitive

    @brand_sensitive.setter
    def brand_sensitive(self, brand_sensitive):
        """Sets the brand_sensitive of this Provider.

        UNKNOWN  # noqa: E501

        :param brand_sensitive: The brand_sensitive of this Provider.  # noqa: E501
        :type: bool
        """

        self._brand_sensitive = brand_sensitive

    @property
    def experimental(self):
        """Gets the experimental of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The experimental of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._experimental

    @experimental.setter
    def experimental(self, experimental):
        """Sets the experimental of this Provider.

        UNKNOWN  # noqa: E501

        :param experimental: The experimental of this Provider.  # noqa: E501
        :type: bool
        """

        self._experimental = experimental

    @property
    def enabled(self):
        """Gets the enabled of this Provider.  # noqa: E501

        Whether the provider can be used  # noqa: E501

        :return: The enabled of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this Provider.

        Whether the provider can be used  # noqa: E501

        :param enabled: The enabled of this Provider.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def home_url(self):
        """Gets the home_url of this Provider.  # noqa: E501

        Link to homepage of provider  # noqa: E501

        :return: The home_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._home_url

    @home_url.setter
    def home_url(self, home_url):
        """Sets the home_url of this Provider.

        Link to homepage of provider  # noqa: E501

        :param home_url: The home_url of this Provider.  # noqa: E501
        :type: str
        """

        self._home_url = home_url

    @property
    def login_url(self):
        """Gets the login_url of this Provider.  # noqa: E501

        Link to login page of provider  # noqa: E501

        :return: The login_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._login_url

    @login_url.setter
    def login_url(self, login_url):
        """Sets the login_url of this Provider.

        Link to login page of provider  # noqa: E501

        :param login_url: The login_url of this Provider.  # noqa: E501
        :type: str
        """

        self._login_url = login_url

    @property
    def default_logo_url(self):
        """Gets the default_logo_url of this Provider.  # noqa: E501

        Default URL to provider's logo  # noqa: E501

        :return: The default_logo_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._default_logo_url

    @default_logo_url.setter
    def default_logo_url(self, default_logo_url):
        """Sets the default_logo_url of this Provider.

        Default URL to provider's logo  # noqa: E501

        :param default_logo_url: The default_logo_url of this Provider.  # noqa: E501
        :type: str
        """

        self._default_logo_url = default_logo_url

    @property
    def custom_logo_url(self):
        """Gets the custom_logo_url of this Provider.  # noqa: E501

        URL to provider's logo to override the default  # noqa: E501

        :return: The custom_logo_url of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._custom_logo_url

    @custom_logo_url.setter
    def custom_logo_url(self, custom_logo_url):
        """Sets the custom_logo_url of this Provider.

        URL to provider's logo to override the default  # noqa: E501

        :param custom_logo_url: The custom_logo_url of this Provider.  # noqa: E501
        :type: str
        """

        self._custom_logo_url = custom_logo_url

    @property
    def provider_notices(self):
        """Gets the provider_notices of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The provider_notices of this Provider.  # noqa: E501
        :rtype: list[str]
        """
        return self._provider_notices

    @provider_notices.setter
    def provider_notices(self, provider_notices):
        """Sets the provider_notices of this Provider.

        UNKNOWN  # noqa: E501

        :param provider_notices: The provider_notices of this Provider.  # noqa: E501
        :type: list[str]
        """

        self._provider_notices = provider_notices

    @property
    def backend_requires_consent(self):
        """Gets the backend_requires_consent of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The backend_requires_consent of this Provider.  # noqa: E501
        :rtype: bool
        """
        return self._backend_requires_consent

    @backend_requires_consent.setter
    def backend_requires_consent(self, backend_requires_consent):
        """Sets the backend_requires_consent of this Provider.

        UNKNOWN  # noqa: E501

        :param backend_requires_consent: The backend_requires_consent of this Provider.  # noqa: E501
        :type: bool
        """

        self._backend_requires_consent = backend_requires_consent

    @property
    def backend_consent_text(self):
        """Gets the backend_consent_text of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The backend_consent_text of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._backend_consent_text

    @backend_consent_text.setter
    def backend_consent_text(self, backend_consent_text):
        """Sets the backend_consent_text of this Provider.

        UNKNOWN  # noqa: E501

        :param backend_consent_text: The backend_consent_text of this Provider.  # noqa: E501
        :type: str
        """

        self._backend_consent_text = backend_consent_text

    @property
    def backend_consent_html(self):
        """Gets the backend_consent_html of this Provider.  # noqa: E501

        UNKNOWN  # noqa: E501

        :return: The backend_consent_html of this Provider.  # noqa: E501
        :rtype: str
        """
        return self._backend_consent_html

    @backend_consent_html.setter
    def backend_consent_html(self, backend_consent_html):
        """Sets the backend_consent_html of this Provider.

        UNKNOWN  # noqa: E501

        :param backend_consent_html: The backend_consent_html of this Provider.  # noqa: E501
        :type: str
        """

        self._backend_consent_html = backend_consent_html

    @property
    def created_at(self):
        """Gets the created_at of this Provider.  # noqa: E501

        When the data connection feed provider was first created  # noqa: E501

        :return: The created_at of this Provider.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Provider.

        When the data connection feed provider was first created  # noqa: E501

        :param created_at: The created_at of this Provider.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Provider.  # noqa: E501

        When the data connection feed provider was last updated  # noqa: E501

        :return: The updated_at of this Provider.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Provider.

        When the data connection feed provider was last updated  # noqa: E501

        :param updated_at: The updated_at of this Provider.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Provider):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Provider):
            return True

        return self.to_dict() != other.to_dict()
