# coding: utf-8

"""
    PocketSmith

    The public PocketSmith API  # noqa: E501

    The version of the OpenAPI document: 2.0+0.3.1
    Contact: api@pocketsmith.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from pocketsmith.configuration import Configuration


class DataFeedsAccount(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'account_number': 'str',
        'account_type': 'str',
        'backend_data_updated_at': 'datetime',
        'balance': 'DataFeedsAccountBalance',
        'amount': 'float',
        'amount_reversed': 'float',
        'currency': 'str',
        'created_at': 'datetime',
        'holdings_updated_at': 'datetime',
        'id': 'int',
        'memo': 'str',
        'name': 'str',
        'nickname': 'str',
        'status': 'AnyOfstringstring',
        'sub_account_type': 'AnyOfstringstring',
        'transactions_updated_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'account_number': 'account_number',
        'account_type': 'account_type',
        'backend_data_updated_at': 'backend_data_updated_at',
        'balance': 'balance',
        'amount': 'amount',
        'amount_reversed': 'amount_reversed',
        'currency': 'currency',
        'created_at': 'created_at',
        'holdings_updated_at': 'holdings_updated_at',
        'id': 'id',
        'memo': 'memo',
        'name': 'name',
        'nickname': 'nickname',
        'status': 'status',
        'sub_account_type': 'sub_account_type',
        'transactions_updated_at': 'transactions_updated_at',
        'updated_at': 'updated_at'
    }

    def __init__(self, account_number=None, account_type=None, backend_data_updated_at=None, balance=None, amount=None, amount_reversed=None, currency=None, created_at=None, holdings_updated_at=None, id=None, memo=None, name=None, nickname=None, status=None, sub_account_type=None, transactions_updated_at=None, updated_at=None, local_vars_configuration=None):  # noqa: E501
        """DataFeedsAccount - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._account_number = None
        self._account_type = None
        self._backend_data_updated_at = None
        self._balance = None
        self._amount = None
        self._amount_reversed = None
        self._currency = None
        self._created_at = None
        self._holdings_updated_at = None
        self._id = None
        self._memo = None
        self._name = None
        self._nickname = None
        self._status = None
        self._sub_account_type = None
        self._transactions_updated_at = None
        self._updated_at = None
        self.discriminator = None

        if account_number is not None:
            self.account_number = account_number
        if account_type is not None:
            self.account_type = account_type
        if backend_data_updated_at is not None:
            self.backend_data_updated_at = backend_data_updated_at
        if balance is not None:
            self.balance = balance
        if amount is not None:
            self.amount = amount
        if amount_reversed is not None:
            self.amount_reversed = amount_reversed
        if currency is not None:
            self.currency = currency
        if created_at is not None:
            self.created_at = created_at
        self.holdings_updated_at = holdings_updated_at
        if id is not None:
            self.id = id
        self.memo = memo
        self.name = name
        self.nickname = nickname
        if status is not None:
            self.status = status
        if sub_account_type is not None:
            self.sub_account_type = sub_account_type
        self.transactions_updated_at = transactions_updated_at
        self.updated_at = updated_at

    @property
    def account_number(self):
        """Gets the account_number of this DataFeedsAccount.  # noqa: E501

        The account number, as listed from the provider  # noqa: E501

        :return: The account_number of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_number

    @account_number.setter
    def account_number(self, account_number):
        """Sets the account_number of this DataFeedsAccount.

        The account number, as listed from the provider  # noqa: E501

        :param account_number: The account_number of this DataFeedsAccount.  # noqa: E501
        :type: str
        """

        self._account_number = account_number

    @property
    def account_type(self):
        """Gets the account_type of this DataFeedsAccount.  # noqa: E501

        The container type of the account  # noqa: E501

        :return: The account_type of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._account_type

    @account_type.setter
    def account_type(self, account_type):
        """Sets the account_type of this DataFeedsAccount.

        The container type of the account  # noqa: E501

        :param account_type: The account_type of this DataFeedsAccount.  # noqa: E501
        :type: str
        """
        allowed_values = ["bank", "credit_card", "loan", "insurance", "investment"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and account_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `account_type` ({0}), must be one of {1}"  # noqa: E501
                .format(account_type, allowed_values)
            )

        self._account_type = account_type

    @property
    def backend_data_updated_at(self):
        """Gets the backend_data_updated_at of this DataFeedsAccount.  # noqa: E501


        :return: The backend_data_updated_at of this DataFeedsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._backend_data_updated_at

    @backend_data_updated_at.setter
    def backend_data_updated_at(self, backend_data_updated_at):
        """Sets the backend_data_updated_at of this DataFeedsAccount.


        :param backend_data_updated_at: The backend_data_updated_at of this DataFeedsAccount.  # noqa: E501
        :type: datetime
        """

        self._backend_data_updated_at = backend_data_updated_at

    @property
    def balance(self):
        """Gets the balance of this DataFeedsAccount.  # noqa: E501


        :return: The balance of this DataFeedsAccount.  # noqa: E501
        :rtype: DataFeedsAccountBalance
        """
        return self._balance

    @balance.setter
    def balance(self, balance):
        """Sets the balance of this DataFeedsAccount.


        :param balance: The balance of this DataFeedsAccount.  # noqa: E501
        :type: DataFeedsAccountBalance
        """

        self._balance = balance

    @property
    def amount(self):
        """Gets the amount of this DataFeedsAccount.  # noqa: E501


        :return: The amount of this DataFeedsAccount.  # noqa: E501
        :rtype: float
        """
        return self._amount

    @amount.setter
    def amount(self, amount):
        """Sets the amount of this DataFeedsAccount.


        :param amount: The amount of this DataFeedsAccount.  # noqa: E501
        :type: float
        """

        self._amount = amount

    @property
    def amount_reversed(self):
        """Gets the amount_reversed of this DataFeedsAccount.  # noqa: E501


        :return: The amount_reversed of this DataFeedsAccount.  # noqa: E501
        :rtype: float
        """
        return self._amount_reversed

    @amount_reversed.setter
    def amount_reversed(self, amount_reversed):
        """Sets the amount_reversed of this DataFeedsAccount.


        :param amount_reversed: The amount_reversed of this DataFeedsAccount.  # noqa: E501
        :type: float
        """

        self._amount_reversed = amount_reversed

    @property
    def currency(self):
        """Gets the currency of this DataFeedsAccount.  # noqa: E501


        :return: The currency of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """Sets the currency of this DataFeedsAccount.


        :param currency: The currency of this DataFeedsAccount.  # noqa: E501
        :type: str
        """

        self._currency = currency

    @property
    def created_at(self):
        """Gets the created_at of this DataFeedsAccount.  # noqa: E501


        :return: The created_at of this DataFeedsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DataFeedsAccount.


        :param created_at: The created_at of this DataFeedsAccount.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    @property
    def holdings_updated_at(self):
        """Gets the holdings_updated_at of this DataFeedsAccount.  # noqa: E501


        :return: The holdings_updated_at of this DataFeedsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._holdings_updated_at

    @holdings_updated_at.setter
    def holdings_updated_at(self, holdings_updated_at):
        """Sets the holdings_updated_at of this DataFeedsAccount.


        :param holdings_updated_at: The holdings_updated_at of this DataFeedsAccount.  # noqa: E501
        :type: datetime
        """

        self._holdings_updated_at = holdings_updated_at

    @property
    def id(self):
        """Gets the id of this DataFeedsAccount.  # noqa: E501


        :return: The id of this DataFeedsAccount.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataFeedsAccount.


        :param id: The id of this DataFeedsAccount.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def memo(self):
        """Gets the memo of this DataFeedsAccount.  # noqa: E501


        :return: The memo of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._memo

    @memo.setter
    def memo(self, memo):
        """Sets the memo of this DataFeedsAccount.


        :param memo: The memo of this DataFeedsAccount.  # noqa: E501
        :type: str
        """

        self._memo = memo

    @property
    def name(self):
        """Gets the name of this DataFeedsAccount.  # noqa: E501


        :return: The name of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataFeedsAccount.


        :param name: The name of this DataFeedsAccount.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def nickname(self):
        """Gets the nickname of this DataFeedsAccount.  # noqa: E501


        :return: The nickname of this DataFeedsAccount.  # noqa: E501
        :rtype: str
        """
        return self._nickname

    @nickname.setter
    def nickname(self, nickname):
        """Sets the nickname of this DataFeedsAccount.


        :param nickname: The nickname of this DataFeedsAccount.  # noqa: E501
        :type: str
        """

        self._nickname = nickname

    @property
    def status(self):
        """Gets the status of this DataFeedsAccount.  # noqa: E501


        :return: The status of this DataFeedsAccount.  # noqa: E501
        :rtype: AnyOfstringstring
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this DataFeedsAccount.


        :param status: The status of this DataFeedsAccount.  # noqa: E501
        :type: AnyOfstringstring
        """

        self._status = status

    @property
    def sub_account_type(self):
        """Gets the sub_account_type of this DataFeedsAccount.  # noqa: E501


        :return: The sub_account_type of this DataFeedsAccount.  # noqa: E501
        :rtype: AnyOfstringstring
        """
        return self._sub_account_type

    @sub_account_type.setter
    def sub_account_type(self, sub_account_type):
        """Sets the sub_account_type of this DataFeedsAccount.


        :param sub_account_type: The sub_account_type of this DataFeedsAccount.  # noqa: E501
        :type: AnyOfstringstring
        """

        self._sub_account_type = sub_account_type

    @property
    def transactions_updated_at(self):
        """Gets the transactions_updated_at of this DataFeedsAccount.  # noqa: E501


        :return: The transactions_updated_at of this DataFeedsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._transactions_updated_at

    @transactions_updated_at.setter
    def transactions_updated_at(self, transactions_updated_at):
        """Sets the transactions_updated_at of this DataFeedsAccount.


        :param transactions_updated_at: The transactions_updated_at of this DataFeedsAccount.  # noqa: E501
        :type: datetime
        """

        self._transactions_updated_at = transactions_updated_at

    @property
    def updated_at(self):
        """Gets the updated_at of this DataFeedsAccount.  # noqa: E501


        :return: The updated_at of this DataFeedsAccount.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this DataFeedsAccount.


        :param updated_at: The updated_at of this DataFeedsAccount.  # noqa: E501
        :type: datetime
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataFeedsAccount):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataFeedsAccount):
            return True

        return self.to_dict() != other.to_dict()
