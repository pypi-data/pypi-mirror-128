# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['AppSecActivationsArgs', 'AppSecActivations']

@pulumi.input_type
class AppSecActivationsArgs:
    def __init__(__self__, *,
                 config_id: pulumi.Input[int],
                 notes: pulumi.Input[str],
                 notification_emails: pulumi.Input[Sequence[pulumi.Input[str]]],
                 activate: Optional[pulumi.Input[bool]] = None,
                 network: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a AppSecActivations resource.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] notes: A text note describing this operation. If no attributes were changed since the last time a security
               configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
               is called, please update one of the attributes, e.g. the notes attribute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_emails: A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        :param pulumi.Input[bool] activate: A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        :param pulumi.Input[str] network: The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        """
        pulumi.set(__self__, "config_id", config_id)
        pulumi.set(__self__, "notes", notes)
        pulumi.set(__self__, "notification_emails", notification_emails)
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if network is not None:
            pulumi.set(__self__, "network", network)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Input[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: pulumi.Input[int]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Input[str]:
        """
        A text note describing this operation. If no attributes were changed since the last time a security
        configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
        is called, please update one of the attributes, e.g. the notes attribute.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: pulumi.Input[str]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> pulumi.Input[Sequence[pulumi.Input[str]]]:
        """
        A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        """
        return pulumi.get(self, "notification_emails")

    @notification_emails.setter
    def notification_emails(self, value: pulumi.Input[Sequence[pulumi.Input[str]]]):
        pulumi.set(self, "notification_emails", value)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)


@pulumi.input_type
class _AppSecActivationsState:
    def __init__(__self__, *,
                 activate: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 notification_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 status: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering AppSecActivations resources.
        :param pulumi.Input[bool] activate: A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] network: The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        :param pulumi.Input[str] notes: A text note describing this operation. If no attributes were changed since the last time a security
               configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
               is called, please update one of the attributes, e.g. the notes attribute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_emails: A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        :param pulumi.Input[str] status: The status of the operation. The following values are may be returned:
        """
        if activate is not None:
            pulumi.set(__self__, "activate", activate)
        if config_id is not None:
            pulumi.set(__self__, "config_id", config_id)
        if network is not None:
            pulumi.set(__self__, "network", network)
        if notes is not None:
            pulumi.set(__self__, "notes", notes)
        if notification_emails is not None:
            pulumi.set(__self__, "notification_emails", notification_emails)
        if status is not None:
            pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter
    def activate(self) -> Optional[pulumi.Input[bool]]:
        """
        A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        """
        return pulumi.get(self, "activate")

    @activate.setter
    def activate(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "activate", value)

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> Optional[pulumi.Input[int]]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @config_id.setter
    def config_id(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "config_id", value)

    @property
    @pulumi.getter
    def network(self) -> Optional[pulumi.Input[str]]:
        """
        The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        """
        return pulumi.get(self, "network")

    @network.setter
    def network(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "network", value)

    @property
    @pulumi.getter
    def notes(self) -> Optional[pulumi.Input[str]]:
        """
        A text note describing this operation. If no attributes were changed since the last time a security
        configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
        is called, please update one of the attributes, e.g. the notes attribute.
        """
        return pulumi.get(self, "notes")

    @notes.setter
    def notes(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "notes", value)

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        """
        return pulumi.get(self, "notification_emails")

    @notification_emails.setter
    def notification_emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "notification_emails", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        """
        The status of the operation. The following values are may be returned:
        """
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)


class AppSecActivations(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 notification_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        """
        The `AppSecActivations` resource allows you to activate or deactivate a given security configuration version.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Akamai Tools")
        activation = akamai.AppSecActivations("activation",
            config_id=configuration.config_id,
            network="STAGING",
            notes="TEST Notes",
            notification_emails=["user@example.com"])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] network: The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        :param pulumi.Input[str] notes: A text note describing this operation. If no attributes were changed since the last time a security
               configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
               is called, please update one of the attributes, e.g. the notes attribute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_emails: A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: AppSecActivationsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The `AppSecActivations` resource allows you to activate or deactivate a given security configuration version.

        ## Example Usage

        Basic usage:

        ```python
        import pulumi
        import pulumi_akamai as akamai

        configuration = akamai.get_app_sec_configuration(name="Akamai Tools")
        activation = akamai.AppSecActivations("activation",
            config_id=configuration.config_id,
            network="STAGING",
            notes="TEST Notes",
            notification_emails=["user@example.com"])
        ```

        :param str resource_name: The name of the resource.
        :param AppSecActivationsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(AppSecActivationsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 activate: Optional[pulumi.Input[bool]] = None,
                 config_id: Optional[pulumi.Input[int]] = None,
                 network: Optional[pulumi.Input[str]] = None,
                 notes: Optional[pulumi.Input[str]] = None,
                 notification_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = AppSecActivationsArgs.__new__(AppSecActivationsArgs)

            __props__.__dict__["activate"] = activate
            if config_id is None and not opts.urn:
                raise TypeError("Missing required property 'config_id'")
            __props__.__dict__["config_id"] = config_id
            __props__.__dict__["network"] = network
            if notes is None and not opts.urn:
                raise TypeError("Missing required property 'notes'")
            __props__.__dict__["notes"] = notes
            if notification_emails is None and not opts.urn:
                raise TypeError("Missing required property 'notification_emails'")
            __props__.__dict__["notification_emails"] = notification_emails
            __props__.__dict__["status"] = None
        super(AppSecActivations, __self__).__init__(
            'akamai:index/appSecActivations:AppSecActivations',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            activate: Optional[pulumi.Input[bool]] = None,
            config_id: Optional[pulumi.Input[int]] = None,
            network: Optional[pulumi.Input[str]] = None,
            notes: Optional[pulumi.Input[str]] = None,
            notification_emails: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            status: Optional[pulumi.Input[str]] = None) -> 'AppSecActivations':
        """
        Get an existing AppSecActivations resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] activate: A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        :param pulumi.Input[int] config_id: The ID of the security configuration to use.
        :param pulumi.Input[str] network: The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        :param pulumi.Input[str] notes: A text note describing this operation. If no attributes were changed since the last time a security
               configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
               is called, please update one of the attributes, e.g. the notes attribute.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] notification_emails: A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        :param pulumi.Input[str] status: The status of the operation. The following values are may be returned:
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _AppSecActivationsState.__new__(_AppSecActivationsState)

        __props__.__dict__["activate"] = activate
        __props__.__dict__["config_id"] = config_id
        __props__.__dict__["network"] = network
        __props__.__dict__["notes"] = notes
        __props__.__dict__["notification_emails"] = notification_emails
        __props__.__dict__["status"] = status
        return AppSecActivations(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def activate(self) -> pulumi.Output[Optional[bool]]:
        """
        A boolean indicating whether to activate the specified configuration version. If not supplied, True is assumed.
        """
        return pulumi.get(self, "activate")

    @property
    @pulumi.getter(name="configId")
    def config_id(self) -> pulumi.Output[int]:
        """
        The ID of the security configuration to use.
        """
        return pulumi.get(self, "config_id")

    @property
    @pulumi.getter
    def network(self) -> pulumi.Output[Optional[str]]:
        """
        The network in which the security configuration should be activated. If supplied, must be either STAGING or PRODUCTION. If not supplied, STAGING will be assumed.
        """
        return pulumi.get(self, "network")

    @property
    @pulumi.getter
    def notes(self) -> pulumi.Output[str]:
        """
        A text note describing this operation. If no attributes were changed since the last time a security
        configuration was updated using the AppSecActivations resource, an activation will not occur. To ensure an activation
        is called, please update one of the attributes, e.g. the notes attribute.
        """
        return pulumi.get(self, "notes")

    @property
    @pulumi.getter(name="notificationEmails")
    def notification_emails(self) -> pulumi.Output[Sequence[str]]:
        """
        A bracketed, comma-separated list of email addresses that will be notified when the operation is complete.
        """
        return pulumi.get(self, "notification_emails")

    @property
    @pulumi.getter
    def status(self) -> pulumi.Output[str]:
        """
        The status of the operation. The following values are may be returned:
        """
        return pulumi.get(self, "status")

