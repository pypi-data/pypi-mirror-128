# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities
from . import outputs

__all__ = [
    'EcdPolicyGroupAuthorizeAccessPolicyRule',
    'EcdPolicyGroupAuthorizeSecurityPolicyRule',
    'GetNasFileSystemsSystemResult',
    'GetPolicyGroupsGroupResult',
    'GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult',
    'GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult',
    'GetSimpleOfficeSitesSiteResult',
]

@pulumi.output_type
class EcdPolicyGroupAuthorizeAccessPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrIp":
            suggest = "cidr_ip"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EcdPolicyGroupAuthorizeAccessPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EcdPolicyGroupAuthorizeAccessPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EcdPolicyGroupAuthorizeAccessPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_ip: Optional[str] = None,
                 description: Optional[str] = None):
        """
        :param str cidr_ip: The cidrip of authorize access rule.
        :param str description: The description of authorize access rule.
        """
        if cidr_ip is not None:
            pulumi.set(__self__, "cidr_ip", cidr_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> Optional[str]:
        """
        The cidrip of authorize access rule.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of authorize access rule.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class EcdPolicyGroupAuthorizeSecurityPolicyRule(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "cidrIp":
            suggest = "cidr_ip"
        elif key == "ipProtocol":
            suggest = "ip_protocol"
        elif key == "portRange":
            suggest = "port_range"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in EcdPolicyGroupAuthorizeSecurityPolicyRule. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        EcdPolicyGroupAuthorizeSecurityPolicyRule.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        EcdPolicyGroupAuthorizeSecurityPolicyRule.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 cidr_ip: Optional[str] = None,
                 description: Optional[str] = None,
                 ip_protocol: Optional[str] = None,
                 policy: Optional[str] = None,
                 port_range: Optional[str] = None,
                 priority: Optional[str] = None,
                 type: Optional[str] = None):
        """
        :param str cidr_ip: The cidrip of authorize access rule.
        :param str description: The description of authorize access rule.
        :param str ip_protocol: The ip protocol of security rules.
        :param str policy: The policy of security rules.
        :param str port_range: The port range of security rules.
        :param str priority: The priority of security rules.
        :param str type: The type of security rules.
        """
        if cidr_ip is not None:
            pulumi.set(__self__, "cidr_ip", cidr_ip)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if ip_protocol is not None:
            pulumi.set(__self__, "ip_protocol", ip_protocol)
        if policy is not None:
            pulumi.set(__self__, "policy", policy)
        if port_range is not None:
            pulumi.set(__self__, "port_range", port_range)
        if priority is not None:
            pulumi.set(__self__, "priority", priority)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> Optional[str]:
        """
        The cidrip of authorize access rule.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        """
        The description of authorize access rule.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> Optional[str]:
        """
        The ip protocol of security rules.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def policy(self) -> Optional[str]:
        """
        The policy of security rules.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> Optional[str]:
        """
        The port range of security rules.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def priority(self) -> Optional[str]:
        """
        The priority of security rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        """
        The type of security rules.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetNasFileSystemsSystemResult(dict):
    def __init__(__self__, *,
                 capacity: str,
                 create_time: str,
                 description: str,
                 file_system_id: str,
                 file_system_type: str,
                 id: str,
                 metered_size: str,
                 mount_target_domain: str,
                 mount_target_status: str,
                 nas_file_system_name: str,
                 office_site_id: str,
                 office_site_name: str,
                 status: str,
                 storage_type: str,
                 support_acl: bool,
                 zone_id: str):
        """
        :param str capacity: The capacity of nas file system.
        :param str create_time: The create time of nas file system.
        :param str description: The description of nas file system.
        :param str file_system_id: The filesystem id of nas file system.
        :param str file_system_type: The type of nas file system.
        :param str id: The ID of the Nas File System.
        :param str metered_size: The size of metered.
        :param str mount_target_domain: The domain of mount target.
        :param str mount_target_status: The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
        :param str nas_file_system_name: The name of nas file system.
        :param str office_site_id: The ID of office site.
        :param str office_site_name: The name of office site.
        :param str status: The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
        :param str storage_type: The storage type of nas file system.
        :param bool support_acl: Whether to support Acl.
        :param str zone_id: The zone id of nas file system.
        """
        pulumi.set(__self__, "capacity", capacity)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "file_system_id", file_system_id)
        pulumi.set(__self__, "file_system_type", file_system_type)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "metered_size", metered_size)
        pulumi.set(__self__, "mount_target_domain", mount_target_domain)
        pulumi.set(__self__, "mount_target_status", mount_target_status)
        pulumi.set(__self__, "nas_file_system_name", nas_file_system_name)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_name", office_site_name)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "storage_type", storage_type)
        pulumi.set(__self__, "support_acl", support_acl)
        pulumi.set(__self__, "zone_id", zone_id)

    @property
    @pulumi.getter
    def capacity(self) -> str:
        """
        The capacity of nas file system.
        """
        return pulumi.get(self, "capacity")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        The create time of nas file system.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of nas file system.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="fileSystemId")
    def file_system_id(self) -> str:
        """
        The filesystem id of nas file system.
        """
        return pulumi.get(self, "file_system_id")

    @property
    @pulumi.getter(name="fileSystemType")
    def file_system_type(self) -> str:
        """
        The type of nas file system.
        """
        return pulumi.get(self, "file_system_type")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Nas File System.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="meteredSize")
    def metered_size(self) -> str:
        """
        The size of metered.
        """
        return pulumi.get(self, "metered_size")

    @property
    @pulumi.getter(name="mountTargetDomain")
    def mount_target_domain(self) -> str:
        """
        The domain of mount target.
        """
        return pulumi.get(self, "mount_target_domain")

    @property
    @pulumi.getter(name="mountTargetStatus")
    def mount_target_status(self) -> str:
        """
        The status of mount target. Valid values: `Pending`, `Active`, `Inactive`,`Deleting`,`Invalid`.
        """
        return pulumi.get(self, "mount_target_status")

    @property
    @pulumi.getter(name="nasFileSystemName")
    def nas_file_system_name(self) -> str:
        """
        The name of nas file system.
        """
        return pulumi.get(self, "nas_file_system_name")

    @property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> str:
        """
        The ID of office site.
        """
        return pulumi.get(self, "office_site_id")

    @property
    @pulumi.getter(name="officeSiteName")
    def office_site_name(self) -> str:
        """
        The name of office site.
        """
        return pulumi.get(self, "office_site_name")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of nas file system. Valid values: `Pending`, `Running`, `Stopped`,`Deleting`, `Deleted`, `Invalid`.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="storageType")
    def storage_type(self) -> str:
        """
        The storage type of nas file system.
        """
        return pulumi.get(self, "storage_type")

    @property
    @pulumi.getter(name="supportAcl")
    def support_acl(self) -> bool:
        """
        Whether to support Acl.
        """
        return pulumi.get(self, "support_acl")

    @property
    @pulumi.getter(name="zoneId")
    def zone_id(self) -> str:
        """
        The zone id of nas file system.
        """
        return pulumi.get(self, "zone_id")


@pulumi.output_type
class GetPolicyGroupsGroupResult(dict):
    def __init__(__self__, *,
                 authorize_access_policy_rules: Sequence['outputs.GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult'],
                 authorize_security_policy_rules: Sequence['outputs.GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult'],
                 clipboard: str,
                 domain_list: str,
                 eds_count: int,
                 html_access: str,
                 html_file_transfer: str,
                 id: str,
                 local_drive: str,
                 policy_group_id: str,
                 policy_group_name: str,
                 policy_group_type: str,
                 status: str,
                 usb_redirect: str,
                 visual_quality: str,
                 watermark: str,
                 watermark_transparency: str,
                 watermark_type: str):
        """
        :param Sequence['GetPolicyGroupsGroupAuthorizeAccessPolicyRuleArgs'] authorize_access_policy_rules: The rule of authorize access rule.
        :param Sequence['GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleArgs'] authorize_security_policy_rules: The policy rule.
        :param str clipboard: The clipboard policy.
        :param str domain_list: The list of domain.
        :param int eds_count: The count of eds.
        :param str html_access: The access of html5.
        :param str html_file_transfer: The html5 file transfer.
        :param str id: The ID of the Policy Group.
        :param str local_drive: Local drive redirect policy.
        :param str policy_group_id: The policy group id.
        :param str policy_group_name: The name of policy group.
        :param str policy_group_type: The type of policy group.
        :param str status: The status of policy.
        :param str usb_redirect: The usb redirect policy.
        :param str visual_quality: The quality of visual.sae_ecdsae_nameecd_po
        :param str watermark: The watermark policy.
        :param str watermark_transparency: The watermark transparency.
        :param str watermark_type: The type of watemark.
        """
        pulumi.set(__self__, "authorize_access_policy_rules", authorize_access_policy_rules)
        pulumi.set(__self__, "authorize_security_policy_rules", authorize_security_policy_rules)
        pulumi.set(__self__, "clipboard", clipboard)
        pulumi.set(__self__, "domain_list", domain_list)
        pulumi.set(__self__, "eds_count", eds_count)
        pulumi.set(__self__, "html_access", html_access)
        pulumi.set(__self__, "html_file_transfer", html_file_transfer)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "local_drive", local_drive)
        pulumi.set(__self__, "policy_group_id", policy_group_id)
        pulumi.set(__self__, "policy_group_name", policy_group_name)
        pulumi.set(__self__, "policy_group_type", policy_group_type)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "usb_redirect", usb_redirect)
        pulumi.set(__self__, "visual_quality", visual_quality)
        pulumi.set(__self__, "watermark", watermark)
        pulumi.set(__self__, "watermark_transparency", watermark_transparency)
        pulumi.set(__self__, "watermark_type", watermark_type)

    @property
    @pulumi.getter(name="authorizeAccessPolicyRules")
    def authorize_access_policy_rules(self) -> Sequence['outputs.GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult']:
        """
        The rule of authorize access rule.
        """
        return pulumi.get(self, "authorize_access_policy_rules")

    @property
    @pulumi.getter(name="authorizeSecurityPolicyRules")
    def authorize_security_policy_rules(self) -> Sequence['outputs.GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult']:
        """
        The policy rule.
        """
        return pulumi.get(self, "authorize_security_policy_rules")

    @property
    @pulumi.getter
    def clipboard(self) -> str:
        """
        The clipboard policy.
        """
        return pulumi.get(self, "clipboard")

    @property
    @pulumi.getter(name="domainList")
    def domain_list(self) -> str:
        """
        The list of domain.
        """
        return pulumi.get(self, "domain_list")

    @property
    @pulumi.getter(name="edsCount")
    def eds_count(self) -> int:
        """
        The count of eds.
        """
        return pulumi.get(self, "eds_count")

    @property
    @pulumi.getter(name="htmlAccess")
    def html_access(self) -> str:
        """
        The access of html5.
        """
        return pulumi.get(self, "html_access")

    @property
    @pulumi.getter(name="htmlFileTransfer")
    def html_file_transfer(self) -> str:
        """
        The html5 file transfer.
        """
        return pulumi.get(self, "html_file_transfer")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Policy Group.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="localDrive")
    def local_drive(self) -> str:
        """
        Local drive redirect policy.
        """
        return pulumi.get(self, "local_drive")

    @property
    @pulumi.getter(name="policyGroupId")
    def policy_group_id(self) -> str:
        """
        The policy group id.
        """
        return pulumi.get(self, "policy_group_id")

    @property
    @pulumi.getter(name="policyGroupName")
    def policy_group_name(self) -> str:
        """
        The name of policy group.
        """
        return pulumi.get(self, "policy_group_name")

    @property
    @pulumi.getter(name="policyGroupType")
    def policy_group_type(self) -> str:
        """
        The type of policy group.
        """
        return pulumi.get(self, "policy_group_type")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        The status of policy.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="usbRedirect")
    def usb_redirect(self) -> str:
        """
        The usb redirect policy.
        """
        return pulumi.get(self, "usb_redirect")

    @property
    @pulumi.getter(name="visualQuality")
    def visual_quality(self) -> str:
        """
        The quality of visual.sae_ecdsae_nameecd_po
        """
        return pulumi.get(self, "visual_quality")

    @property
    @pulumi.getter
    def watermark(self) -> str:
        """
        The watermark policy.
        """
        return pulumi.get(self, "watermark")

    @property
    @pulumi.getter(name="watermarkTransparency")
    def watermark_transparency(self) -> str:
        """
        The watermark transparency.
        """
        return pulumi.get(self, "watermark_transparency")

    @property
    @pulumi.getter(name="watermarkType")
    def watermark_type(self) -> str:
        """
        The type of watemark.
        """
        return pulumi.get(self, "watermark_type")


@pulumi.output_type
class GetPolicyGroupsGroupAuthorizeAccessPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cidr_ip: str,
                 description: str):
        """
        :param str cidr_ip: The cidrip of security rules.
        :param str description: The description of security rules.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "description", description)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        The cidrip of security rules.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of security rules.
        """
        return pulumi.get(self, "description")


@pulumi.output_type
class GetPolicyGroupsGroupAuthorizeSecurityPolicyRuleResult(dict):
    def __init__(__self__, *,
                 cidr_ip: str,
                 description: str,
                 ip_protocol: str,
                 policy: str,
                 port_range: str,
                 priority: str,
                 type: str):
        """
        :param str cidr_ip: The cidrip of security rules.
        :param str description: The description of security rules.
        :param str ip_protocol: The ip protocol of security rules.
        :param str policy: The policy of security rules.
        :param str port_range: The port range of security rules.
        :param str priority: The priority of security rules.
        :param str type: The type of security rules.
        """
        pulumi.set(__self__, "cidr_ip", cidr_ip)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "ip_protocol", ip_protocol)
        pulumi.set(__self__, "policy", policy)
        pulumi.set(__self__, "port_range", port_range)
        pulumi.set(__self__, "priority", priority)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="cidrIp")
    def cidr_ip(self) -> str:
        """
        The cidrip of security rules.
        """
        return pulumi.get(self, "cidr_ip")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        The description of security rules.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="ipProtocol")
    def ip_protocol(self) -> str:
        """
        The ip protocol of security rules.
        """
        return pulumi.get(self, "ip_protocol")

    @property
    @pulumi.getter
    def policy(self) -> str:
        """
        The policy of security rules.
        """
        return pulumi.get(self, "policy")

    @property
    @pulumi.getter(name="portRange")
    def port_range(self) -> str:
        """
        The port range of security rules.
        """
        return pulumi.get(self, "port_range")

    @property
    @pulumi.getter
    def priority(self) -> str:
        """
        The priority of security rules.
        """
        return pulumi.get(self, "priority")

    @property
    @pulumi.getter
    def type(self) -> str:
        """
        The type of security rules.
        """
        return pulumi.get(self, "type")


@pulumi.output_type
class GetSimpleOfficeSitesSiteResult(dict):
    def __init__(__self__, *,
                 bandwidth: int,
                 cen_id: str,
                 cidr_block: str,
                 create_time: str,
                 custom_security_group_id: str,
                 desktop_access_type: str,
                 desktop_vpc_endpoint: str,
                 dns_addresses: Sequence[str],
                 dns_user_name: str,
                 domain_name: str,
                 domain_password: str,
                 domain_user_name: str,
                 enable_admin_access: bool,
                 enable_cross_desktop_access: bool,
                 enable_internet_access: bool,
                 file_system_ids: Sequence[str],
                 id: str,
                 mfa_enabled: bool,
                 network_package_id: str,
                 office_site_id: str,
                 office_site_type: str,
                 simple_office_site_name: str,
                 sso_enabled: bool,
                 sso_status: bool,
                 status: str,
                 sub_dns_addresses: Sequence[str],
                 sub_domain_name: str,
                 trust_password: str,
                 vpc_id: str,
                 vswitch_ids: Sequence[str]):
        """
        :param int bandwidth: The Internet Bandwidth Peak.  Valid Values: 0~200. If This Field Is Set to 0, Indicates That There Is No Open Internet Access.
        :param str cen_id: Cloud Enterprise Network Instance Id.
        :param str cidr_block: Workspace Corresponds to the Security Office Network of IPv4 Segment.
        :param str create_time: Workspace Creation Time.
        :param str custom_security_group_id: Security Group ID.
        :param str desktop_access_type: Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
        :param str desktop_vpc_endpoint: The Desktop Vpc Endpoint.
        :param Sequence[str] dns_addresses: Enterprise Ad Corresponding DNS Address.
        :param str dns_user_name: Easy-to-Use DNS Name.
        :param str domain_name: Enterprise of Ad Domain Name.
        :param str domain_password: Domain of the User Who Will Administer This Target Application Password.
        :param str domain_user_name: The Domain Administrator's Username.
        :param bool enable_admin_access: Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        :param bool enable_cross_desktop_access: Enable Cross-Desktop Access.
        :param bool enable_internet_access: Whether the Open Internet Access Function.
        :param Sequence[str] file_system_ids: NAS File System ID.
        :param str id: The ID of the Simple Office Site.
        :param bool mfa_enabled: Whether to Enable Multi-Factor Authentication MFA.
        :param str network_package_id: Internet Access ID.
        :param str office_site_id: The Workspace ID.
        :param str office_site_type: Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        :param str simple_office_site_name: The simple office site name.
        :param bool sso_enabled: Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        :param bool sso_status: Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        :param str status: Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
        :param Sequence[str] sub_dns_addresses: AD Subdomain of the DNS Address.
        :param str sub_domain_name: AD Domain DNS Name.
        :param str trust_password: AD Trust Password.
        :param str vpc_id: Security Office VPC ID.
        :param Sequence[str] vswitch_ids: The vswitch ids.
        """
        pulumi.set(__self__, "bandwidth", bandwidth)
        pulumi.set(__self__, "cen_id", cen_id)
        pulumi.set(__self__, "cidr_block", cidr_block)
        pulumi.set(__self__, "create_time", create_time)
        pulumi.set(__self__, "custom_security_group_id", custom_security_group_id)
        pulumi.set(__self__, "desktop_access_type", desktop_access_type)
        pulumi.set(__self__, "desktop_vpc_endpoint", desktop_vpc_endpoint)
        pulumi.set(__self__, "dns_addresses", dns_addresses)
        pulumi.set(__self__, "dns_user_name", dns_user_name)
        pulumi.set(__self__, "domain_name", domain_name)
        pulumi.set(__self__, "domain_password", domain_password)
        pulumi.set(__self__, "domain_user_name", domain_user_name)
        pulumi.set(__self__, "enable_admin_access", enable_admin_access)
        pulumi.set(__self__, "enable_cross_desktop_access", enable_cross_desktop_access)
        pulumi.set(__self__, "enable_internet_access", enable_internet_access)
        pulumi.set(__self__, "file_system_ids", file_system_ids)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "mfa_enabled", mfa_enabled)
        pulumi.set(__self__, "network_package_id", network_package_id)
        pulumi.set(__self__, "office_site_id", office_site_id)
        pulumi.set(__self__, "office_site_type", office_site_type)
        pulumi.set(__self__, "simple_office_site_name", simple_office_site_name)
        pulumi.set(__self__, "sso_enabled", sso_enabled)
        pulumi.set(__self__, "sso_status", sso_status)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "sub_dns_addresses", sub_dns_addresses)
        pulumi.set(__self__, "sub_domain_name", sub_domain_name)
        pulumi.set(__self__, "trust_password", trust_password)
        pulumi.set(__self__, "vpc_id", vpc_id)
        pulumi.set(__self__, "vswitch_ids", vswitch_ids)

    @property
    @pulumi.getter
    def bandwidth(self) -> int:
        """
        The Internet Bandwidth Peak.  Valid Values: 0~200. If This Field Is Set to 0, Indicates That There Is No Open Internet Access.
        """
        return pulumi.get(self, "bandwidth")

    @property
    @pulumi.getter(name="cenId")
    def cen_id(self) -> str:
        """
        Cloud Enterprise Network Instance Id.
        """
        return pulumi.get(self, "cen_id")

    @property
    @pulumi.getter(name="cidrBlock")
    def cidr_block(self) -> str:
        """
        Workspace Corresponds to the Security Office Network of IPv4 Segment.
        """
        return pulumi.get(self, "cidr_block")

    @property
    @pulumi.getter(name="createTime")
    def create_time(self) -> str:
        """
        Workspace Creation Time.
        """
        return pulumi.get(self, "create_time")

    @property
    @pulumi.getter(name="customSecurityGroupId")
    def custom_security_group_id(self) -> str:
        """
        Security Group ID.
        """
        return pulumi.get(self, "custom_security_group_id")

    @property
    @pulumi.getter(name="desktopAccessType")
    def desktop_access_type(self) -> str:
        """
        Connect to the Cloud Desktop Allows the Use of the Access Mode of. Possible Values: the Internet: Only Allows the Client to Public Cloud Desktop. Virtual Private Cloud (VPC): Only Allows in the Virtual Private Cloud (VPC) in the Client to Connect to the Cloud Desktop. Any: Not by Way of Limitation. Use Client to Connect to the Cloud Desktop When It Is Possible to Choose the Connection.
        """
        return pulumi.get(self, "desktop_access_type")

    @property
    @pulumi.getter(name="desktopVpcEndpoint")
    def desktop_vpc_endpoint(self) -> str:
        """
        The Desktop Vpc Endpoint.
        """
        return pulumi.get(self, "desktop_vpc_endpoint")

    @property
    @pulumi.getter(name="dnsAddresses")
    def dns_addresses(self) -> Sequence[str]:
        """
        Enterprise Ad Corresponding DNS Address.
        """
        return pulumi.get(self, "dns_addresses")

    @property
    @pulumi.getter(name="dnsUserName")
    def dns_user_name(self) -> str:
        """
        Easy-to-Use DNS Name.
        """
        return pulumi.get(self, "dns_user_name")

    @property
    @pulumi.getter(name="domainName")
    def domain_name(self) -> str:
        """
        Enterprise of Ad Domain Name.
        """
        return pulumi.get(self, "domain_name")

    @property
    @pulumi.getter(name="domainPassword")
    def domain_password(self) -> str:
        """
        Domain of the User Who Will Administer This Target Application Password.
        """
        return pulumi.get(self, "domain_password")

    @property
    @pulumi.getter(name="domainUserName")
    def domain_user_name(self) -> str:
        """
        The Domain Administrator's Username.
        """
        return pulumi.get(self, "domain_user_name")

    @property
    @pulumi.getter(name="enableAdminAccess")
    def enable_admin_access(self) -> bool:
        """
        Whether to Use Cloud Desktop User Empowerment of Local Administrator Permissions.
        """
        return pulumi.get(self, "enable_admin_access")

    @property
    @pulumi.getter(name="enableCrossDesktopAccess")
    def enable_cross_desktop_access(self) -> bool:
        """
        Enable Cross-Desktop Access.
        """
        return pulumi.get(self, "enable_cross_desktop_access")

    @property
    @pulumi.getter(name="enableInternetAccess")
    def enable_internet_access(self) -> bool:
        """
        Whether the Open Internet Access Function.
        """
        return pulumi.get(self, "enable_internet_access")

    @property
    @pulumi.getter(name="fileSystemIds")
    def file_system_ids(self) -> Sequence[str]:
        """
        NAS File System ID.
        """
        return pulumi.get(self, "file_system_ids")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of the Simple Office Site.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mfaEnabled")
    def mfa_enabled(self) -> bool:
        """
        Whether to Enable Multi-Factor Authentication MFA.
        """
        return pulumi.get(self, "mfa_enabled")

    @property
    @pulumi.getter(name="networkPackageId")
    def network_package_id(self) -> str:
        """
        Internet Access ID.
        """
        return pulumi.get(self, "network_package_id")

    @property
    @pulumi.getter(name="officeSiteId")
    def office_site_id(self) -> str:
        """
        The Workspace ID.
        """
        return pulumi.get(self, "office_site_id")

    @property
    @pulumi.getter(name="officeSiteType")
    def office_site_type(self) -> str:
        """
        Workspace Account System Type. Possible Values: Simple: Convenient Account. AD_CONNECTOR: Enterprise Ad Account.
        """
        return pulumi.get(self, "office_site_type")

    @property
    @pulumi.getter(name="simpleOfficeSiteName")
    def simple_office_site_name(self) -> str:
        """
        The simple office site name.
        """
        return pulumi.get(self, "simple_office_site_name")

    @property
    @pulumi.getter(name="ssoEnabled")
    def sso_enabled(self) -> bool:
        """
        Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        """
        return pulumi.get(self, "sso_enabled")

    @property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> bool:
        """
        Whether to Enable Single Sign-on (SSO) for User-Based SSO.
        """
        return pulumi.get(self, "sso_status")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Workspace State. Possible Values: Registering: Registered in the Registered: Registered.
        """
        return pulumi.get(self, "status")

    @property
    @pulumi.getter(name="subDnsAddresses")
    def sub_dns_addresses(self) -> Sequence[str]:
        """
        AD Subdomain of the DNS Address.
        """
        return pulumi.get(self, "sub_dns_addresses")

    @property
    @pulumi.getter(name="subDomainName")
    def sub_domain_name(self) -> str:
        """
        AD Domain DNS Name.
        """
        return pulumi.get(self, "sub_domain_name")

    @property
    @pulumi.getter(name="trustPassword")
    def trust_password(self) -> str:
        """
        AD Trust Password.
        """
        return pulumi.get(self, "trust_password")

    @property
    @pulumi.getter(name="vpcId")
    def vpc_id(self) -> str:
        """
        Security Office VPC ID.
        """
        return pulumi.get(self, "vpc_id")

    @property
    @pulumi.getter(name="vswitchIds")
    def vswitch_ids(self) -> Sequence[str]:
        """
        The vswitch ids.
        """
        return pulumi.get(self, "vswitch_ids")


