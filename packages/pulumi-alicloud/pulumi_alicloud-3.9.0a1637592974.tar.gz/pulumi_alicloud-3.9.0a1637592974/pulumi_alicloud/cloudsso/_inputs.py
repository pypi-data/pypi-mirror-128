# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from .. import _utilities

__all__ = [
    'AccessConfigurationPermissionPolicyArgs',
    'DirectorySamlIdentityProviderConfigurationArgs',
]

@pulumi.input_type
class AccessConfigurationPermissionPolicyArgs:
    def __init__(__self__, *,
                 permission_policy_document: Optional[pulumi.Input[str]] = None,
                 permission_policy_name: Optional[pulumi.Input[str]] = None,
                 permission_policy_type: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] permission_policy_document: The Content of Policy.
        :param pulumi.Input[str] permission_policy_name: The Policy Name of policy.
        :param pulumi.Input[str] permission_policy_type: The Policy Type of policy. Valid values: `System`, `Inline`.
        """
        if permission_policy_document is not None:
            pulumi.set(__self__, "permission_policy_document", permission_policy_document)
        if permission_policy_name is not None:
            pulumi.set(__self__, "permission_policy_name", permission_policy_name)
        if permission_policy_type is not None:
            pulumi.set(__self__, "permission_policy_type", permission_policy_type)

    @property
    @pulumi.getter(name="permissionPolicyDocument")
    def permission_policy_document(self) -> Optional[pulumi.Input[str]]:
        """
        The Content of Policy.
        """
        return pulumi.get(self, "permission_policy_document")

    @permission_policy_document.setter
    def permission_policy_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_policy_document", value)

    @property
    @pulumi.getter(name="permissionPolicyName")
    def permission_policy_name(self) -> Optional[pulumi.Input[str]]:
        """
        The Policy Name of policy.
        """
        return pulumi.get(self, "permission_policy_name")

    @permission_policy_name.setter
    def permission_policy_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_policy_name", value)

    @property
    @pulumi.getter(name="permissionPolicyType")
    def permission_policy_type(self) -> Optional[pulumi.Input[str]]:
        """
        The Policy Type of policy. Valid values: `System`, `Inline`.
        """
        return pulumi.get(self, "permission_policy_type")

    @permission_policy_type.setter
    def permission_policy_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "permission_policy_type", value)


@pulumi.input_type
class DirectorySamlIdentityProviderConfigurationArgs:
    def __init__(__self__, *,
                 encoded_metadata_document: Optional[pulumi.Input[str]] = None,
                 sso_status: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] encoded_metadata_document: Base64 encoded IdP metadata document.
        :param pulumi.Input[str] sso_status: SAML SSO login enabled status. Valid values: `Enabled` or `Disabled`. Default to `Disabled`.
        """
        if encoded_metadata_document is not None:
            pulumi.set(__self__, "encoded_metadata_document", encoded_metadata_document)
        if sso_status is not None:
            pulumi.set(__self__, "sso_status", sso_status)

    @property
    @pulumi.getter(name="encodedMetadataDocument")
    def encoded_metadata_document(self) -> Optional[pulumi.Input[str]]:
        """
        Base64 encoded IdP metadata document.
        """
        return pulumi.get(self, "encoded_metadata_document")

    @encoded_metadata_document.setter
    def encoded_metadata_document(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "encoded_metadata_document", value)

    @property
    @pulumi.getter(name="ssoStatus")
    def sso_status(self) -> Optional[pulumi.Input[str]]:
        """
        SAML SSO login enabled status. Valid values: `Enabled` or `Disabled`. Default to `Disabled`.
        """
        return pulumi.get(self, "sso_status")

    @sso_status.setter
    def sso_status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "sso_status", value)


