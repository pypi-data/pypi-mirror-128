Loading simple.Foo from examples/simple.py
==================================================
                       Foo
==================================================

--------------------------------------------------
          Functions generated by pyserde
--------------------------------------------------
def to_iter(obj, reuse_instances=True, convert_sets=False):
    if reuse_instances is Ellipsis:
        reuse_instances = True
    if convert_sets is Ellipsis:
        convert_sets = False

    if not is_dataclass(obj):
        return copy.deepcopy(obj)

    Foo = serde_scope.types["Foo"]

    res = []

    res.append(obj.i)

    res.append(obj.s)

    res.append(obj.f)

    res.append(obj.b)
    return tuple(res)

def to_dict(obj, reuse_instances=True, convert_sets=False):
    if reuse_instances is Ellipsis:
        reuse_instances = True
    if convert_sets is Ellipsis:
        convert_sets = False

    if not is_dataclass(obj):
        return copy.deepcopy(obj)

    Foo = serde_scope.types["Foo"]
    res = {}
    res["i"] = obj.i

    res["s"] = obj.s

    res["f"] = obj.f

    res["b"] = obj.b

    return res

def from_iter(data, reuse_instances=True):
    if reuse_instances is Ellipsis:
        reuse_instances = True

    Foo = serde_scope.types["Foo"]
    if data is None:
        return None

    return cls(
        data[0],
        data[1],
        data[2],
        data[3],
    )

def from_dict(data, reuse_instances=True):
    if reuse_instances is Ellipsis:
        reuse_instances = True

    Foo = serde_scope.types["Foo"]

    if data is None:
        return None

    return cls(
        data["i"],
        data["s"],
        data["f"],
        data["b"],
    )


--------------------------------------------------
           Function references in scope
--------------------------------------------------
to_iter: <function to_iter at 0x10559adc0>
to_dict: <function to_dict at 0x105d1bee0>
from_iter: <function from_iter at 0x105d1bf70>
from_dict: <function from_dict at 0x105d7f040>

--------------------------------------------------
             Type references in scope
--------------------------------------------------
Foo: <class 'simple.Foo'>

