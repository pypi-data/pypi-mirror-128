import collections
VERSION = "1.5.1"
# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _biolccc
else:
    import _biolccc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    r"""Proxy of C++ swig::SwigPyIterator class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _biolccc.delete_SwigPyIterator

    def value(self):
        r"""value(self) -> PyObject *"""
        return _biolccc.SwigPyIterator_value(self)

    def incr(self, n=1):
        r"""incr(self, n=1) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        r"""decr(self, n=1) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        r"""distance(self, x) -> ptrdiff_t"""
        return _biolccc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        r"""equal(self, x) -> bool"""
        return _biolccc.SwigPyIterator_equal(self, x)

    def copy(self):
        r"""copy(self) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator_copy(self)

    def next(self):
        r"""next(self) -> PyObject *"""
        return _biolccc.SwigPyIterator_next(self)

    def __next__(self):
        r"""__next__(self) -> PyObject *"""
        return _biolccc.SwigPyIterator___next__(self)

    def previous(self):
        r"""previous(self) -> PyObject *"""
        return _biolccc.SwigPyIterator_previous(self)

    def advance(self, n):
        r"""advance(self, n) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        r"""__eq__(self, x) -> bool"""
        return _biolccc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        r"""__ne__(self, x) -> bool"""
        return _biolccc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        r"""__iadd__(self, n) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        r"""__isub__(self, n) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        r"""__add__(self, n) -> SwigPyIterator"""
        return _biolccc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        r"""
        __sub__(self, n) -> SwigPyIterator
        __sub__(self, x) -> ptrdiff_t
        """
        return _biolccc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _biolccc:
_biolccc.SwigPyIterator_swigregister(SwigPyIterator)

import collections.abc
class doubleArray(object):
    r"""Proxy of C++ doubleArray class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, nelements):
        r"""__init__(self, nelements) -> doubleArray"""
        _biolccc.doubleArray_swiginit(self, _biolccc.new_doubleArray(nelements))
    __swig_destroy__ = _biolccc.delete_doubleArray

    def __getitem__(self, index):
        r"""__getitem__(self, index) -> double"""
        return _biolccc.doubleArray___getitem__(self, index)

    def __setitem__(self, index, value):
        r"""__setitem__(self, index, value)"""
        return _biolccc.doubleArray___setitem__(self, index, value)

    def cast(self):
        r"""cast(self) -> double *"""
        return _biolccc.doubleArray_cast(self)

    @staticmethod
    def frompointer(t):
        r"""frompointer(t) -> doubleArray"""
        return _biolccc.doubleArray_frompointer(t)

# Register doubleArray in _biolccc:
_biolccc.doubleArray_swigregister(doubleArray)

def doubleArray_frompointer(t):
    r"""doubleArray_frompointer(t) -> doubleArray"""
    return _biolccc.doubleArray_frompointer(t)

class GradientPointVector(object):
    r"""Proxy of C++ std::vector< BioLCCC::GradientPoint > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _biolccc.GradientPointVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _biolccc.GradientPointVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _biolccc.GradientPointVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< BioLCCC::GradientPoint >::size_type"""
        return _biolccc.GradientPointVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> GradientPointVector"""
        return _biolccc.GradientPointVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _biolccc.GradientPointVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _biolccc.GradientPointVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _biolccc.GradientPointVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> GradientPointVector
        __getitem__(self, i) -> GradientPoint
        """
        return _biolccc.GradientPointVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _biolccc.GradientPointVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> GradientPoint"""
        return _biolccc.GradientPointVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _biolccc.GradientPointVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _biolccc.GradientPointVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< BioLCCC::GradientPoint >::size_type"""
        return _biolccc.GradientPointVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _biolccc.GradientPointVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< BioLCCC::GradientPoint >::iterator"""
        return _biolccc.GradientPointVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< BioLCCC::GradientPoint >::iterator"""
        return _biolccc.GradientPointVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< BioLCCC::GradientPoint >::reverse_iterator"""
        return _biolccc.GradientPointVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< BioLCCC::GradientPoint >::reverse_iterator"""
        return _biolccc.GradientPointVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _biolccc.GradientPointVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< BioLCCC::GradientPoint >::allocator_type"""
        return _biolccc.GradientPointVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _biolccc.GradientPointVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< BioLCCC::GradientPoint >::iterator
        erase(self, first, last) -> std::vector< BioLCCC::GradientPoint >::iterator
        """
        return _biolccc.GradientPointVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> GradientPointVector
        __init__(self, other) -> GradientPointVector
        __init__(self, size) -> GradientPointVector
        __init__(self, size, value) -> GradientPointVector
        """
        _biolccc.GradientPointVector_swiginit(self, _biolccc.new_GradientPointVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _biolccc.GradientPointVector_push_back(self, x)

    def front(self):
        r"""front(self) -> GradientPoint"""
        return _biolccc.GradientPointVector_front(self)

    def back(self):
        r"""back(self) -> GradientPoint"""
        return _biolccc.GradientPointVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _biolccc.GradientPointVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _biolccc.GradientPointVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< BioLCCC::GradientPoint >::iterator
        insert(self, pos, n, x)
        """
        return _biolccc.GradientPointVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _biolccc.GradientPointVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< BioLCCC::GradientPoint >::size_type"""
        return _biolccc.GradientPointVector_capacity(self)
    __swig_destroy__ = _biolccc.delete_GradientPointVector

# Register GradientPointVector in _biolccc:
_biolccc.GradientPointVector_swigregister(GradientPointVector)

class ChemicalGroupVector(object):
    r"""Proxy of C++ std::vector< BioLCCC::ChemicalGroup > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _biolccc.ChemicalGroupVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _biolccc.ChemicalGroupVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _biolccc.ChemicalGroupVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.ChemicalGroupVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> ChemicalGroupVector"""
        return _biolccc.ChemicalGroupVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _biolccc.ChemicalGroupVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _biolccc.ChemicalGroupVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _biolccc.ChemicalGroupVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> ChemicalGroupVector
        __getitem__(self, i) -> ChemicalGroup
        """
        return _biolccc.ChemicalGroupVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _biolccc.ChemicalGroupVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> ChemicalGroup"""
        return _biolccc.ChemicalGroupVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _biolccc.ChemicalGroupVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _biolccc.ChemicalGroupVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.ChemicalGroupVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _biolccc.ChemicalGroupVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.ChemicalGroupVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.ChemicalGroupVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< BioLCCC::ChemicalGroup >::reverse_iterator"""
        return _biolccc.ChemicalGroupVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< BioLCCC::ChemicalGroup >::reverse_iterator"""
        return _biolccc.ChemicalGroupVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _biolccc.ChemicalGroupVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< BioLCCC::ChemicalGroup >::allocator_type"""
        return _biolccc.ChemicalGroupVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _biolccc.ChemicalGroupVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< BioLCCC::ChemicalGroup >::iterator
        erase(self, first, last) -> std::vector< BioLCCC::ChemicalGroup >::iterator
        """
        return _biolccc.ChemicalGroupVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> ChemicalGroupVector
        __init__(self, other) -> ChemicalGroupVector
        __init__(self, size) -> ChemicalGroupVector
        __init__(self, size, value) -> ChemicalGroupVector
        """
        _biolccc.ChemicalGroupVector_swiginit(self, _biolccc.new_ChemicalGroupVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _biolccc.ChemicalGroupVector_push_back(self, x)

    def front(self):
        r"""front(self) -> ChemicalGroup"""
        return _biolccc.ChemicalGroupVector_front(self)

    def back(self):
        r"""back(self) -> ChemicalGroup"""
        return _biolccc.ChemicalGroupVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _biolccc.ChemicalGroupVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _biolccc.ChemicalGroupVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< BioLCCC::ChemicalGroup >::iterator
        insert(self, pos, n, x)
        """
        return _biolccc.ChemicalGroupVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _biolccc.ChemicalGroupVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.ChemicalGroupVector_capacity(self)
    __swig_destroy__ = _biolccc.delete_ChemicalGroupVector

# Register ChemicalGroupVector in _biolccc:
_biolccc.ChemicalGroupVector_swigregister(ChemicalGroupVector)

class DoubleVector(object):
    r"""Proxy of C++ std::vector< double > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _biolccc.DoubleVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _biolccc.DoubleVector___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _biolccc.DoubleVector___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::vector< double >::size_type"""
        return _biolccc.DoubleVector___len__(self)

    def __getslice__(self, i, j):
        r"""__getslice__(self, i, j) -> DoubleVector"""
        return _biolccc.DoubleVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        r"""
        __setslice__(self, i, j)
        __setslice__(self, i, j, v)
        """
        return _biolccc.DoubleVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        r"""__delslice__(self, i, j)"""
        return _biolccc.DoubleVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        r"""
        __delitem__(self, i)
        __delitem__(self, slice)
        """
        return _biolccc.DoubleVector___delitem__(self, *args)

    def __getitem__(self, *args):
        r"""
        __getitem__(self, slice) -> DoubleVector
        __getitem__(self, i) -> std::vector< double >::value_type const &
        """
        return _biolccc.DoubleVector___getitem__(self, *args)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, slice, v)
        __setitem__(self, slice)
        __setitem__(self, i, x)
        """
        return _biolccc.DoubleVector___setitem__(self, *args)

    def pop(self):
        r"""pop(self) -> std::vector< double >::value_type"""
        return _biolccc.DoubleVector_pop(self)

    def append(self, x):
        r"""append(self, x)"""
        return _biolccc.DoubleVector_append(self, x)

    def empty(self):
        r"""empty(self) -> bool"""
        return _biolccc.DoubleVector_empty(self)

    def size(self):
        r"""size(self) -> std::vector< double >::size_type"""
        return _biolccc.DoubleVector_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _biolccc.DoubleVector_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::vector< double >::iterator"""
        return _biolccc.DoubleVector_begin(self)

    def end(self):
        r"""end(self) -> std::vector< double >::iterator"""
        return _biolccc.DoubleVector_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::vector< double >::reverse_iterator"""
        return _biolccc.DoubleVector_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::vector< double >::reverse_iterator"""
        return _biolccc.DoubleVector_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _biolccc.DoubleVector_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::vector< double >::allocator_type"""
        return _biolccc.DoubleVector_get_allocator(self)

    def pop_back(self):
        r"""pop_back(self)"""
        return _biolccc.DoubleVector_pop_back(self)

    def erase(self, *args):
        r"""
        erase(self, pos) -> std::vector< double >::iterator
        erase(self, first, last) -> std::vector< double >::iterator
        """
        return _biolccc.DoubleVector_erase(self, *args)

    def __init__(self, *args):
        r"""
        __init__(self) -> DoubleVector
        __init__(self, other) -> DoubleVector
        __init__(self, size) -> DoubleVector
        __init__(self, size, value) -> DoubleVector
        """
        _biolccc.DoubleVector_swiginit(self, _biolccc.new_DoubleVector(*args))

    def push_back(self, x):
        r"""push_back(self, x)"""
        return _biolccc.DoubleVector_push_back(self, x)

    def front(self):
        r"""front(self) -> std::vector< double >::value_type const &"""
        return _biolccc.DoubleVector_front(self)

    def back(self):
        r"""back(self) -> std::vector< double >::value_type const &"""
        return _biolccc.DoubleVector_back(self)

    def assign(self, n, x):
        r"""assign(self, n, x)"""
        return _biolccc.DoubleVector_assign(self, n, x)

    def resize(self, *args):
        r"""
        resize(self, new_size)
        resize(self, new_size, x)
        """
        return _biolccc.DoubleVector_resize(self, *args)

    def insert(self, *args):
        r"""
        insert(self, pos, x) -> std::vector< double >::iterator
        insert(self, pos, n, x)
        """
        return _biolccc.DoubleVector_insert(self, *args)

    def reserve(self, n):
        r"""reserve(self, n)"""
        return _biolccc.DoubleVector_reserve(self, n)

    def capacity(self):
        r"""capacity(self) -> std::vector< double >::size_type"""
        return _biolccc.DoubleVector_capacity(self)
    __swig_destroy__ = _biolccc.delete_DoubleVector

# Register DoubleVector in _biolccc:
_biolccc.DoubleVector_swigregister(DoubleVector)

class StringChemicalGroupMap(object):
    r"""Proxy of C++ std::map< std::string,BioLCCC::ChemicalGroup > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _biolccc.StringChemicalGroupMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _biolccc.StringChemicalGroupMap___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.StringChemicalGroupMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(self, key) -> ChemicalGroup"""
        return _biolccc.StringChemicalGroupMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(self, key)"""
        return _biolccc.StringChemicalGroupMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(self, key) -> bool"""
        return _biolccc.StringChemicalGroupMap_has_key(self, key)

    def keys(self):
        r"""keys(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupMap_keys(self)

    def values(self):
        r"""values(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupMap_values(self)

    def items(self):
        r"""items(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupMap_items(self)

    def __contains__(self, key):
        r"""__contains__(self, key) -> bool"""
        return _biolccc.StringChemicalGroupMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, key)
        __setitem__(self, key, x)
        """
        return _biolccc.StringChemicalGroupMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> StringChemicalGroupMap
        __init__(self) -> StringChemicalGroupMap
        __init__(self, other) -> StringChemicalGroupMap
        """
        _biolccc.StringChemicalGroupMap_swiginit(self, _biolccc.new_StringChemicalGroupMap(*args))

    def empty(self):
        r"""empty(self) -> bool"""
        return _biolccc.StringChemicalGroupMap_empty(self)

    def size(self):
        r"""size(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.StringChemicalGroupMap_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _biolccc.StringChemicalGroupMap_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.StringChemicalGroupMap_begin(self)

    def end(self):
        r"""end(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.StringChemicalGroupMap_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::reverse_iterator"""
        return _biolccc.StringChemicalGroupMap_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::reverse_iterator"""
        return _biolccc.StringChemicalGroupMap_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _biolccc.StringChemicalGroupMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::map< std::string,BioLCCC::ChemicalGroup >::allocator_type"""
        return _biolccc.StringChemicalGroupMap_get_allocator(self)

    def count(self, x):
        r"""count(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup >::size_type"""
        return _biolccc.StringChemicalGroupMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup >::size_type
        erase(self, position)
        erase(self, first, last)
        """
        return _biolccc.StringChemicalGroupMap_erase(self, *args)

    def find(self, x):
        r"""find(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.StringChemicalGroupMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.StringChemicalGroupMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup >::iterator"""
        return _biolccc.StringChemicalGroupMap_upper_bound(self, x)

    def __str__(self):
        return str(dict(self))

    def __repr__(self):
        return str(dict(self))

    def __eq__(self, other):
        return dict(self) == dict(other)

    __swig_destroy__ = _biolccc.delete_StringChemicalGroupMap

# Register StringChemicalGroupMap in _biolccc:
_biolccc.StringChemicalGroupMap_swigregister(StringChemicalGroupMap)

class StringChemicalGroupPtrMap(object):
    r"""Proxy of C++ std::map< std::string,BioLCCC::ChemicalGroup * > class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        r"""iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupPtrMap_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        r"""__nonzero__(self) -> bool"""
        return _biolccc.StringChemicalGroupPtrMap___nonzero__(self)

    def __bool__(self):
        r"""__bool__(self) -> bool"""
        return _biolccc.StringChemicalGroupPtrMap___bool__(self)

    def __len__(self):
        r"""__len__(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::size_type"""
        return _biolccc.StringChemicalGroupPtrMap___len__(self)
    def __iter__(self):
        return self.key_iterator()
    def iterkeys(self):
        return self.key_iterator()
    def itervalues(self):
        return self.value_iterator()
    def iteritems(self):
        return self.iterator()

    def __getitem__(self, key):
        r"""__getitem__(self, key) -> ChemicalGroup"""
        return _biolccc.StringChemicalGroupPtrMap___getitem__(self, key)

    def __delitem__(self, key):
        r"""__delitem__(self, key)"""
        return _biolccc.StringChemicalGroupPtrMap___delitem__(self, key)

    def has_key(self, key):
        r"""has_key(self, key) -> bool"""
        return _biolccc.StringChemicalGroupPtrMap_has_key(self, key)

    def keys(self):
        r"""keys(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupPtrMap_keys(self)

    def values(self):
        r"""values(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupPtrMap_values(self)

    def items(self):
        r"""items(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupPtrMap_items(self)

    def __contains__(self, key):
        r"""__contains__(self, key) -> bool"""
        return _biolccc.StringChemicalGroupPtrMap___contains__(self, key)

    def key_iterator(self):
        r"""key_iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupPtrMap_key_iterator(self)

    def value_iterator(self):
        r"""value_iterator(self) -> SwigPyIterator"""
        return _biolccc.StringChemicalGroupPtrMap_value_iterator(self)

    def __setitem__(self, *args):
        r"""
        __setitem__(self, key)
        __setitem__(self, key, x)
        """
        return _biolccc.StringChemicalGroupPtrMap___setitem__(self, *args)

    def asdict(self):
        r"""asdict(self) -> PyObject *"""
        return _biolccc.StringChemicalGroupPtrMap_asdict(self)

    def __init__(self, *args):
        r"""
        __init__(self, other) -> StringChemicalGroupPtrMap
        __init__(self) -> StringChemicalGroupPtrMap
        __init__(self, other) -> StringChemicalGroupPtrMap
        """
        _biolccc.StringChemicalGroupPtrMap_swiginit(self, _biolccc.new_StringChemicalGroupPtrMap(*args))

    def empty(self):
        r"""empty(self) -> bool"""
        return _biolccc.StringChemicalGroupPtrMap_empty(self)

    def size(self):
        r"""size(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::size_type"""
        return _biolccc.StringChemicalGroupPtrMap_size(self)

    def swap(self, v):
        r"""swap(self, v)"""
        return _biolccc.StringChemicalGroupPtrMap_swap(self, v)

    def begin(self):
        r"""begin(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::iterator"""
        return _biolccc.StringChemicalGroupPtrMap_begin(self)

    def end(self):
        r"""end(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::iterator"""
        return _biolccc.StringChemicalGroupPtrMap_end(self)

    def rbegin(self):
        r"""rbegin(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::reverse_iterator"""
        return _biolccc.StringChemicalGroupPtrMap_rbegin(self)

    def rend(self):
        r"""rend(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::reverse_iterator"""
        return _biolccc.StringChemicalGroupPtrMap_rend(self)

    def clear(self):
        r"""clear(self)"""
        return _biolccc.StringChemicalGroupPtrMap_clear(self)

    def get_allocator(self):
        r"""get_allocator(self) -> std::map< std::string,BioLCCC::ChemicalGroup * >::allocator_type"""
        return _biolccc.StringChemicalGroupPtrMap_get_allocator(self)

    def count(self, x):
        r"""count(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup * >::size_type"""
        return _biolccc.StringChemicalGroupPtrMap_count(self, x)

    def erase(self, *args):
        r"""
        erase(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup * >::size_type
        erase(self, position)
        erase(self, first, last)
        """
        return _biolccc.StringChemicalGroupPtrMap_erase(self, *args)

    def find(self, x):
        r"""find(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup * >::iterator"""
        return _biolccc.StringChemicalGroupPtrMap_find(self, x)

    def lower_bound(self, x):
        r"""lower_bound(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup * >::iterator"""
        return _biolccc.StringChemicalGroupPtrMap_lower_bound(self, x)

    def upper_bound(self, x):
        r"""upper_bound(self, x) -> std::map< std::string,BioLCCC::ChemicalGroup * >::iterator"""
        return _biolccc.StringChemicalGroupPtrMap_upper_bound(self, x)

    def __str__(self):
        return str(dict(self))

    def __repr__(self):
        return str(dict(self))

    def __eq__(self, other):
        return dict(self) == dict(other)

    __swig_destroy__ = _biolccc.delete_StringChemicalGroupPtrMap

# Register StringChemicalGroupPtrMap in _biolccc:
_biolccc.StringChemicalGroupPtrMap_swigregister(StringChemicalGroupPtrMap)

class BioLCCCException(Exception):
    r"""Proxy of C++ BioLCCC::BioLCCCException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> BioLCCCException"""
        _biolccc.BioLCCCException_swiginit(self, _biolccc.new_BioLCCCException(message))
    __swig_destroy__ = _biolccc.delete_BioLCCCException

    def what(self):
        r"""what(self) -> char const *"""
        return _biolccc.BioLCCCException_what(self)

# Register BioLCCCException in _biolccc:
_biolccc.BioLCCCException_swigregister(BioLCCCException)

class ChemicalGroup(object):
    r"""Proxy of C++ BioLCCC::ChemicalGroup class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self, name="", label="", bindEnergy=0.0, averageMass=0.0, monoisotopicMass=0.0, bindArea=1.0) -> ChemicalGroup"""
        _biolccc.ChemicalGroup_swiginit(self, _biolccc.new_ChemicalGroup(*args))

    def name(self):
        r"""name(self) -> std::string"""
        return _biolccc.ChemicalGroup_name(self)

    def label(self):
        r"""label(self) -> std::string"""
        return _biolccc.ChemicalGroup_label(self)

    def averageMass(self):
        r"""averageMass(self) -> double"""
        return _biolccc.ChemicalGroup_averageMass(self)

    def monoisotopicMass(self):
        r"""monoisotopicMass(self) -> double"""
        return _biolccc.ChemicalGroup_monoisotopicMass(self)

    def bindEnergy(self):
        r"""bindEnergy(self) -> double"""
        return _biolccc.ChemicalGroup_bindEnergy(self)

    def bindArea(self):
        r"""bindArea(self) -> double"""
        return _biolccc.ChemicalGroup_bindArea(self)

    def isNTerminal(self):
        r"""isNTerminal(self) -> bool"""
        return _biolccc.ChemicalGroup_isNTerminal(self)

    def isCTerminal(self):
        r"""isCTerminal(self) -> bool"""
        return _biolccc.ChemicalGroup_isCTerminal(self)

    def isAminoAcid(self):
        r"""isAminoAcid(self) -> bool"""
        return _biolccc.ChemicalGroup_isAminoAcid(self)

    def setName(self, newName):
        r"""setName(self, newName)"""
        return _biolccc.ChemicalGroup_setName(self, newName)

    def setBindEnergy(self, newBindEnergy):
        r"""setBindEnergy(self, newBindEnergy)"""
        return _biolccc.ChemicalGroup_setBindEnergy(self, newBindEnergy)

    def setBindArea(self, newBindArea):
        r"""setBindArea(self, newBindArea)"""
        return _biolccc.ChemicalGroup_setBindArea(self, newBindArea)

    def setAverageMass(self, newAverageMass):
        r"""setAverageMass(self, newAverageMass)"""
        return _biolccc.ChemicalGroup_setAverageMass(self, newAverageMass)

    def setMonoisotopicMass(self, newMonoisotopicMass):
        r"""setMonoisotopicMass(self, newMonoisotopicMass)"""
        return _biolccc.ChemicalGroup_setMonoisotopicMass(self, newMonoisotopicMass)

    def __eq__(self, other):
        return dict(self) == dict(other)

    def __str__(self):
        return str(dict(self))

    def __repr__(self):
        return str(dict(self))

    def __len__(self):
        return len(self._keys);

    def __iter__(self):
        return iter(self._keys)

    def __contains__(self, key):
        return key in self._keys 

    def __getitem__(self, key):
        return {
            'name' : self.name,
            'label': self.label,
            'bindEnergy': self.bindEnergy,
            'bindArea': self.bindArea,
            'averageMass': self.averageMass,
            'monoisotopicMass': self.monoisotopicMass,
        }[key]()

    def __raiseLabelException__(self, value):
        raise RuntimeError('Label cannot be set')

    def __setitem__(self, key, value):
        {
            'name' : self.setName,
            'label': self.__raiseLabelException__,
            'bindEnergy': self.setBindEnergy,
            'bindArea': self.setBindArea,
            'averageMass': self.setAverageMass,
            'monoisotopicMass': self.setMonoisotopicMass,
        }[key](value)

    def __delitem__(self, key):
        pass

    _keys = ['name', 'label', 'bindEnergy', 'bindArea', 'averageMass',
            'monoisotopicMass']

    def keys(self):
        return self._keys

    __swig_destroy__ = _biolccc.delete_ChemicalGroup

# Register ChemicalGroup in _biolccc:
_biolccc.ChemicalGroup_swigregister(ChemicalGroup)

class ChemicalBasisException(BioLCCCException):
    r"""Proxy of C++ BioLCCC::ChemicalBasisException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> ChemicalBasisException"""
        _biolccc.ChemicalBasisException_swiginit(self, _biolccc.new_ChemicalBasisException(message))
    __swig_destroy__ = _biolccc.delete_ChemicalBasisException

# Register ChemicalBasisException in _biolccc:
_biolccc.ChemicalBasisException_swigregister(ChemicalBasisException)

ROD = _biolccc.ROD

CHAIN = _biolccc.CHAIN

RP_ACN_TFA_CHAIN = _biolccc.RP_ACN_TFA_CHAIN

RP_ACN_FA_ROD = _biolccc.RP_ACN_FA_ROD

class ChemicalBasis(object):
    r"""Proxy of C++ BioLCCC::ChemicalBasis class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> ChemicalBasis
        __init__(self, predefinedChemicalBasisId) -> ChemicalBasis
        """
        _biolccc.ChemicalBasis_swiginit(self, _biolccc.new_ChemicalBasis(*args))

    def __chemicalGroups__(self):
        r"""__chemicalGroups__(self) -> StringChemicalGroupMap"""
        return _biolccc.ChemicalBasis___chemicalGroups__(self)

    def defaultNTerminus(self):
        r"""defaultNTerminus(self) -> ChemicalGroup"""
        return _biolccc.ChemicalBasis_defaultNTerminus(self)

    def defaultCTerminus(self):
        r"""defaultCTerminus(self) -> ChemicalGroup"""
        return _biolccc.ChemicalBasis_defaultCTerminus(self)

    def addChemicalGroup(self, newChemicalGroup):
        r"""addChemicalGroup(self, newChemicalGroup)"""
        return _biolccc.ChemicalBasis_addChemicalGroup(self, newChemicalGroup)

    def removeChemicalGroup(self, label):
        r"""removeChemicalGroup(self, label)"""
        return _biolccc.ChemicalBasis_removeChemicalGroup(self, label)

    def clearChemicalGroups(self):
        r"""clearChemicalGroups(self)"""
        return _biolccc.ChemicalBasis_clearChemicalGroups(self)

    def secondSolventBindEnergy(self):
        r"""secondSolventBindEnergy(self) -> double"""
        return _biolccc.ChemicalBasis_secondSolventBindEnergy(self)

    def setSecondSolventBindEnergy(self, newEnergy):
        r"""setSecondSolventBindEnergy(self, newEnergy)"""
        return _biolccc.ChemicalBasis_setSecondSolventBindEnergy(self, newEnergy)

    def setPolymerModel(self, newModel):
        r"""setPolymerModel(self, newModel)"""
        return _biolccc.ChemicalBasis_setPolymerModel(self, newModel)

    def polymerModel(self):
        r"""polymerModel(self) -> BioLCCC::PolymerModel const"""
        return _biolccc.ChemicalBasis_polymerModel(self)

    def monomerLength(self):
        r"""monomerLength(self) -> double"""
        return _biolccc.ChemicalBasis_monomerLength(self)

    def setMonomerLength(self, newMonomerLength):
        r"""setMonomerLength(self, newMonomerLength)"""
        return _biolccc.ChemicalBasis_setMonomerLength(self, newMonomerLength)

    def kuhnLength(self):
        r"""kuhnLength(self) -> double"""
        return _biolccc.ChemicalBasis_kuhnLength(self)

    def setKuhnLength(self, newKuhnLength):
        r"""setKuhnLength(self, newKuhnLength)"""
        return _biolccc.ChemicalBasis_setKuhnLength(self, newKuhnLength)

    def adsorptionLayerWidth(self):
        r"""adsorptionLayerWidth(self) -> double"""
        return _biolccc.ChemicalBasis_adsorptionLayerWidth(self)

    def setAdsorptionLayerWidth(self, newAdsorptionLayerWidth):
        r"""setAdsorptionLayerWidth(self, newAdsorptionLayerWidth)"""
        return _biolccc.ChemicalBasis_setAdsorptionLayerWidth(self, newAdsorptionLayerWidth)

    def adsorptionLayerFactors(self):
        r"""adsorptionLayerFactors(self) -> DoubleVector"""
        return _biolccc.ChemicalBasis_adsorptionLayerFactors(self)

    def setAdsorptionLayerFactors(self, newAdsorptionLayerFactors):
        r"""setAdsorptionLayerFactors(self, newAdsorptionLayerFactors)"""
        return _biolccc.ChemicalBasis_setAdsorptionLayerFactors(self, newAdsorptionLayerFactors)

    def snyderApproximation(self):
        r"""snyderApproximation(self) -> bool"""
        return _biolccc.ChemicalBasis_snyderApproximation(self)

    def setSnyderApproximation(self, flag):
        r"""setSnyderApproximation(self, flag)"""
        return _biolccc.ChemicalBasis_setSnyderApproximation(self, flag)

    def specialRodModel(self):
        r"""specialRodModel(self) -> bool"""
        return _biolccc.ChemicalBasis_specialRodModel(self)

    def setSpecialRodModel(self, flag):
        r"""setSpecialRodModel(self, flag)"""
        return _biolccc.ChemicalBasis_setSpecialRodModel(self, flag)

    def neglectPartiallyDesorbedStates(self):
        r"""neglectPartiallyDesorbedStates(self) -> bool"""
        return _biolccc.ChemicalBasis_neglectPartiallyDesorbedStates(self)

    def setNeglectPartiallyDesorbedStates(self, flag):
        r"""setNeglectPartiallyDesorbedStates(self, flag)"""
        return _biolccc.ChemicalBasis_setNeglectPartiallyDesorbedStates(self, flag)

    def firstSolventDensity(self):
        r"""firstSolventDensity(self) -> double"""
        return _biolccc.ChemicalBasis_firstSolventDensity(self)

    def setFirstSolventDensity(self, newFirstSolventDensity):
        r"""setFirstSolventDensity(self, newFirstSolventDensity)"""
        return _biolccc.ChemicalBasis_setFirstSolventDensity(self, newFirstSolventDensity)

    def secondSolventDensity(self):
        r"""secondSolventDensity(self) -> double"""
        return _biolccc.ChemicalBasis_secondSolventDensity(self)

    def setSecondSolventDensity(self, newSecondSolventDensity):
        r"""setSecondSolventDensity(self, newSecondSolventDensity)"""
        return _biolccc.ChemicalBasis_setSecondSolventDensity(self, newSecondSolventDensity)

    def firstSolventAverageMass(self):
        r"""firstSolventAverageMass(self) -> double"""
        return _biolccc.ChemicalBasis_firstSolventAverageMass(self)

    def setFirstSolventAverageMass(self, newFirstSolventAverageMass):
        r"""setFirstSolventAverageMass(self, newFirstSolventAverageMass)"""
        return _biolccc.ChemicalBasis_setFirstSolventAverageMass(self, newFirstSolventAverageMass)

    def secondSolventAverageMass(self):
        r"""secondSolventAverageMass(self) -> double"""
        return _biolccc.ChemicalBasis_secondSolventAverageMass(self)

    def setSecondSolventAverageMass(self, newSecondSolventAverageMass):
        r"""setSecondSolventAverageMass(self, newSecondSolventAverageMass)"""
        return _biolccc.ChemicalBasis_setSecondSolventAverageMass(self, newSecondSolventAverageMass)

    def setPredefinedChemicalBasis(self, predefinedChemicalBasisId):
        r"""setPredefinedChemicalBasis(self, predefinedChemicalBasisId) -> ChemicalBasis"""
        return _biolccc.ChemicalBasis_setPredefinedChemicalBasis(self, predefinedChemicalBasisId)

    def __ptrChemicalGroups__(self):
        r"""__ptrChemicalGroups__(self) -> StringChemicalGroupPtrMap"""
        return _biolccc.ChemicalBasis___ptrChemicalGroups__(self)

    def __eq__(self, other):
        return dict(self) == dict(other)

    def __repr__(self):
        return str(dict(self))

    def __str__(self):
        return str(dict(self))

    def __len__(self):
        return len(self._keys);

    def __iter__(self):
        return iter(self._keys)

    def __contains__(self, key):
        return key in self._keys 

    def chemicalGroups(self):
        return self.__ptrChemicalGroups__()

    def __getitem__(self, key):
        return {
            'chemicalGroups': self.__ptrChemicalGroups__,
            'firstSolventDensity': self.firstSolventDensity,
            'firstSolventAverageMass': self.firstSolventAverageMass,
            'secondSolventDensity': self.secondSolventDensity,
            'secondSolventAverageMass': self.secondSolventAverageMass,
            'secondSolventBindEnergy': self.secondSolventBindEnergy,
            'adsorptionLayerWidth': self.adsorptionLayerWidth,
            'adsorptionLayerFactors': self.adsorptionLayerFactors,
            'kuhnLength': self.kuhnLength,
            'monomerLength': self.monomerLength,
            'polymerModel': self.polymerModel,
            'snyderApproximation': self.snyderApproximation,
            'specialRodModel': self.specialRodModel,
        }[key]()

    def __setitem__(self, key, value):
        {
            'chemicalGroups' : self.setChemicalGroups,
            'firstSolventDensity': self.setFirstSolventDensity,
            'firstSolventAverageMass': self.setFirstSolventAverageMass,
            'secondSolventDensity': self.setSecondSolventDensity,
            'secondSolventAverageMass': self.setSecondSolventAverageMass,
            'secondSolventBindEnergy': self.setSecondSolventBindEnergy,
            'adsorptionLayerWidth': self.setAdsorptionLayerWidth,
            'adsorptionLayerFactors': self.setAdsorptionLayerFactors,
            'kuhnLength': self.setKuhnLength,
            'monomerLength': self.setMonomerLength,
            'polymerModel': self.setPolymerModel,
            'snyderApproximation': self.setSnyderApproximation,
            'specialRodModel': self.setSpecialRodModel,
        }[key](value)

    def __delitem__(self, key):
        pass

    _keys = ['chemicalGroups', 'firstSolventDensity', 
             'firstSolventAverageMass',
             'secondSolventDensity', 'secondSolventAverageMass',
             'secondSolventBindEnergy', 'adsorptionLayerWidth', 
             'adsorptionLayerFactors', 'kuhnLength', 'monomerLength', 
             'polymerModel', 'snyderApproximation', 'specialRodModel']

    def keys(self):
        return self._keys

    def __getstate__(self):
        state_dict = {}
        for key in self:
            if key != 'chemicalGroups':
                state_dict[key] = self[key]
        state_dict['chemicalGroups'] = {}
        for key in self['chemicalGroups']:
            state_dict['chemicalGroups'][key] = (
                dict(self['chemicalGroups'][key]))
        return state_dict

    def __setstate__(self, state_dict):
        for key in state_dict:
            self[key] = state_dict[key]

    def __reduce__(self):
        return (ChemicalBasis, (), self.__getstate__(),)

    def setChemicalGroups(self, chemicalGroupsDict):
        self.clearChemicalGroups()
        for key, value in chemicalGroupsDict.items():
            if type(value).__name__ == 'dict':
                self.addChemicalGroup(
                    ChemicalGroup(
                        value['name'],
                        value['label'],
                        value['bindEnergy'],
                        value['averageMass'],
                        value['monoisotopicMass'],
                        value['bindArea']))
            elif type(value).__name__ == 'pyteomics.biolccc.ChemicalBasis':
                self.addChemicalGroup(value)
            else:
                raise Exception('pyteomics.biolccc', 'wrong type for ChemicalGroup')

    __swig_destroy__ = _biolccc.delete_ChemicalBasis

# Register ChemicalBasis in _biolccc:
_biolccc.ChemicalBasis_swigregister(ChemicalBasis)

class GradientPointException(BioLCCCException):
    r"""Proxy of C++ BioLCCC::GradientPointException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> GradientPointException"""
        _biolccc.GradientPointException_swiginit(self, _biolccc.new_GradientPointException(message))
    __swig_destroy__ = _biolccc.delete_GradientPointException

# Register GradientPointException in _biolccc:
_biolccc.GradientPointException_swigregister(GradientPointException)

class GradientPoint(object):
    r"""Proxy of C++ BioLCCC::GradientPoint class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, iTime=0.0, iConcentrationB=0.0):
        r"""__init__(self, iTime=0.0, iConcentrationB=0.0) -> GradientPoint"""
        _biolccc.GradientPoint_swiginit(self, _biolccc.new_GradientPoint(iTime, iConcentrationB))

    def time(self):
        r"""time(self) -> double"""
        return _biolccc.GradientPoint_time(self)

    def concentrationB(self):
        r"""concentrationB(self) -> double"""
        return _biolccc.GradientPoint_concentrationB(self)

    def setTime(self, newTime):
        r"""setTime(self, newTime)"""
        return _biolccc.GradientPoint_setTime(self, newTime)

    def setConcentrationB(self, newConcentrationB):
        r"""setConcentrationB(self, newConcentrationB)"""
        return _biolccc.GradientPoint_setConcentrationB(self, newConcentrationB)

    def __eq__(self, other):
        return dict(self) == dict(other)

    def __str__(self):
        return str(dict(self))

    def __repr__(self):
        return str(dict(self))

    def __len__(self):
        return len(self._keys);

    def __iter__(self):
        return iter(self._keys)

    def __contains__(self, key):
        return key in self._keys 

    def __getitem__(self, key):
        return {
            'time' : self.time,
            'concentrationB': self.concentrationB,
        }[key]()

    def __setitem__(self, key, value):
        {
            'time' : self.setName,
            'concentrationB': self.setConcentrationB,
        }[key](value)

    def __delitem__(self, key):
        pass

    _keys = ['time', 'concentrationB']

    def keys(self):
        return self._keys

    __swig_destroy__ = _biolccc.delete_GradientPoint

# Register GradientPoint in _biolccc:
_biolccc.GradientPoint_swigregister(GradientPoint)

class GradientException(BioLCCCException):
    r"""Proxy of C++ BioLCCC::GradientException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> GradientException"""
        _biolccc.GradientException_swiginit(self, _biolccc.new_GradientException(message))
    __swig_destroy__ = _biolccc.delete_GradientException

# Register GradientException in _biolccc:
_biolccc.GradientException_swigregister(GradientException)

class Gradient(GradientPointVector):
    r"""Proxy of C++ BioLCCC::Gradient class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        __init__(self) -> Gradient
        __init__(self, initialConcentrationB, finalConcentrationB, time) -> Gradient
        """
        _biolccc.Gradient_swiginit(self, _biolccc.new_Gradient(*args))

    def addPoint(self, *args):
        r"""
        addPoint(self, iPoint) -> Gradient
        addPoint(self, iTime, iConcentrationB) -> Gradient
        """
        return _biolccc.Gradient_addPoint(self, *args)

    def __str__(self):
        return str(list(self))

    def __repr__(self):
        return str(list(self))

    def __eq__(self, other):
        return list(self) == list(other)

    __swig_destroy__ = _biolccc.delete_Gradient

# Register Gradient in _biolccc:
_biolccc.Gradient_swigregister(Gradient)

class ChromoConditionsException(BioLCCCException):
    r"""Proxy of C++ BioLCCC::ChromoConditionsException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> ChromoConditionsException"""
        _biolccc.ChromoConditionsException_swiginit(self, _biolccc.new_ChromoConditionsException(message))
    __swig_destroy__ = _biolccc.delete_ChromoConditionsException

# Register ChromoConditionsException in _biolccc:
_biolccc.ChromoConditionsException_swigregister(ChromoConditionsException)

class ChromoConditions(object):
    r"""Proxy of C++ BioLCCC::ChromoConditions class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""__init__(self, iColumnLength=150.0, iColumnDiameter=0.075, iColumnPoreSize=100.0, iGradient=BioLCCC::Gradient(0.0, 50.0, 60.0), iSecondSolventConcentrationA=2.0, iSecondSolventConcentrationB=80.0, iDelayTime=0.0, iFlowRate=0.0003, iDV=0.0, iColumnRelativeStrength=1.0, iColumnVpToVtot=0.5, iColumnPorosity=0.9, iTemperature=293.0) -> ChromoConditions"""
        _biolccc.ChromoConditions_swiginit(self, _biolccc.new_ChromoConditions(*args))

    def columnLength(self):
        r"""columnLength(self) -> double"""
        return _biolccc.ChromoConditions_columnLength(self)

    def setColumnLength(self, newColumnLength):
        r"""setColumnLength(self, newColumnLength)"""
        return _biolccc.ChromoConditions_setColumnLength(self, newColumnLength)

    def columnDiameter(self):
        r"""columnDiameter(self) -> double"""
        return _biolccc.ChromoConditions_columnDiameter(self)

    def setColumnDiameter(self, newColumnDiameter):
        r"""setColumnDiameter(self, newColumnDiameter)"""
        return _biolccc.ChromoConditions_setColumnDiameter(self, newColumnDiameter)

    def columnPoreSize(self):
        r"""columnPoreSize(self) -> double"""
        return _biolccc.ChromoConditions_columnPoreSize(self)

    def setColumnPoreSize(self, newColumnPoreSize):
        r"""setColumnPoreSize(self, newColumnPoreSize)"""
        return _biolccc.ChromoConditions_setColumnPoreSize(self, newColumnPoreSize)

    def columnVpToVtot(self):
        r"""columnVpToVtot(self) -> double"""
        return _biolccc.ChromoConditions_columnVpToVtot(self)

    def setColumnVpToVtot(self, newColumnVpToVtot):
        r"""setColumnVpToVtot(self, newColumnVpToVtot)"""
        return _biolccc.ChromoConditions_setColumnVpToVtot(self, newColumnVpToVtot)

    def columnPorosity(self):
        r"""columnPorosity(self) -> double"""
        return _biolccc.ChromoConditions_columnPorosity(self)

    def setColumnPorosity(self, newColumnPorosity):
        r"""setColumnPorosity(self, newColumnPorosity)"""
        return _biolccc.ChromoConditions_setColumnPorosity(self, newColumnPorosity)

    def columnTotalVolume(self):
        r"""columnTotalVolume(self) -> double"""
        return _biolccc.ChromoConditions_columnTotalVolume(self)

    def columnInterstitialVolume(self):
        r"""columnInterstitialVolume(self) -> double"""
        return _biolccc.ChromoConditions_columnInterstitialVolume(self)

    def columnPoreVolume(self):
        r"""columnPoreVolume(self) -> double"""
        return _biolccc.ChromoConditions_columnPoreVolume(self)

    def temperature(self):
        r"""temperature(self) -> double"""
        return _biolccc.ChromoConditions_temperature(self)

    def setTemperature(self, newTemperature):
        r"""setTemperature(self, newTemperature)"""
        return _biolccc.ChromoConditions_setTemperature(self, newTemperature)

    def columnRelativeStrength(self):
        r"""columnRelativeStrength(self) -> double"""
        return _biolccc.ChromoConditions_columnRelativeStrength(self)

    def setColumnRelativeStrength(self, newColumnRelativeStrength):
        r"""setColumnRelativeStrength(self, newColumnRelativeStrength)"""
        return _biolccc.ChromoConditions_setColumnRelativeStrength(self, newColumnRelativeStrength)

    def flowRate(self):
        r"""flowRate(self) -> double"""
        return _biolccc.ChromoConditions_flowRate(self)

    def setFlowRate(self, newFlowRate):
        r"""setFlowRate(self, newFlowRate)"""
        return _biolccc.ChromoConditions_setFlowRate(self, newFlowRate)

    def dV(self):
        r"""dV(self) -> double"""
        return _biolccc.ChromoConditions_dV(self)

    def setDV(self, newDV):
        r"""setDV(self, newDV)"""
        return _biolccc.ChromoConditions_setDV(self, newDV)

    def delayTime(self):
        r"""delayTime(self) -> double"""
        return _biolccc.ChromoConditions_delayTime(self)

    def setDelayTime(self, newDelayTime):
        r"""setDelayTime(self, newDelayTime)"""
        return _biolccc.ChromoConditions_setDelayTime(self, newDelayTime)

    def secondSolventConcentrationA(self):
        r"""secondSolventConcentrationA(self) -> double"""
        return _biolccc.ChromoConditions_secondSolventConcentrationA(self)

    def setSecondSolventConcentrationA(self, newSecondSolventConcentrationA):
        r"""setSecondSolventConcentrationA(self, newSecondSolventConcentrationA)"""
        return _biolccc.ChromoConditions_setSecondSolventConcentrationA(self, newSecondSolventConcentrationA)

    def secondSolventConcentrationB(self):
        r"""secondSolventConcentrationB(self) -> double"""
        return _biolccc.ChromoConditions_secondSolventConcentrationB(self)

    def setSecondSolventConcentrationB(self, newSecondSolventConcentrationB):
        r"""setSecondSolventConcentrationB(self, newSecondSolventConcentrationB)"""
        return _biolccc.ChromoConditions_setSecondSolventConcentrationB(self, newSecondSolventConcentrationB)

    def gradient(self):
        r"""gradient(self) -> Gradient"""
        return _biolccc.ChromoConditions_gradient(self)

    def setGradient(self, newGradient):
        r"""setGradient(self, newGradient)"""
        return _biolccc.ChromoConditions_setGradient(self, newGradient)

    def mixingCorrection(self):
        r"""mixingCorrection(self) -> bool"""
        return _biolccc.ChromoConditions_mixingCorrection(self)

    def setMixingCorrection(self, flag):
        r"""setMixingCorrection(self, flag)"""
        return _biolccc.ChromoConditions_setMixingCorrection(self, flag)

    def SSConcentrations(self):
        r"""SSConcentrations(self) -> DoubleVector"""
        return _biolccc.ChromoConditions_SSConcentrations(self)

    def __eq__(self, other):
        return dict(self) == dict(other)

    def __str__(self):
        return str(dict(self))

    def __repr__(self):
        return str(dict(self))

    def __len__(self):
        return len(self._keys);

    def __iter__(self):
        return iter(self._keys)

    def __contains__(self, key):
        return key in self._keys 

    def __getitem__(self, key):
        return {
            'columnLength': self.columnLength,
            'columnDiameter': self.columnDiameter,
            'columnPoreSize': self.columnPoreSize,
            'columnRelativeStrength': self.columnRelativeStrength,
            'columnVpToVtot': self.columnVpToVtot,
            'columnPorosity': self.columnPorosity,
            'delayTime': self.delayTime,
            'dV': self.dV,
            'flowRate': self.flowRate,
            'gradient': self.gradient,
            'secondSolventConcentrationA':
                self.secondSolventConcentrationA,
            'secondSolventConcentrationB':
                self.secondSolventConcentrationB,
            'temperature': self.temperature,
            'mixingCorrection': self.mixingCorrection,
        }[key]()

    def __setitem__(self, key, value):
        return {
            'columnLength': self.setColumnLength,
            'columnDiameter': self.setColumnDiameter,
            'columnPoreSize': self.setColumnPoreSize,
            'columnRelativeStrength': self.setColumnRelativeStrength,
            'columnVpToVtot': self.setColumnVpToVtot,
            'columnPorosity': self.setColumnPorosity,
            'delayTime': self.setDelayTime,
            'dV': self.setDV,
            'flowRate': self.setFlowRate,
            'gradient': self.setGradient,
            'secondSolventConcentrationA':
                self.setSecondSolventConcentrationA,
            'secondSolventConcentrationB':
                self.setSecondSolventConcentrationB,
            'temperature': self.setTemperature,
            'mixingCorrection': self.setMixingCorrection,
        }[key](value)

    def __delitem__(self, key):
        pass

    _keys = ['columnLength', 'columnDiameter', 'columnPoreSize', 
             'gradient', 'secondSolventConcentrationA',
             'secondSolventConcentrationB', 'delayTime', 'flowRate',
             'dV', 'columnRelativeStrength', 'columnVpToVtot',
             'columnPorosity', 'temperature', 'mixingCorrection']

    def keys(self):
        return self._keys

    def __getstate__(self):
        state_dict = {}
        for key in self:
            if key != 'gradient':
                state_dict[key] = self[key]
        state_dict['gradient'] = []
        for point in self['gradient']:
            state_dict['gradient'].append(dict(point))
        return state_dict

    def __setstate__(self, state_dict):
        for key in state_dict:
            if key != 'gradient':
                self[key] = state_dict[key]
        gradient = Gradient()
        for point in state_dict['gradient']:
            if type(point).__name__ == 'dict':
                gradient.addPoint(
                    point['time'], point['concentrationB'])
            elif type(point).__name__ == 'pyteomics.biolccc.GradientPoint':
                gradient.addPoint(point)
            else:
                raise Exception('pyteomics.biolccc', 'wrong type for GradientPoint')
        self['gradient'] = gradient

    def __reduce__(self):
        return (ChromoConditions, (), self.__getstate__(),)

    __swig_destroy__ = _biolccc.delete_ChromoConditions

# Register ChromoConditions in _biolccc:
_biolccc.ChromoConditions_swigregister(ChromoConditions)


def fitSpline(x, y, n, y2):
    r"""fitSpline(x, y, n, y2)"""
    return _biolccc.fitSpline(x, y, n, y2)

def calculateSpline(x, y, y2, n, x_in):
    r"""calculateSpline(x, y, y2, n, x_in) -> double"""
    return _biolccc.calculateSpline(x, y, y2, n, x_in)

def linInterpolate(x, y, n, x_in):
    r"""linInterpolate(x, y, n, x_in) -> double"""
    return _biolccc.linInterpolate(x, y, n, x_in)

def polInterpolate(x, y, n, x_in):
    r"""polInterpolate(x, y, n, x_in) -> double"""
    return _biolccc.polInterpolate(x, y, n, x_in)

def partPolInterpolate(x, y, n, n_part, x_in):
    r"""partPolInterpolate(x, y, n, n_part, x_in) -> double"""
    return _biolccc.partPolInterpolate(x, y, n, n_part, x_in)

def solveMatrixEquation(m, rhs, n):
    r"""solveMatrixEquation(m, rhs, n)"""
    return _biolccc.solveMatrixEquation(m, rhs, n)

def fitPolynomial(x, y, n):
    r"""fitPolynomial(x, y, n)"""
    return _biolccc.fitPolynomial(x, y, n)

def calculatePolynomial(coeffs, n, x):
    r"""calculatePolynomial(coeffs, n, x) -> double"""
    return _biolccc.calculatePolynomial(coeffs, n, x)
class ParsingException(BioLCCCException):
    r"""Proxy of C++ BioLCCC::ParsingException class."""

    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, message):
        r"""__init__(self, message) -> ParsingException"""
        _biolccc.ParsingException_swiginit(self, _biolccc.new_ParsingException(message))
    __swig_destroy__ = _biolccc.delete_ParsingException

# Register ParsingException in _biolccc:
_biolccc.ParsingException_swigregister(ParsingException)


def parseSequence(source, chemBasis):
    r"""parseSequence(source, chemBasis) -> ChemicalGroupVector"""
    return _biolccc.parseSequence(source, chemBasis)

def calculateMonomerEnergyProfile(parsedSequence, chemBasis, secondSolventConcentration, columnRelativeStrength, temperature):
    r"""calculateMonomerEnergyProfile(parsedSequence, chemBasis, secondSolventConcentration, columnRelativeStrength, temperature) -> DoubleVector"""
    return _biolccc.calculateMonomerEnergyProfile(parsedSequence, chemBasis, secondSolventConcentration, columnRelativeStrength, temperature)

def calculateSegmentEnergyProfile(monomerEnergyProfile, monomerLength, kuhnLength):
    r"""calculateSegmentEnergyProfile(monomerEnergyProfile, monomerLength, kuhnLength) -> DoubleVector"""
    return _biolccc.calculateSegmentEnergyProfile(monomerEnergyProfile, monomerLength, kuhnLength)

def calculateBoltzmannFactorProfile(effectiveEnergyProfile):
    r"""calculateBoltzmannFactorProfile(effectiveEnergyProfile) -> DoubleVector"""
    return _biolccc.calculateBoltzmannFactorProfile(effectiveEnergyProfile)

def calculateKdChain(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature):
    r"""calculateKdChain(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature) -> double"""
    return _biolccc.calculateKdChain(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature)

def partitionFunctionRodPartiallySubmergedTermSpecial(segmentLength, slitWidth, layerWidth, N, n1):
    r"""partitionFunctionRodPartiallySubmergedTermSpecial(segmentLength, slitWidth, layerWidth, N, n1) -> double"""
    return _biolccc.partitionFunctionRodPartiallySubmergedTermSpecial(segmentLength, slitWidth, layerWidth, N, n1)

def partitionFunctionRodPartiallySubmergedTermGeneral(segmentLength, slitWidth, layerWidth, N, n1, n2):
    r"""partitionFunctionRodPartiallySubmergedTermGeneral(segmentLength, slitWidth, layerWidth, N, n1, n2) -> double"""
    return _biolccc.partitionFunctionRodPartiallySubmergedTermGeneral(segmentLength, slitWidth, layerWidth, N, n1, n2)

def rodAdsorptionEnergy(rodEnergyProfile, n1, n2):
    r"""rodAdsorptionEnergy(rodEnergyProfile, n1, n2) -> double"""
    return _biolccc.rodAdsorptionEnergy(rodEnergyProfile, n1, n2)

def partitionFunctionRodFreeSlit(rodLength, slitWidth):
    r"""partitionFunctionRodFreeSlit(rodLength, slitWidth) -> double"""
    return _biolccc.partitionFunctionRodFreeSlit(rodLength, slitWidth)

def partitionFunctionRodPartiallySubmergedGeneral(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed=False):
    r"""partitionFunctionRodPartiallySubmergedGeneral(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed=False) -> double"""
    return _biolccc.partitionFunctionRodPartiallySubmergedGeneral(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed)

def partitionFunctionRodPartiallySubmergedSpecial(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed=False):
    r"""partitionFunctionRodPartiallySubmergedSpecial(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed=False) -> double"""
    return _biolccc.partitionFunctionRodPartiallySubmergedSpecial(segmentLength, slitWidth, layerWidth, rodEnergyProfile, reversed)

def partitionFunctionRodFreeVolume(rodLength, slitWidth):
    r"""partitionFunctionRodFreeVolume(rodLength, slitWidth) -> double"""
    return _biolccc.partitionFunctionRodFreeVolume(rodLength, slitWidth)

def calculateKdRod(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature):
    r"""calculateKdRod(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature) -> double"""
    return _biolccc.calculateKdRod(parsedSequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature)

def calculateRT(*args):
    r"""calculateRT(sequence, chemBasis, conditions=standardChromoConditions, numInterpolationPoints=0, continueGradient=True, backwardCompatibility=False) -> double"""
    return _biolccc.calculateRT(*args)

def calculateAverageMass(sequence, chemBasis):
    r"""calculateAverageMass(sequence, chemBasis) -> double"""
    return _biolccc.calculateAverageMass(sequence, chemBasis)

def calculateMonoisotopicMass(sequence, chemBasis):
    r"""calculateMonoisotopicMass(sequence, chemBasis) -> double"""
    return _biolccc.calculateMonoisotopicMass(sequence, chemBasis)

def calculateKd(sequence, secondSolventConcentration, chemBasis, columnPoreSize=100.0, columnRelativeStrength=1.0, temperature=293.0):
    r"""calculateKd(sequence, secondSolventConcentration, chemBasis, columnPoreSize=100.0, columnRelativeStrength=1.0, temperature=293.0) -> double"""
    return _biolccc.calculateKd(sequence, secondSolventConcentration, chemBasis, columnPoreSize, columnRelativeStrength, temperature)

cvar = _biolccc.cvar
standardChromoConditions = cvar.standardChromoConditions
rpAcnTfaChain = cvar.rpAcnTfaChain
rpAcnFaRod = cvar.rpAcnFaRod

