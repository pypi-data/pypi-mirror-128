from rest_framework import status
from rest_framework.decorators import api_view, parser_classes
from rest_framework.parsers import JSONParser
from rest_framework.response import Response
from .models import {% for k,_ in names.items() %}{% if loop.last %}{{ k }}{% else %}{{ k }},{% endif %}{% endfor %}

from .serializers import {% for name in names %}{% if loop.last %}{{ name }}Serializer{% else %}{{ name }}Serializer,{% endif %}{% endfor %}

{% for k, v in  names.items() %}
@api_view(['GET', 'POST'])
@parser_classes([JSONParser])
def {{ v }}_list(request):
    if request.method == 'GET':
        {{ v }} = {{ k }}.objects.all()
        serializer = {{ k }}Serializer({{ v }}, many=True)
        return Response(serializer.data, status=status.HTTP_200_OK)

    elif request.method == 'POST':
        serializer = {{ k }}Serializer(data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


@api_view(['GET', 'PUT', 'DELETE'])
@parser_classes([JSONParser])
def {{ v }}_detail(request, pk):
    try:
        {{ v }} = {{ k }}.objects.get(pk=pk)
    except {{ k }}.DoesNotExist:
        return Response(status=status.HTTP_404_NOT_FOUND)

    if request.method == 'GET':
        serializer = {{ k }}Serializer({{ v }})
        return Response(serializer.data, status=status.HTTP_200_OK)

    elif request.method == 'PUT':
        serializer = {{ k }}Serializer({{ v }}, data=request.data)
        if serializer.is_valid():
            serializer.save()
            return Response(serializer.data, status=status.HTTP_200_OK)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    elif request.method == 'DELETE':
        {{ v }}.delete()
        return Response(status=status.HTTP_204_NO_CONTENT)
{% endfor %}