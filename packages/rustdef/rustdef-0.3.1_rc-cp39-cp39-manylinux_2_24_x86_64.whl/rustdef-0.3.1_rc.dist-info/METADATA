Metadata-Version: 2.1
Name: rustdef
Version: 0.3.1_rc
Classifier: Framework :: Jupyter
Classifier: Framework :: IPython
Classifier: Operating System :: MacOS
Classifier: Operating System :: POSIX :: Linux
Classifier: Programming Language :: Python :: 3.6
Classifier: Programming Language :: Python :: 3.7
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Rust
Requires-Dist: jupyter
Requires-Dist: pip
Requires-Dist: toml>=0.10
Requires-Dist: maturin>=0.12
Summary: Jupyter extension which executes Rust functions in Python
Keywords: Jupyter notebook,Rust,Jupyter extension
Author: Ryosuke Kamesawa <emak.ryo@gmail.com>
Author-email: Ryosuke Kamesawa <emak.ryo@gmail.com>
License: MIT License
	
	Copyright (c) 2020 Ryosuke Kamesawa
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in all
	copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
	SOFTWARE.
	
Requires-Python: >=3.6
Description-Content-Type: text/markdown; charset=UTF-8; variant=GFM

# rustdef

[![Test](https://github.com/emakryo/rustdef/workflows/Test/badge.svg?branch=master)](https://github.com/emakryo/rustdef/actions?query=branch%3Amaster)
[![PyPI version](https://badge.fury.io/py/rustdef.svg)](https://badge.fury.io/py/rustdef)

Jupyter extension for jupyter notebook and rust user.

You can define functions in rust and run them as python functions.
This extension is built on [PyO3](https://github.com/PyO3/pyo3) and
[maturin](https://github.com/PyO3/maturin).

## Examples

- [Get Started](examples/Get%20started.ipynb)
- [Type conversion](examples/types.ipynb)
- [Numpy example](examples/numpy.ipynb)

## Prerequisite

- Python >= 3.6 and pip >= 19.3
- [Jupyter notebook](https://jupyter.org/install.html)
- [Rust](https://www.rust-lang.org/tools/install)
- [cargo-edit](https://crates.io/crates/cargo-edit)

## Install

```shell script
$ pip install rustdef
```

## Usage

Define rust functions,
```rust
%%rustdef
#[pyfunction]
fn my_func(x: i64, y: &str) -> i64 {
    println!("{}", y);
    x + y.len() as i64
}
```

Add dependencies, (e.g. `num` crate)
```
%rustdef deps add num@0.4.0
```

Defined dependencies are valid only in the current notebook.

Show dependencies,
```
%rustdef deps show
```

```
num = "0.4.0"

[pyo3]
version = "0.13.2"
features = [ "extension-module",]
```

`pyo3` is included by default.

## Develop

### How it works?

Roughly, definitions in rustdef are available in python after the following steps.

1. Each rustdef magic cell is populated with module definition of pyo3
2. A new crate is generated for the rustdef cell
3. The crate is compiled into a python wheel by `maturin`
4. Install the wheel with pip
5. Functions with `#[pyfunction]` attributes are exported into interpreter name space in notebook
6. Ready to call the function in notebook!

### Build

`maturin` is required.

```shell script
$ pip install maturin
$ maturin build
$ pip install target/wheels/rustdef-{version}-{python}-{platform}.whl
```

### ToDo

- [ ] execute within rustdef cell
- [ ] class/module supports
- [ ] customizable module name
- [ ] use functions defined in another cell
- [ ] verbose flag
- [ ] serde support
- [ ] windows support

