#
#  This file is part of Sequana software
#
#  Copyright (c) 2016-2021 - Sequana Development Team
#
#  Distributed under the terms of the 3-clause BSD license.
#  The full license is in the LICENSE file, distributed with this software.
#
#  website: https://github.com/sequana/sequana
#  website: https://github.com/sequana/mapper
#  documentation: http://sequana.readthedocs.io
#  Documentation: https://github.com/sequana/mapper/README.rst
##############################################################################
"""Mappper pipeline"""
import os

import sequana

from sequana_pipetools import snaketools as sm

# This must be defined before the include
configfile: "config.yaml"


# A convenient manager
manager = sm.PipelineManager("mapper", config)

manager.setup(globals(), mode="warning")


__data__input = manager.getrawdata()


rule pipeline:
    input: "multiqc/multiqc_report.html", ".sequana/rulegraph.svg", "reference/genome.fasta"


reference_file = config['general']['reference_file']


rule copy_reference:
    input: config['general']['reference_file']
    output: "reference/genome.fasta"
    shell:
        """cp {input} {output}"""


annotation_file = config['general']['annotation_file']

__prefix_name__ = reference_file.rsplit(".", -1)[0]


if config['general']['mapper'] == "bwa":
    reference = config["general"]["reference_file"]

    rule bwa_index:
        input:
            reference="reference/genome.fasta"
        output:
            bwa_bwt="reference/genome.fasta.bwt",
            fai="reference/genome.fasta.fai"
        log:
            "reference/build.log"
        params:
            options="",
            index_algorithm='is'
        threads: 2
        wrapper:
            "main/wrappers/bwa/build"

    rule bwa:
        input:
            fastq=manager.getrawdata(),
            bwa_bwt="reference/genome.fasta.bwt",
            fai="reference/genome.fasta.fai",
            reference="reference/genome.fasta"
        output:
            sorted="{sample}/{sample}.sorted.bam",
        log:
            "{sample}/{sample}.log"
        params:
            options=config["bwa"]["options"],
            tmp_directory=config["bwa"]["tmp_directory"]
        threads: 2
        wrapper:
            "main/wrappers/bwa/align"

elif config['general']['mapper'] == "minimap2":
    rule minimap2:
        input:
            fastq=manager.getrawdata(),
            reference="reference/genome.fasta"
        output:
            "{sample}/{sample}.sorted.bam"
        threads:
            config["minimap2"]["threads"]
        params:
            options=config['minimap2']['options']
        wrapper:
            "main/wrappers/minimap2"

elif config['general']['mapper'] == "bowtie2":
    if not os.path.exists("reference/genome.1.bt2"):
        rule bowtie2_index:
            input:
                reference="reference/genome.fasta"
            output:
                "reference/genome.1.bt2",
                "reference/genome.fasta.fai"
            log:
                "logs/indexing/bowtie2_genome.log"
            params:
                options=config["bowtie2_index"]["options"]
            threads: config['bowtie2_index']['threads']
            wrapper:
                "main/wrappers/bowtie2/build"

    rule bowtie2:
        input:
            sample=manager.getrawdata(),
            fai="reference/genome.fasta.fai",
            reference="reference/genome.fasta",
            bt2="reference/genome.1.bt2"
        output:
            sorted="{sample}/{sample}.sorted.bam",
        log:
            "logs/bowtie2/{sample}.log"
        params:
            index="reference/genome",
            options=config["bowtie2"]["options"]
        threads: config["bowtie2"]["threads"]
        wrapper:
            "main/wrappers/bowtie2/align"

__bamtools_stats__input =  "{sample}/{sample}.sorted.bam"

rule bam_indexing:
    input:
        "{sample}/{sample}.sorted.bam"
    output:
        "{sample}/{sample}.sorted.bam.bai"
    shell:
        """
           bamtools index -in {input}
        """


# sample should be included at the end of the filename for the multiqc to work
__bamtools_stats__output = "{sample}/bamtools_stats/sequana_bamtools_stats_{sample}.txt"
rule bamtools_stats:
    input: __bamtools_stats__input
    output: __bamtools_stats__output
    shell:
        "bamtools stats -in {input} > {output}"




# Sequana_coverage analysis
__multiqc__input = []
if config["sequana_coverage"]["do"]:

    __bam2cov__input = __bamtools_stats__input
    __bam2cov__output = "{sample}/bam2cov/{sample}.bed"
    __bam2cov__log = "{sample}/bam2cov/{sample}.log"

    rule bam2cov:
        input: __bam2cov__input
        output: __bam2cov__output
        shell:
            """bedtools genomecov -d -ibam {input} > {output} """
    __sequana_coverage__bed = __bam2cov__output
    __sequana_coverage__fasta = reference_file
    if annotation_file:
        __sequana_coverage__gbk = annotation_file
    else:
        __sequana_coverage__gbk = []
    config["sequana_coverage"]['k'] = config['sequana_coverage']['mixture_models']
    __report_dir__ = "{sample}/sequana_coverage"
    __sequana_coverage__report_dir = __report_dir__
    __sequana_coverage__html = os.sep.join([
        __report_dir__, 'sequana_coverage.html'
     ])
    include: sm.modules["sequana_coverage"]
    __multiqc__input += expand(__sequana_coverage__html, sample=manager.samples)


if config["general"]["create_bigwig"]:
    __bam2bigwig__output = "{sample}/bigwig/{sample}.bw"
    rule bam2bigwig:
        input: __bamtools_stats__input
        output: __bam2bigwig__output
        log: "{sample}/bigwig/{sample}.log"
        shell:
            """
            bamCoverage --bam {input} --outFileFormat bigwig --outFileName {output} > {log}
            """
    __multiqc__input += expand(__bam2bigwig__output, sample=manager.samples)




# ========================================================== multiqc
#
sequana_multiqc_input = __multiqc__input
include: sm.modules["multiqc/2.0"]

# ========================================================== rulegraph
#
sequana_rulegraph_mapper = {"multiqc": "../multiqc/multiqc_report.html"}
include: sm.modules['rulegraph']



# Those rules takes a couple of seconds so no need for a cluster
localrules: multiqc, rulegraph



onsuccess:
    shell("chmod -R g+w .")

    from sequana import logger as mylog
    mylog.setLevel("INFO")

    # This should create the stats plot and the Makefile
    manager.teardown()
    manager.clean_multiqc(__multiqc__output)


    from sequana_pipelines.mapper import version as mapper_version
    data = {"name": "mapper",
            "rulegraph": ".sequana/rulegraph.svg",
            "pipeline_version": mapper_version}
    from sequana.modules_report.summary import SummaryModule2


    intro = """<h2>Overview</h2>
This pipeline mapper the different samples on the provided reference. 
A <a href="multiqc/multiqc_report.html">multiqc report</a> is available. Here below are the details of the pipeline (parameters) together with summary plots.
If coverage was selected, you should also have HTML reports for each sample with its coverage."""

    if config["sequana_coverage"]["do"]:
        intro += """<h2>Coverage plots overview</h2>"""
        import glob
        filenames = glob.glob("*/sequana_coverage/*/coverage.png")
        for count, filename in enumerate(filenames):
            parts = filename.split("/")
            image = SummaryModule2.png_to_embedded_png("self_dummy", 
                        filename,
                        #style="align:center; width:30%; height:30%",
                        style="align:center; width:95%; height:95%",
                        alt=parts[0])
            parts = filename.split("/")
            link = "/".join(parts[0:-1] + [parts[-2] + ".cov.html"])

            intro += """
            <div class="box_1_3" ><a href="{}">{}</a><hr>
            <a href="{}">{}</a>
            </div>
            """.format(link, image, link, parts[0])
            if count > 0:
                break


    s = SummaryModule2(data, intro=intro)


onerror:
    from sequana_pipetools.errors import PipeError
    p = PipeError("fastqc")
    p.status()

