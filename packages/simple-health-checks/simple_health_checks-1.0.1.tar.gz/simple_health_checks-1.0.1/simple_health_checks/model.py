# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2021-06-14T13:22:35+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import (
    Any,
    Dict,
    List,
    Optional,
)

from pydantic import (
    AnyUrl,
    BaseModel,
    Field,
)

# pylint: disable=too-few-public-methods


class Status(Enum):
    DOWN = "DOWN"
    DEGRADED = "DEGRADED"
    NOT_CONFIGURED = "NOT_CONFIGURED"
    OK = "OK"


class HealthCheckDependency(BaseModel):
    class Config:
        use_enum_values = True

    type: Optional[str] = Field(
        None, description="Type of dependency. For example: `REST API`"
    )
    description: Optional[str] = Field(
        None, description="Description of the dependency. For example: `Stripe`"
    )
    url: List[str] = Field(..., description="Url of the service")
    status: Status
    additionalProperties: Optional[Dict[str, Any]] = None


class HealthCheckDependencies(BaseModel):
    datastores: Optional[List[HealthCheckDependency]] = None
    apis: Optional[List[HealthCheckDependency]] = None


class HealthCheckResponse(BaseModel):
    class Config:
        use_enum_values = True

    serviceName: str = Field(..., description="Name of the service")
    requestUrl: Optional[AnyUrl] = None
    datetime: datetime = Field(..., description="date time when check was performed")
    dependencies: Optional[HealthCheckDependencies] = None
    status: Status
    version: str = Field(..., description="Current version of the service")
    simpleHealthChecksVersion: str = Field(
        ..., description="Current version of the health checks package"
    )
    components: Optional[List[str]] = Field(
        None, description="Complete list of components of this application"
    )
    unavailableComponents: Optional[List[str]] = Field(
        None,
        description="List of components within this service that are not available. "
        "This list should appear when the status is Degraded, Down or Not Configured",
    )
