"""
    Xbim Flex Identity API 1.0

    Communication centralised around construction data  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from identity.api_client import ApiClient, Endpoint as _Endpoint
from identity.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from identity.model.o_data_boolean import ODataBoolean
from identity.model.o_data_string import ODataString
from identity.model.o_data_tenant_list import ODataTenantList
from identity.model.subscription import Subscription
from identity.model.tenant import Tenant
from identity.model.tenant_create import TenantCreate
from identity.model.tenant_edit import TenantEdit


class TenantsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.id_api_tenants_demo_get_endpoint = _Endpoint(
            settings={
                'response_type': (Tenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants/Demo',
                'operation_id': 'id_api_tenants_demo_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_demo_tenant_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (ODataString,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants/DemoTenantId',
                'operation_id': 'id_api_tenants_demo_tenant_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                    'select',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_get_endpoint = _Endpoint(
            settings={
                'response_type': (ODataTenantList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants',
                'operation_id': 'id_api_tenants_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'expand',
                    'filter',
                    'select',
                    'orderby',
                    'top',
                    'skip',
                    'count',
                ],
                'required': [],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'expand':
                        (str,),
                    'filter':
                        (str,),
                    'select':
                        (str,),
                    'orderby':
                        (str,),
                    'top':
                        (int,),
                    'skip':
                        (int,),
                    'count':
                        (bool,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'filter': '$filter',
                    'select': '$select',
                    'orderby': '$orderby',
                    'top': '$top',
                    'skip': '$skip',
                    'count': '$count',
                },
                'location_map': {
                    'expand': 'query',
                    'filter': 'query',
                    'select': 'query',
                    'orderby': 'query',
                    'top': 'query',
                    'skip': 'query',
                    'count': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_get_by_id_identifieridentifier_get_endpoint = _Endpoint(
            settings={
                'response_type': (Tenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants/GetById(identifier=identifier)',
                'operation_id': 'id_api_tenants_get_by_id_identifieridentifier_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'identifier',
                    'expand',
                    'select',
                ],
                'required': [
                    'identifier',
                ],
                'nullable': [
                    'identifier',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'identifier':
                        (str, none_type,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'identifier': 'identifier',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'identifier': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_is_identifier_available_idid_get_endpoint = _Endpoint(
            settings={
                'response_type': (ODataBoolean,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants/IsIdentifierAvailable(id=id)',
                'operation_id': 'id_api_tenants_is_identifier_available_idid_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'id',
                    'expand',
                    'select',
                ],
                'required': [
                    'id',
                ],
                'nullable': [
                    'id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'id':
                        (str, none_type,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'id': 'id',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_post_endpoint = _Endpoint(
            settings={
                'response_type': (Tenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants',
                'operation_id': 'id_api_tenants_post',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_create',
                    'expand',
                    'select',
                ],
                'required': [
                    'tenant_create',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_create':
                        (TenantCreate,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'tenant_create': 'body',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json',
                    'application/xml',
                    'application/prs.mock-odata',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.id_api_tenants_tenant_id_delete_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants({tenantId})',
                'operation_id': 'id_api_tenants_tenant_id_delete',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                ],
                'required': [
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                },
                'location_map': {
                    'tenant_id': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_tenant_id_get_endpoint = _Endpoint(
            settings={
                'response_type': (Tenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants({tenantId})',
                'operation_id': 'id_api_tenants_tenant_id_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'expand',
                    'select',
                ],
                'required': [
                    'tenant_id',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.id_api_tenants_tenant_id_patch_endpoint = _Endpoint(
            settings={
                'response_type': (Tenant,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants({tenantId})',
                'operation_id': 'id_api_tenants_tenant_id_patch',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'tenant_id',
                    'tenant_edit',
                    'expand',
                    'select',
                ],
                'required': [
                    'tenant_id',
                    'tenant_edit',
                ],
                'nullable': [
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'tenant_id':
                        (str,),
                    'tenant_edit':
                        (TenantEdit,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'tenant_id': 'path',
                    'tenant_edit': 'body',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json',
                    'application/xml',
                    'application/prs.mock-odata',
                    'text/json',
                    'application/*+json'
                ]
            },
            api_client=api_client
        )
        self.id_api_tenants_tenant_id_subscription_get_endpoint = _Endpoint(
            settings={
                'response_type': (Subscription,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/id/api/Tenants({tenantId})/Subscription',
                'operation_id': 'id_api_tenants_tenant_id_subscription_get',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'client_id',
                    'tenant_id',
                    'expand',
                    'select',
                ],
                'required': [
                    'client_id',
                    'tenant_id',
                ],
                'nullable': [
                    'client_id',
                ],
                'enum': [
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                },
                'openapi_types': {
                    'client_id':
                        (str, none_type,),
                    'tenant_id':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'client_id': 'clientId',
                    'tenant_id': 'tenantId',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'client_id': 'path',
                    'tenant_id': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json;odata.metadata=minimal;odata.streaming=true',
                    'application/json;odata.metadata=minimal;odata.streaming=false',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full;odata.streaming=true',
                    'application/json;odata.metadata=full;odata.streaming=false',
                    'application/json;odata.metadata=full',
                    'application/json;odata.metadata=none;odata.streaming=true',
                    'application/json;odata.metadata=none;odata.streaming=false',
                    'application/json;odata.metadata=none',
                    'application/json;odata.streaming=true',
                    'application/json;odata.streaming=false',
                    'application/json'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def id_api_tenants_demo_get(
        self,
        **kwargs
    ):
        """Registers user in the 'Demo' tenancy  # noqa: E501

        Any user can request to be registered in the demo tenancy  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_demo_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.id_api_tenants_demo_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_demo_tenant_id_get(
        self,
        **kwargs
    ):
        """Gets publickly known demo tenant id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_demo_tenant_id_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ODataString
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.id_api_tenants_demo_tenant_id_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_get(
        self,
        **kwargs
    ):
        """Operations to query a set of data  # noqa: E501

        Queries support: $filter, $orderby, $select, $expand(including nested filters, selects and expands), $top, $skip  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_get(async_req=True)
        >>> result = thread.get()


        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            filter (str): Restricts the set of items returned. The maximum number of expressions is 1000. The allowed functions are: allfunctions.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            orderby (str): Specifies the order in which items are returned. The maximum number of expressions is 5.. [optional]
            top (int): Limits the number of items returned from a collection. The maximum value is 1000.. [optional]
            skip (int): Excludes the specified number of items of the queried collection from the result.. [optional]
            count (bool): Indicates whether the total count of items within a collection are returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ODataTenantList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        return self.id_api_tenants_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_get_by_id_identifieridentifier_get(
        self,
        identifier,
        **kwargs
    ):
        """Gets the specified Tenant by its unique identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_get_by_id_identifieridentifier_get(identifier, async_req=True)
        >>> result = thread.get()

        Args:
            identifier (str, none_type): The Tenant identifier.

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['identifier'] = \
            identifier
        return self.id_api_tenants_get_by_id_identifieridentifier_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_is_identifier_available_idid_get(
        self,
        id,
        **kwargs
    ):
        """Checks the availability of a Tenant identifier  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_is_identifier_available_idid_get(id, async_req=True)
        >>> result = thread.get()

        Args:
            id (str, none_type):

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            ODataBoolean
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['id'] = \
            id
        return self.id_api_tenants_is_identifier_available_idid_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_post(
        self,
        tenant_create,
        **kwargs
    ):
        """Creates a new Tenant for the current user  # noqa: E501

        The ability to create Tenants may be limited by Subscription level  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_post(tenant_create, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_create (TenantCreate):

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_create'] = \
            tenant_create
        return self.id_api_tenants_post_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_tenant_id_delete(
        self,
        tenant_id,
        **kwargs
    ):
        """Delete the tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_tenant_id_delete(tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        return self.id_api_tenants_tenant_id_delete_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_tenant_id_get(
        self,
        tenant_id,
        **kwargs
    ):
        """Gets the specified Tenant by its key  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_tenant_id_get(tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 5.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        return self.id_api_tenants_tenant_id_get_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_tenant_id_patch(
        self,
        tenant_id,
        tenant_edit,
        **kwargs
    ):
        """Patch tenant  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_tenant_id_patch(tenant_id, tenant_edit, async_req=True)
        >>> result = thread.get()

        Args:
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)
            tenant_edit (TenantEdit): delta changes

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Tenant
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['tenant_id'] = \
            tenant_id
        kwargs['tenant_edit'] = \
            tenant_edit
        return self.id_api_tenants_tenant_id_patch_endpoint.call_with_http_info(**kwargs)

    def id_api_tenants_tenant_id_subscription_get(
        self,
        client_id,
        tenant_id,
        **kwargs
    ):
        """Gets Subscription Plans for the given client  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.id_api_tenants_tenant_id_subscription_get(client_id, tenant_id, async_req=True)
        >>> result = thread.get()

        Args:
            client_id (str, none_type): The client Id
            tenant_id (str): The unique Tenant ID (UUID or Identifier string)

        Keyword Args:
            expand (str): Indicates the related entities to be represented inline. The maximum depth is 2.. [optional]
            select (str): Limits the properties returned in the result.. [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Subscription
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['client_id'] = \
            client_id
        kwargs['tenant_id'] = \
            tenant_id
        return self.id_api_tenants_tenant_id_subscription_get_endpoint.call_with_http_info(**kwargs)

