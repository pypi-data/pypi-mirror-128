"""
    Flex Comms API 1.0

    Communication centralised around construction data  # noqa: E501

    The version of the OpenAPI document: 1.0
    Contact: info@xbim.net
    Generated by: https://openapi-generator.tech
"""


import re  # noqa: F401
import sys  # noqa: F401

from xbim_flex.comms.api_client import ApiClient, Endpoint as _Endpoint
from xbim_flex.comms.model_utils import (  # noqa: F401
    check_allowed_values,
    check_validations,
    date,
    datetime,
    file_type,
    none_type,
    validate_and_convert_types
)
from xbim_flex.comms.model.exception_message import ExceptionMessage
from xbim_flex.comms.model.identity import Identity
from xbim_flex.comms.model.web_hook import WebHook
from xbim_flex.comms.model.web_hook_list import WebHookList
from xbim_flex.comms.model.web_hook_payload import WebHookPayload


class MeApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client
        self.delete_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': None,
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me/WebHooks',
                'operation_id': 'delete_web_hook',
                'http_method': 'DELETE',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'id',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'id':
                        (int,),
                },
                'attribute_map': {
                    'region': 'region',
                    'id': 'id',
                },
                'location_map': {
                    'region': 'path',
                    'id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_me_endpoint = _Endpoint(
            settings={
                'response_type': (Identity,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me',
                'operation_id': 'get_me',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'expand',
                    'select',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'expand': '$expand',
                    'select': '$select',
                },
                'location_map': {
                    'region': 'path',
                    'expand': 'query',
                    'select': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.get_web_hooks_endpoint = _Endpoint(
            settings={
                'response_type': (WebHookList,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me/WebHooks',
                'operation_id': 'get_web_hooks',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                },
                'location_map': {
                    'region': 'path',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.patch_web_hooks_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me/WebHooks',
                'operation_id': 'patch_web_hooks',
                'http_method': 'PATCH',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'id',
                    'name',
                    'secret',
                    'callback_url',
                    'is_active',
                    'type',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                    ('type',): {

                        "NONE": "None",
                        "MESSAGESENT": "MessageSent",
                        "MESSAGERECEIVED": "MessageReceived"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'id':
                        (int,),
                    'name':
                        (str,),
                    'secret':
                        (str,),
                    'callback_url':
                        (str,),
                    'is_active':
                        (bool,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'id': 'id',
                    'name': 'Name',
                    'secret': 'Secret',
                    'callback_url': 'CallbackUrl',
                    'is_active': 'IsActive',
                    'type': 'Type',
                },
                'location_map': {
                    'region': 'path',
                    'id': 'query',
                    'name': 'query',
                    'secret': 'query',
                    'callback_url': 'query',
                    'is_active': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.post_web_hooks_endpoint = _Endpoint(
            settings={
                'response_type': (WebHook,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me/WebHooks',
                'operation_id': 'post_web_hooks',
                'http_method': 'POST',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'name',
                    'secret',
                    'callback_url',
                    'is_active',
                    'type',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                    'type',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                    ('type',): {

                        "NONE": "None",
                        "MESSAGESENT": "MessageSent",
                        "MESSAGERECEIVED": "MessageReceived"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'name':
                        (str,),
                    'secret':
                        (str,),
                    'callback_url':
                        (str,),
                    'is_active':
                        (bool,),
                    'type':
                        (str,),
                },
                'attribute_map': {
                    'region': 'region',
                    'name': 'Name',
                    'secret': 'Secret',
                    'callback_url': 'CallbackUrl',
                    'is_active': 'IsActive',
                    'type': 'Type',
                },
                'location_map': {
                    'region': 'path',
                    'name': 'query',
                    'secret': 'query',
                    'callback_url': 'query',
                    'is_active': 'query',
                    'type': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )
        self.trigger_web_hook_endpoint = _Endpoint(
            settings={
                'response_type': (WebHookPayload,),
                'auth': [
                    'oauth2'
                ],
                'endpoint_path': '/{region}/comms/api/me/WebHooks/Trigger',
                'operation_id': 'trigger_web_hook',
                'http_method': 'GET',
                'servers': None,
            },
            params_map={
                'all': [
                    'region',
                    'expand',
                    'select',
                    'id',
                    'message_id',
                ],
                'required': [
                    'region',
                ],
                'nullable': [
                ],
                'enum': [
                    'region',
                ],
                'validation': [
                ]
            },
            root_map={
                'validations': {
                },
                'allowed_values': {
                    ('region',): {

                        "UK": "UK",
                        "WESTEUROPE": "WestEurope"
                    },
                },
                'openapi_types': {
                    'region':
                        (str,),
                    'expand':
                        (str,),
                    'select':
                        (str,),
                    'id':
                        (int,),
                    'message_id':
                        (int,),
                },
                'attribute_map': {
                    'region': 'region',
                    'expand': '$expand',
                    'select': '$select',
                    'id': 'id',
                    'message_id': 'messageId',
                },
                'location_map': {
                    'region': 'path',
                    'expand': 'query',
                    'select': 'query',
                    'id': 'query',
                    'message_id': 'query',
                },
                'collection_format_map': {
                }
            },
            headers_map={
                'accept': [
                    'application/json',
                    'application/json;odata.metadata=none',
                    'application/json;odata.metadata=minimal',
                    'application/json;odata.metadata=full'
                ],
                'content_type': [],
            },
            api_client=api_client
        )

    def delete_web_hook(
        self,
        region="UK",
        **kwargs
    ):
        """delete_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.delete_web_hook(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            None
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.delete_web_hook_endpoint.call_with_http_info(**kwargs)

    def get_me(
        self,
        region="UK",
        **kwargs
    ):
        """get_me  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_me(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            select (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            Identity
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.get_me_endpoint.call_with_http_info(**kwargs)

    def get_web_hooks(
        self,
        region="UK",
        **kwargs
    ):
        """get_web_hooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_web_hooks(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHookList
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.get_web_hooks_endpoint.call_with_http_info(**kwargs)

    def patch_web_hooks(
        self,
        region="UK",
        **kwargs
    ):
        """patch_web_hooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.patch_web_hooks(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            id (int): [optional]
            name (str): [optional]
            secret (str): [optional]
            callback_url (str): [optional]
            is_active (bool): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.patch_web_hooks_endpoint.call_with_http_info(**kwargs)

    def post_web_hooks(
        self,
        region="UK",
        **kwargs
    ):
        """post_web_hooks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.post_web_hooks(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            name (str): [optional]
            secret (str): [optional]
            callback_url (str): [optional]
            is_active (bool): [optional]
            type (str): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHook
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.post_web_hooks_endpoint.call_with_http_info(**kwargs)

    def trigger_web_hook(
        self,
        region="UK",
        **kwargs
    ):
        """trigger_web_hook  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.trigger_web_hook(region="UK", async_req=True)
        >>> result = thread.get()

        Args:
            region (str): The data center region the data resides in. defaults to "UK", must be one of ["UK"]

        Keyword Args:
            expand (str): [optional]
            select (str): [optional]
            id (int): [optional]
            message_id (int): [optional]
            _return_http_data_only (bool): response data without head status
                code and headers. Default is True.
            _preload_content (bool): if False, the urllib3.HTTPResponse object
                will be returned without reading/decoding response data.
                Default is True.
            _request_timeout (int/float/tuple): timeout setting for this request. If
                one number provided, it will be total request timeout. It can also
                be a pair (tuple) of (connection, read) timeouts.
                Default is None.
            _check_input_type (bool): specifies if type checking
                should be done one the data sent to the server.
                Default is True.
            _check_return_type (bool): specifies if type checking
                should be done one the data received from the server.
                Default is True.
            _host_index (int/None): specifies the index of the server
                that we want to use.
                Default is read from the configuration.
            async_req (bool): execute request asynchronously

        Returns:
            WebHookPayload
                If the method is called asynchronously, returns the request
                thread.
        """
        kwargs['async_req'] = kwargs.get(
            'async_req', False
        )
        kwargs['_return_http_data_only'] = kwargs.get(
            '_return_http_data_only', True
        )
        kwargs['_preload_content'] = kwargs.get(
            '_preload_content', True
        )
        kwargs['_request_timeout'] = kwargs.get(
            '_request_timeout', None
        )
        kwargs['_check_input_type'] = kwargs.get(
            '_check_input_type', True
        )
        kwargs['_check_return_type'] = kwargs.get(
            '_check_return_type', True
        )
        kwargs['_host_index'] = kwargs.get('_host_index')
        kwargs['region'] = \
            region
        return self.trigger_web_hook_endpoint.call_with_http_info(**kwargs)

